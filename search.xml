<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker安装 RocketMQ</title>
      <link href="/posts/3432967433.html"/>
      <url>/posts/3432967433.html</url>
      
        <content type="html"><![CDATA[<h1 id="拉取-RocketMQ-镜像"><a href="#拉取-RocketMQ-镜像" class="headerlink" title="拉取 RocketMQ 镜像"></a>拉取 <code>RocketMQ</code> 镜像</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rocketmqinc/rocketmq</span><br></pre></td></tr></table></figure><h1 id="namesrv-服务"><a href="#namesrv-服务" class="headerlink" title="namesrv 服务"></a>namesrv 服务</h1><h2 id="创建-namesrv-数据存储路径"><a href="#创建-namesrv-数据存储路径" class="headerlink" title="创建 namesrv 数据存储路径"></a>创建 namesrv 数据存储路径</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/rocketmq/store /data/rocketmq/namesrv/logs</span><br></pre></td></tr></table></figure><h2 id="构建-namesrv-容器"><a href="#构建-namesrv-容器" class="headerlink" title="构建 namesrv 容器"></a>构建 namesrv 容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--restart=always \</span><br><span class="line">--name rmqnamesrv \</span><br><span class="line">-p 9876:9876 \</span><br><span class="line">-v /data/rocketmq/namesrv/logs:/root/logs \</span><br><span class="line">-v /data/rocketmq/namesrv/store:/root/store \</span><br><span class="line">-e &quot;JAVA_OPT_EXT=-server -Xms128m -Xmx128m -Xmn128m&quot; \</span><br><span class="line">-e &quot;MAX_POSSIBLE_HEAP=100000000&quot; \</span><br><span class="line">rocketmqinc/rocketmq \</span><br><span class="line">sh mqnamesrv </span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-d</td><td>以守护进程的方式启动</td></tr><tr><td>- -restart=always</td><td>docker重启时候容器自动重启</td></tr><tr><td>- -name rmqnamesrv</td><td>把容器的名字设置为rmqnamesrv</td></tr><tr><td>-p 9876:9876</td><td>把容器内的端口9876挂载到宿主机9876上面</td></tr><tr><td>-v /data/rocketmq/namesrv/logs:/root/logs</td><td>把容器内的/root/logs日志目录挂载到宿主机的 /data/rocketmq/namesrv/logs目录</td></tr><tr><td>-v /data/rocketmq/namesrv/store:/root/store</td><td>把容器内的/root/store数据存储目录挂载到宿主机的 /data/rocketmq/namesrv/store目录</td></tr><tr><td>rmqnamesrv</td><td>容器的名字</td></tr><tr><td>-e “MAX_POSSIBLE_HEAP=100000000”</td><td>设置容器的最大堆内存为100000000</td></tr><tr><td>rocketmqinc/rocketmq</td><td>使用的镜像名称</td></tr><tr><td>sh mqnamesrv</td><td>启动namesrv服务</td></tr></tbody></table><h1 id="Broker-节点"><a href="#Broker-节点" class="headerlink" title="Broker 节点"></a>Broker 节点</h1><h2 id="创建broker数据存储路径"><a href="#创建broker数据存储路径" class="headerlink" title="创建broker数据存储路径"></a>创建broker数据存储路径</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p  /data/rocketmq/broker/logs   /data/rocketmq/broker/store /data/rocketmq/conf</span><br></pre></td></tr></table></figure><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>vim /data/rocketmq/conf/broker.conf </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 所属集群名称，如果节点较多可以配置多个</span><br><span class="line">brokerClusterName = DefaultCluster</span><br><span class="line">#broker名称，master和slave使用相同的名称，表明他们的主从关系</span><br><span class="line">brokerName = broker-a</span><br><span class="line">#0表示Master，大于0表示不同的slave</span><br><span class="line">brokerId = 0</span><br><span class="line">#表示几点做消息删除动作，默认是凌晨4点</span><br><span class="line">deleteWhen = 04</span><br><span class="line">#在磁盘上保留消息的时长，单位是小时</span><br><span class="line">fileReservedTime = 48</span><br><span class="line">#有三个值：SYNC_MASTER，ASYNC_MASTER，SLAVE；同步和异步表示Master和Slave之间同步数据的机制；</span><br><span class="line">brokerRole = ASYNC_MASTER</span><br><span class="line">#刷盘策略，取值为：ASYNC_FLUSH，SYNC_FLUSH表示同步刷盘和异步刷盘；SYNC_FLUSH消息写入磁盘后才返回成功状态，ASYNC_FLUSH不需要；</span><br><span class="line">flushDiskType = ASYNC_FLUSH</span><br><span class="line"># 设置broker节点所在服务器的ip地址(宿住机ip 外网) 如果是虚拟机ip可能是 192.168....</span><br><span class="line">brokerIP1 = dev.lzscxb.cn</span><br><span class="line"># 磁盘使用达到95%之后,生产者再写入消息会报错 CODE: 14 DESC: service not available now, maybe disk full</span><br><span class="line">diskMaxUsedSpaceRatio=95</span><br></pre></td></tr></table></figure><h2 id="构建broker容器"><a href="#构建broker容器" class="headerlink" title="构建broker容器"></a>构建broker容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run -d  \</span><br><span class="line">--restart=always \</span><br><span class="line">--name rmqbroker \</span><br><span class="line">--link rmqnamesrv:namesrv \</span><br><span class="line">-p 10911:10911 \</span><br><span class="line">-p 10909:10909 \</span><br><span class="line">-v  /data/rocketmq/broker/logs:/root/logs \</span><br><span class="line">-v  /data/rocketmq/broker/store:/root/store \</span><br><span class="line">-v /data/rocketmq/conf/broker.conf:/opt/rocketmq-4.4.0/conf/broker.conf \</span><br><span class="line">-e &quot;NAMESRV_ADDR=namesrv:9876&quot; \</span><br><span class="line">-e &quot;MAX_POSSIBLE_HEAP=200000000&quot; \</span><br><span class="line">-e &quot;JAVA_OPT_EXT=-server -Xms128m -Xmx128m -Xmn128m&quot; \</span><br><span class="line">rocketmqinc/rocketmq \</span><br><span class="line">sh mqbroker -c /opt/rocketmq-4.4.0/conf/broker.conf </span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-d</td><td align="left">以守护进程的方式启动</td></tr><tr><td align="left">–restart=always</td><td align="left">docker重启时候镜像自动重启</td></tr><tr><td align="left">- -name rmqbroker</td><td align="left">把容器的名字设置为rmqbroker</td></tr><tr><td align="left">- –link rmqnamesrv:namesrv</td><td align="left">和rmqnamesrv容器通信</td></tr><tr><td align="left">-p 10911:10911</td><td align="left">把容器的非vip通道端口挂载到宿主机</td></tr><tr><td align="left">-p 10909:10909</td><td align="left">把容器的vip通道端口挂载到宿主机</td></tr><tr><td align="left">-e “NAMESRV_ADDR=namesrv:9876”</td><td align="left">指定namesrv的地址为本机namesrv的ip地址:9876</td></tr><tr><td align="left">-e “MAX_POSSIBLE_HEAP=200000000” rocketmqinc/rocketmq sh mqbroker</td><td align="left">指定broker服务的最大堆内存</td></tr><tr><td align="left">rocketmqinc/rocketmq</td><td align="left">使用的镜像名称</td></tr><tr><td align="left">sh mqbroker -c /opt/rocketmq-4.4.0/conf/broker.conf</td><td align="left">指定配置文件启动broker节点</td></tr></tbody></table><h1 id="rockermq-console服务"><a href="#rockermq-console服务" class="headerlink" title="rockermq-console服务"></a>rockermq-console服务</h1><p>需要把 dev.lzscxb.cn 换成部署 namesrv 机器地址（外网地址） 虚拟机安装ip可能是192.168…</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--restart=always \</span><br><span class="line">--name rmqadmin \</span><br><span class="line">-e &quot;JAVA_OPTS=-Drocketmq.namesrv.addr=dev.lzscxb.cn:9876 \</span><br><span class="line">-Dcom.rocketmq.sendMessageWithVIPChannel=false&quot; \</span><br><span class="line">-p 9999:8080 \</span><br><span class="line">pangliang/rocketmq-console-ng</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-d</td><td align="left">以守护进程的方式启动</td></tr><tr><td align="left">- -restart=always</td><td align="left">docker重启时候镜像自动重启</td></tr><tr><td align="left">- -name rmqadmin</td><td align="left">把容器的名字设置为rmqadmin</td></tr><tr><td align="left">-e “JAVA_OPTS=-Drocketmq.namesrv.addr={外网ip}:9876</td><td align="left">设置namesrv服务的ip地址</td></tr><tr><td align="left">-Dcom.rocketmq.sendMessageWithVIPChannel=false”</td><td align="left">不使用vip通道发送消息</td></tr><tr><td align="left">–p 9999:8080</td><td align="left">把容器内的端口8080挂载到宿主机上的9999端口</td></tr></tbody></table><p><strong>需要关闭防火墙或者开放namesrv:9876和broker:10909、10911端口</strong> </p><p>如果不设置,控制台服务将无法访问namesrv服务<br>异常信息如下<br>org.<a href="https://so.csdn.net/so/search?q=apache&spm=1001.2101.3001.7020">apache</a>.rocketmq.remoting.exception.RemotingConnectException: connect to failed</p><h2 id="访问控制台"><a href="#访问控制台" class="headerlink" title="访问控制台"></a>访问控制台</h2><p>网页访问<a href="http://ip:9999/%E6%9F%A5%E7%9C%8B%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BF%A1%E6%81%AF">http://ip:9999/查看控制台信息</a></p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220706010945024.png" alt="image-20220706010945024"></p>]]></content>
      
      
      <categories>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java RSA非对称加密算法工具类和Jwt Toekn工具类</title>
      <link href="/posts/1576613567.html"/>
      <url>/posts/1576613567.html</url>
      
        <content type="html"><![CDATA[<p>这里提供一个RSA加密算法的工具类，其中包含生成密钥、加密、解密、加签、验签等RSA常用的方法，可以直接使用</p><p>引入 Maven 依赖，(如果不引入则需要修改 base64加密、解密方法为 <code>java.ultils.base64</code>)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.19.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="RSA工具类"><a href="#RSA工具类" class="headerlink" title="RSA工具类"></a>RSA工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lzscxb.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPublicKey;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> RSA非对称加密算法工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> LzsCxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/07/04 20:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RSAUtils</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RSA最大加密明文大小 2048/8-11</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ENCRYPT_BLOCK</span> <span class="operator">=</span> <span class="number">245</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RSA最大解密密文大小 2048/8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_DECRYPT_BLOCK</span> <span class="operator">=</span> <span class="number">256</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义加密方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_RSA</span> <span class="operator">=</span> <span class="string">&quot;RSA&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义公钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_RSA_PUBLICKEY</span> <span class="operator">=</span> <span class="string">&quot;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAhbMJG9i6O0T1hQ8oCoThMAg/0mlcerjYn+wMdZudoDCeEbxKYebs+WoNvBmV26A/co9yJ2+aUIf60kkJ6YwDh9pXSk2vgm7x0TAZ9HzRhpk6td4JO4HM9QpPaQG2Z3Tw8DnhNk7yGADp+weLqgULDDlUI7lm1s1G9OSY+ZK2TwjKPSC4j1CnjD6kvSW1qVGB0GhkreX877Rop+KbOmVE+JtQQgc+DcOgyMjGtSvDGrwBsI569wrywlOeFMLqVDlVLi3ugWDSEn3EHz63Nj442VSfR6ukxtifIwmogUI4VplXQoO4Am6kKH50tkggqVBNFGh0s5qavpig0XYkn42+6QIDAQAB&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_RSA_PRIVATEKEY</span> <span class="operator">=</span> <span class="string">&quot;MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCFswkb2Lo7RPWFDygKhOEwCD/SaVx6uNif7Ax1m52gMJ4RvEph5uz5ag28GZXboD9yj3Inb5pQh/rSSQnpjAOH2ldKTa+CbvHRMBn0fNGGmTq13gk7gcz1Ck9pAbZndPDwOeE2TvIYAOn7B4uqBQsMOVQjuWbWzUb05Jj5krZPCMo9ILiPUKeMPqS9JbWpUYHQaGSt5fzvtGin4ps6ZUT4m1BCBz4Nw6DIyMa1K8MavAGwjnr3CvLCU54UwupUOVUuLe6BYNISfcQfPrc2PjjZVJ9Hq6TG2J8jCaiBQjhWmVdCg7gCbqQofnS2SCCpUE0UaHSzmpq+mKDRdiSfjb7pAgMBAAECggEAR3vSAvF9oPLd0qan4ffp7qR6eyWaLINoTxkGEFuDi4JzAUiK/I1bZn8tmMSVOzgStE292xfwid4qXQRwKE6UFK7IvRGMJVDsOcxeFDooTK7glRyCEy7zRpCcpKglvmrn54kKwN600eCrOWxvYBgSMBb2xaL7OR3IMmeG4uluUBK8u8phRfXbt1CaQvzfqZqZbspE/XX23Lgnxq/7PV2ME1ukOHAzQm8XdSQosLTX2WhbGBCG8xG1Ia9qZ5R63Y3Gk8gnXxVEpzcbtF7sxU/hDwdpfb7wiIQTyoBcL/XIr9I42p4TvizAtr4spzzkIMprKiEAP1IozBCD3YWvPMUJgQKBgQDGgSoosujtJ2OicvtJrO67YW6ecMc9L2VBY/qAxrivC+Ups/rS2PPchNy9abv8JGnCpa1MdOUudpaSv9g47BES5NwZ38bGHj+U7Wg9VIRQ/G8dxWelQrVgALLJ9mjDmJrenUmfwBaYqej3fvYZMA/hWT0CUhBWKVn1X0nPzXlYRwKBgQCsbKgHrQK39bccVMBDBnsRLXzJOLcIFu+AHShhqQfttMeDOQiXuVpy4CAv84y0Y3/rV7Yr6RGZ1pOTOr2NvTGUka/ZfOvYi8UPULzAOLh02KBb1LtcRrvwPYuoLxKN81XYZ85yS7EggpEFtbsm0YSZozv4Vx5uccHxevzHXBn3TwKBgQCj83DPtp09qufW96LnAicXquyDfmCA/5FhBeOT0w4cvfVjkVycI0afHzl2VEtIgQa9Frvgxze3PYk14bADq66abV4BHNt/LOKU7dTHuvOiNCzOaQom68cEaO9CcfureXKIZV62zB+drdBWAo3e1dx34o3KSd9mWrcLO82qDWqo5wKBgGxZAuV/5Dtw3hWhdAcqJV9P9CAF0Y31y533tI5Zxy+p780Xo7yjrqCNEezP4FTiSVm7ji/djz/aRHW57a8JegRf396Mzy8N9VCAbXtkqRRTo8DQ1sNPd32pTv7qRYCJriIEaQgNZEqHgVXTMr1b3zUkC+Ur6WWBeluh6wHjcDWlAoGAfduQDd31wN1r8MaTv0Uj1k4YXWPQdfKlmATsD0iT1oMg2bfPVwPhs+UI5hwhu2KD/zjzS7qGyfXiTXLh11pJrlFV9D5OVsxwOKwCGe1mUuwmBtWTTLxw1Irlz91Tu3sgioSZ9MeuUHI1psAttcnxGmOq6taEXCFkr20q+9SH3fk=&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义签名算法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">KEY_RSA_SIGNATURE</span> <span class="operator">=</span> <span class="string">&quot;sha256withRSA&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成公私密钥对</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">KeyPairGenerator</span> <span class="variable">generator</span> <span class="operator">=</span> KeyPairGenerator.getInstance(KEY_RSA);</span><br><span class="line">            <span class="comment">//设置密钥对的bit数，越大越安全，但速度减慢，一般使用512或1024、2048</span></span><br><span class="line">            generator.initialize(<span class="number">2048</span>);</span><br><span class="line">            <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> generator.generateKeyPair();</span><br><span class="line">            <span class="comment">// 获取公钥</span></span><br><span class="line">            <span class="type">RSAPublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> (RSAPublicKey) keyPair.getPublic();</span><br><span class="line">            <span class="comment">// 获取私钥</span></span><br><span class="line">            <span class="type">RSAPrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> (RSAPrivateKey) keyPair.getPrivate();</span><br><span class="line">            <span class="comment">// 将密钥对封装为Map</span></span><br><span class="line">            map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;(<span class="number">2</span>);</span><br><span class="line">            map.put(KEY_RSA_PUBLICKEY, publicKey);</span><br><span class="line">            map.put(KEY_RSA_PRIVATEKEY, privateKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 RSAPublicKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RSAPublicKey <span class="title function_">getPublicKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] decoded = Base64.decodeBase64(KEY_RSA_PUBLICKEY);</span><br><span class="line">        <span class="type">KeyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_RSA);</span><br><span class="line">        <span class="type">PublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> factory.generatePublic(<span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(decoded));</span><br><span class="line">        <span class="keyword">return</span> (RSAPublicKey) publicKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 RSAPrivateKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RSAPrivateKey <span class="title function_">getPrivateKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] decoded = Base64.decodeBase64(KEY_RSA_PRIVATEKEY);</span><br><span class="line">        <span class="type">KeyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_RSA);</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> factory.generatePrivate(<span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(decoded));</span><br><span class="line">        <span class="keyword">return</span> (RSAPrivateKey) privateKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥加密  如果大于245则分段加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encryptByPublic</span><span class="params">(String encryptingStr, String publicKeyStr)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将公钥由字符串转为UTF-8格式的字节数组</span></span><br><span class="line">            <span class="type">byte</span>[] publicKeyBytes = Base64.decodeBase64(publicKeyStr);</span><br><span class="line">            <span class="comment">// 获得公钥</span></span><br><span class="line">            <span class="type">X509EncodedKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(publicKeyBytes);</span><br><span class="line">            <span class="comment">// 取得待加密数据</span></span><br><span class="line">            <span class="type">byte</span>[] data = encryptingStr.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">            KeyFactory factory;</span><br><span class="line">            factory = KeyFactory.getInstance(KEY_RSA);</span><br><span class="line">            <span class="type">PublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> factory.generatePublic(keySpec);</span><br><span class="line">            <span class="comment">// 对数据加密</span></span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(factory.getAlgorithm());</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line">            <span class="type">int</span> <span class="variable">inputLen</span> <span class="operator">=</span> data.length;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">offSet</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] cache;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 对数据分段加密</span></span><br><span class="line">            <span class="keyword">while</span> (inputLen - offSet &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (inputLen - offSet &gt; MAX_ENCRYPT_BLOCK) &#123;</span><br><span class="line">                    cache = cipher.doFinal(data, offSet, MAX_ENCRYPT_BLOCK);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cache = cipher.doFinal(data, offSet, inputLen - offSet);</span><br><span class="line">                &#125;</span><br><span class="line">                out.write(cache, <span class="number">0</span>, cache.length);</span><br><span class="line">                i++;</span><br><span class="line">                offSet = i * MAX_ENCRYPT_BLOCK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[] encryptedData = out.toByteArray();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="comment">// 返回加密后由Base64编码的加密信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encodeBase64(encryptedData));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥解密 如果大于256则分段解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decryptByPrivate</span><span class="params">(String encryptedStr, String privateKeyStr)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 对私钥解密</span></span><br><span class="line">            <span class="type">byte</span>[] privateKeyBytes = Base64.decodeBase64(privateKeyStr);</span><br><span class="line">            <span class="comment">// 获得私钥</span></span><br><span class="line">            <span class="type">PKCS8EncodedKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(privateKeyBytes);</span><br><span class="line">            <span class="comment">// 获得待解密数据</span></span><br><span class="line">            <span class="type">byte</span>[] data = Base64.decodeBase64(encryptedStr);</span><br><span class="line">            <span class="type">KeyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_RSA);</span><br><span class="line">            <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> factory.generatePrivate(keySpec);</span><br><span class="line">            <span class="comment">// 对数据解密</span></span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(factory.getAlgorithm());</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line">            <span class="type">int</span> <span class="variable">inputLen</span> <span class="operator">=</span> data.length;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">offSet</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] cache;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 对数据分段解密</span></span><br><span class="line">            <span class="keyword">while</span> (inputLen - offSet &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (inputLen - offSet &gt; MAX_DECRYPT_BLOCK) &#123;</span><br><span class="line">                    cache = cipher.doFinal(data, offSet, MAX_DECRYPT_BLOCK);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cache = cipher.doFinal(data, offSet, inputLen - offSet);</span><br><span class="line">                &#125;</span><br><span class="line">                out.write(cache, <span class="number">0</span>, cache.length);</span><br><span class="line">                i++;</span><br><span class="line">                offSet = i * MAX_DECRYPT_BLOCK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[] decryptedData = out.toByteArray();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="comment">// 返回UTF-8编码的解密信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(decryptedData, StandardCharsets.UTF_8);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥加密  如果大于245则分段加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encryptByPrivate</span><span class="params">(String encryptingStr, String privateKeyStr)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] privateKeyBytes = Base64.decodeBase64(privateKeyStr);</span><br><span class="line">            <span class="comment">// 获得私钥</span></span><br><span class="line">            <span class="type">PKCS8EncodedKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(privateKeyBytes);</span><br><span class="line">            <span class="comment">// 取得待加密数据</span></span><br><span class="line">            <span class="type">byte</span>[] data = encryptingStr.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">            <span class="type">KeyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_RSA);</span><br><span class="line">            <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> factory.generatePrivate(keySpec);</span><br><span class="line">            <span class="comment">// 对数据加密</span></span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(factory.getAlgorithm());</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, privateKey);</span><br><span class="line">            <span class="type">int</span> <span class="variable">inputLen</span> <span class="operator">=</span> data.length;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">offSet</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] cache;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 对数据分段加密</span></span><br><span class="line">            <span class="keyword">while</span> (inputLen - offSet &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (inputLen - offSet &gt; MAX_ENCRYPT_BLOCK) &#123;</span><br><span class="line">                    cache = cipher.doFinal(data, offSet, MAX_ENCRYPT_BLOCK);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cache = cipher.doFinal(data, offSet, inputLen - offSet);</span><br><span class="line">                &#125;</span><br><span class="line">                out.write(cache, <span class="number">0</span>, cache.length);</span><br><span class="line">                i++;</span><br><span class="line">                offSet = i * MAX_ENCRYPT_BLOCK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[] encryptedData = out.toByteArray();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="comment">// 返回加密后由Base64编码的加密信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encodeBase64(encryptedData));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥解密 如果大于256则分段解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decryptByPublic</span><span class="params">(String encryptedStr, String publicKeyStr)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 对公钥解密</span></span><br><span class="line">            <span class="type">byte</span>[] publicKeyBytes = Base64.decodeBase64(publicKeyStr);</span><br><span class="line">            <span class="comment">// 取得公钥</span></span><br><span class="line">            <span class="type">X509EncodedKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(publicKeyBytes);</span><br><span class="line">            <span class="comment">// 取得待加密数据</span></span><br><span class="line">            <span class="type">byte</span>[] data = Base64.decodeBase64(encryptedStr);</span><br><span class="line">            <span class="type">KeyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_RSA);</span><br><span class="line">            <span class="type">PublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> factory.generatePublic(keySpec);</span><br><span class="line">            <span class="comment">// 对数据解密</span></span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(factory.getAlgorithm());</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, publicKey);</span><br><span class="line">            <span class="type">int</span> <span class="variable">inputLen</span> <span class="operator">=</span> data.length;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">offSet</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] cache;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 对数据分段解密</span></span><br><span class="line">            <span class="keyword">while</span> (inputLen - offSet &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (inputLen - offSet &gt; MAX_DECRYPT_BLOCK) &#123;</span><br><span class="line">                    cache = cipher.doFinal(data, offSet, MAX_DECRYPT_BLOCK);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cache = cipher.doFinal(data, offSet, inputLen - offSet);</span><br><span class="line">                &#125;</span><br><span class="line">                out.write(cache, <span class="number">0</span>, cache.length);</span><br><span class="line">                i++;</span><br><span class="line">                offSet = i * MAX_DECRYPT_BLOCK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[] decryptedData = out.toByteArray();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="comment">// 返回UTF-8编码的解密信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(decryptedData, StandardCharsets.UTF_8);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用私钥对加密数据进行签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sign</span><span class="params">(String encryptedStr, String privateKey)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将私钥加密数据字符串转换为字节数组</span></span><br><span class="line">            <span class="type">byte</span>[] data = encryptedStr.getBytes();</span><br><span class="line">            <span class="comment">// 解密由base64编码的私钥</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = Base64.decodeBase64(privateKey);</span><br><span class="line">            <span class="comment">// 构造PKCS8EncodedKeySpec对象</span></span><br><span class="line">            <span class="type">PKCS8EncodedKeySpec</span> <span class="variable">pkcs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(bytes);</span><br><span class="line">            <span class="comment">// 指定的加密算法</span></span><br><span class="line">            <span class="type">KeyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_RSA);</span><br><span class="line">            <span class="comment">// 取私钥对象</span></span><br><span class="line">            <span class="type">PrivateKey</span> <span class="variable">key</span> <span class="operator">=</span> factory.generatePrivate(pkcs);</span><br><span class="line">            <span class="comment">// 用私钥对信息生成数字签名</span></span><br><span class="line">            <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> Signature.getInstance(KEY_RSA_SIGNATURE);</span><br><span class="line">            signature.initSign(key);</span><br><span class="line">            signature.update(data);</span><br><span class="line">            str = <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encodeBase64(signature.sign()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验数字签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 校验成功返回true，失败返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String encryptedStr, String publicKey, String sign)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将私钥加密数据字符串转换为字节数组</span></span><br><span class="line">            <span class="type">byte</span>[] data = encryptedStr.getBytes();</span><br><span class="line">            <span class="comment">// 解密由base64编码的公钥</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = Base64.decodeBase64(publicKey);</span><br><span class="line">            <span class="comment">// 构造X509EncodedKeySpec对象</span></span><br><span class="line">            <span class="type">X509EncodedKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(bytes);</span><br><span class="line">            <span class="comment">// 指定的加密算法</span></span><br><span class="line">            <span class="type">KeyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_RSA);</span><br><span class="line">            <span class="comment">// 取公钥对象</span></span><br><span class="line">            <span class="type">PublicKey</span> <span class="variable">key</span> <span class="operator">=</span> factory.generatePublic(keySpec);</span><br><span class="line">            <span class="comment">// 用公钥验证数字签名</span></span><br><span class="line">            <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> Signature.getInstance(KEY_RSA_SIGNATURE);</span><br><span class="line">            signature.initVerify(key);</span><br><span class="line">            signature.update(data);</span><br><span class="line">            flag = signature.verify(Base64.decodeBase64(sign));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能描述:格式化公私钥 C++格式</span></span><br><span class="line"><span class="comment">     * 公钥字符串开头要加上“-----BEGIN PUBLIC KEY-----\n”，结尾加上“\n-----END PUBLIC KEY-----\n”</span></span><br><span class="line"><span class="comment">     * 私钥字符串开头要加上“-----BEGIN RSA PRIVATE KEY-----\n”，结尾加上“\n-----END RSA PRIVATE KEY-----\n”</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str  要格式的字符串, flag</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> flag true为公 false为私</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> xiaobu</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/3/18 16:40</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">formatStr</span><span class="params">(String str, <span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(str);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = sb.length(); i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">64</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                sb.insert(i, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            sb = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;-----BEGIN PUBLIC KEY-----&quot;</span>).append(sb).append(<span class="string">&quot;\n-----END PUBLIC KEY-----\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sb = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;-----BEGIN RSA PRIVATE KEY-----&quot;</span>).append(sb).append(<span class="string">&quot;\n-----END RSA PRIVATE KEY-----\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 生成 RSA 密钥</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;(<span class="number">2</span>);</span><br><span class="line">        map = RSAUtils.init();</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用密钥进行认证</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">publicKey</span> <span class="operator">=</span> RSAUtils.KEY_RSA_PUBLICKEY;</span><br><span class="line">        <span class="type">String</span> <span class="variable">privateKey</span> <span class="operator">=</span> RSAUtils.KEY_RSA_PRIVATEKEY;</span><br><span class="line">        System.out.println(<span class="string">&quot;publicKey = &quot;</span> + publicKey);</span><br><span class="line">        System.out.println(<span class="string">&quot;privateKey = &quot;</span> + privateKey);</span><br><span class="line">        System.out.println(<span class="string">&quot;formatStr(publicKey,false) = &quot;</span> + formatStr(publicKey, <span class="literal">true</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;formatStr(privateKey,false) = &quot;</span> + formatStr(privateKey, <span class="literal">false</span>));</span><br><span class="line">        <span class="comment">//由前四行代码获得公、私密钥</span></span><br><span class="line"><span class="comment">//        publicKey = &quot;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjVgHojy7oZ1Gl/iT9CXgvzlqPyV5wxvSRW7f6qDQh1FreYVTIbyVOees9LDbyFyocLCx6Cz3E4csHJvjwIem6SuZpIpmeJGS5bo04JVK2JwdqbFoIXd1Q5bGsA17nUNlnSR4h3ODM8OCKsC0Qpt1KSvN0WB2JUGBbUFwiPxrwEMLeYntz4cABBA/KYt5Ac9HBk5TDRDpFVlOM43t0B2219GxQOxm1x8fFjwzKV06nwYbmIuqoKqQVlym3FYrYiOdd0/iXXxp4Whi0Hdo7XyfaQhoCCd3FNnFP8Ng0HDAW99HxEaP9eIuC4wCV16o8jsUzm7V/yhTF1NlIPlTQW35hQIDAQAB&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;1 InnoDB 支持表锁和行锁，使用索引作为检索条件修改数据时采用行锁，否则采用表锁。\n&quot;</span> + <span class="string">&quot;2 InnoDB 自动给修改操作加锁，给查询操作不自动加锁&quot;</span> + <span class="string">&quot;3 行锁可能因为未使用索引而升级为表锁，所以除了检查索引是否创建的同时，也需要通过explain执行计划查询索引是否被实际使用。, RSA!&quot;</span>;</span><br><span class="line">        <span class="comment">// 公钥加密，私钥解密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">enStr1</span> <span class="operator">=</span> RSAUtils.encryptByPublic(str, publicKey);</span><br><span class="line">        System.out.println(<span class="string">&quot;公钥加密后：&quot;</span> + enStr1);</span><br><span class="line">        <span class="type">String</span> <span class="variable">deStr1</span> <span class="operator">=</span> RSAUtils.decryptByPrivate(enStr1, privateKey);</span><br><span class="line">        System.out.println(<span class="string">&quot;私钥解密后：&quot;</span> + deStr1);</span><br><span class="line">        <span class="comment">// 私钥加密，公钥解密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">enStr2</span> <span class="operator">=</span> RSAUtils.encryptByPrivate(str, privateKey);</span><br><span class="line">        System.out.println(<span class="string">&quot;私钥加密后：&quot;</span> + enStr2);</span><br><span class="line">        <span class="type">String</span> <span class="variable">deStr2</span> <span class="operator">=</span> RSAUtils.decryptByPublic(enStr2, publicKey);</span><br><span class="line">        System.out.println(<span class="string">&quot;公钥解密后：&quot;</span> + deStr2);</span><br><span class="line">        <span class="comment">// 产生签名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> sign(enStr2, privateKey);</span><br><span class="line">        System.out.println(<span class="string">&quot;签名:&quot;</span> + sign);</span><br><span class="line">        <span class="comment">// 验证签名</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">status</span> <span class="operator">=</span> verify(enStr2, publicKey, sign);</span><br><span class="line">        System.out.println(<span class="string">&quot;状态:&quot;</span> + status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="RSA工具类2"><a href="#RSA工具类2" class="headerlink" title="RSA工具类2"></a>RSA工具类2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.bilibili.service.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPublicKey;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RSA加密</span></span><br><span class="line"><span class="comment"> * 非对称加密，有公钥和私钥之分，公钥用于数据加密，私钥用于数据解密。加密结果可逆</span></span><br><span class="line"><span class="comment"> * 公钥一般提供给外部进行使用，私钥需要放置在服务器端保证安全性。</span></span><br><span class="line"><span class="comment"> * 特点：加密安全性很高，但是加密速度较慢</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RSAUtil</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PUBLIC_KEY</span> <span class="operator">=</span> <span class="string">&quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCQk33iNdA8Iey7J6XrBsidqn6u8EDLWPHsfEUgLQ3qiTikhPKDTzZkpAfU/O0x6NvSKa7Dp0+uqWT3vnW1De0+3u8mCYdVfOdH94VG4xg5U5UrRJei8HhPiXuvKQ+6NBtebCCW5adZ4pBgOiU14cJLhVmm+dYiLo3IDD5LqrlomQIDAQAB&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PRIVATE_KEY</span> <span class="operator">=</span> <span class="string">&quot;MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAJCTfeI10Dwh7LsnpesGyJ2qfq7wQMtY8ex8RSAtDeqJOKSE8oNPNmSkB9T87THo29IprsOnT66pZPe+dbUN7T7e7yYJh1V850f3hUbjGDlTlStEl6LweE+Je68pD7o0G15sIJblp1nikGA6JTXhwkuFWab51iIujcgMPkuquWiZAgMBAAECgYA1UT9mciQWWQh9yNRmhXzssFjB2TZ8B5RIe1fe0t7D9NEf0yvAgzDzEo8U3CX5dv/CVL7vxr8bEbt7phCwsa8hJiLEOr7hLZaJzXVTbvfqb91oCZGNkqDQ3NJfGBMVgUmltEYF2Bbk3U0NDyat+Gu54tRd2OH+adJYKsD0XYeDBQJBAN5FE8E04A4FA1q8mQbVTSVJDYIEJwOrdC0r3iZ7za5CyXGk+br8pFalRePFaksRGdN32+mYhDKVNrNHspAObVMCQQCmhBsD+xiWrmpnrzeIfCW1cX8qRC3/RMkq0ACw3l6YedNFdN2Tb5WsRHmcbCI9y8mfLHiG/X1R+zHZKG67EKjjAkAmvAkGSY2mQ89i160fWLq5/bIh71FRPWbgnF15fWfJr4/lgyeWI4MMKn80g2nTrSZACQpE+jRHkGNY+OywWCNLAkEAli5nvztkfeJpDYK2b16pE/B9ZL2BTs3XMcnQFbU5VAPsTKSOgz8MmwZXOIE+kMWP3wPY4McXlC0eVGFnHUh1SQJAeAl3RPk+XbZDMYfPkStRJwocG9Ap+88mwTgR1I7uPzZ1aM84/WsQskiVMXv2SZLmMWvYtnhIKosL6IACp2AcDA==&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> RSAUtil.encrypt(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getPublicKeyStr</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> PUBLIC_KEY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> RSAPublicKey <span class="title function_">getPublicKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">byte</span>[] decoded = Base64.decodeBase64(PUBLIC_KEY);</span><br><span class="line"><span class="keyword">return</span> (RSAPublicKey) KeyFactory.getInstance(<span class="string">&quot;RSA&quot;</span>)</span><br><span class="line">.generatePublic(<span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(decoded));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> RSAPrivateKey <span class="title function_">getPrivateKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">byte</span>[] decoded = Base64.decodeBase64(PRIVATE_KEY);</span><br><span class="line"><span class="keyword">return</span> (RSAPrivateKey) KeyFactory.getInstance(<span class="string">&quot;RSA&quot;</span>)</span><br><span class="line">.generatePrivate(<span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(decoded));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> RSAKey <span class="title function_">generateKeyPair</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line"><span class="type">KeyPairGenerator</span> <span class="variable">keyPairGen</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">keyPairGen.initialize(<span class="number">1024</span>, <span class="keyword">new</span> <span class="title class_">SecureRandom</span>());</span><br><span class="line"><span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGen.generateKeyPair();</span><br><span class="line"><span class="type">RSAPrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> (RSAPrivateKey) keyPair.getPrivate();</span><br><span class="line"><span class="type">RSAPublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> (RSAPublicKey) keyPair.getPublic();</span><br><span class="line"><span class="type">String</span> <span class="variable">publicKeyString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encodeBase64(publicKey.getEncoded()));</span><br><span class="line"><span class="type">String</span> <span class="variable">privateKeyString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encodeBase64(privateKey.getEncoded()));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RSAKey</span>(privateKey, privateKeyString, publicKey, publicKeyString);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(String source)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">byte</span>[] decoded = Base64.decodeBase64(PUBLIC_KEY);</span><br><span class="line"><span class="type">RSAPublicKey</span> <span class="variable">rsaPublicKey</span> <span class="operator">=</span> (RSAPublicKey) KeyFactory.getInstance(<span class="string">&quot;RSA&quot;</span>)</span><br><span class="line">.generatePublic(<span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(decoded));</span><br><span class="line"><span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">cipher.init(<span class="number">1</span>, rsaPublicKey);</span><br><span class="line"><span class="keyword">return</span> Base64.encodeBase64String(cipher.doFinal(source.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Cipher <span class="title function_">getCipher</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">byte</span>[] decoded = Base64.decodeBase64(PRIVATE_KEY);</span><br><span class="line"><span class="type">RSAPrivateKey</span> <span class="variable">rsaPrivateKey</span> <span class="operator">=</span> (RSAPrivateKey) KeyFactory.getInstance(<span class="string">&quot;RSA&quot;</span>)</span><br><span class="line">.generatePrivate(<span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(decoded));</span><br><span class="line"><span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">cipher.init(<span class="number">2</span>, rsaPrivateKey);</span><br><span class="line"><span class="keyword">return</span> cipher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decrypt</span><span class="params">(String text)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> getCipher();</span><br><span class="line"><span class="type">byte</span>[] inputByte = Base64.decodeBase64(text.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(cipher.doFinal(inputByte));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RSAKey</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> RSAPrivateKey privateKey;</span><br><span class="line">  <span class="keyword">private</span> String privateKeyString;</span><br><span class="line">  <span class="keyword">private</span> RSAPublicKey publicKey;</span><br><span class="line">  <span class="keyword">public</span> String publicKeyString;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">RSAKey</span><span class="params">(RSAPrivateKey privateKey, String privateKeyString, RSAPublicKey publicKey, String publicKeyString)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.privateKey = privateKey;</span><br><span class="line">    <span class="built_in">this</span>.privateKeyString = privateKeyString;</span><br><span class="line">    <span class="built_in">this</span>.publicKey = publicKey;</span><br><span class="line">    <span class="built_in">this</span>.publicKeyString = publicKeyString;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> RSAPrivateKey <span class="title function_">getPrivateKey</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.privateKey;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrivateKey</span><span class="params">(RSAPrivateKey privateKey)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.privateKey = privateKey;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getPrivateKeyString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.privateKeyString;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrivateKeyString</span><span class="params">(String privateKeyString)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.privateKeyString = privateKeyString;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> RSAPublicKey <span class="title function_">getPublicKey</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.publicKey;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPublicKey</span><span class="params">(RSAPublicKey publicKey)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.publicKey = publicKey;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getPublicKeyString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.publicKeyString;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPublicKeyString</span><span class="params">(String publicKeyString)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.publicKeyString = publicKeyString;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JWT-工具类"><a href="#JWT-工具类" class="headerlink" title="JWT 工具类"></a>JWT 工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lzscxb.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lzscxb.entity.exception.ConditionException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.SignatureVerificationException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.TokenExpiredException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.Claim;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ISSUER</span> <span class="operator">=</span> <span class="string">&quot;lzscxb.cn&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">EXPIRE</span> <span class="operator">=</span><span class="number">30</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(Long userId, String phone, String avatar, String nickname)</span> &#123;</span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            algorithm = Algorithm.RSA256(RSAUtils.getPublicKey(), RSAUtils.getPrivateKey());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance(); <span class="comment">// 日历类用于生成过期时间</span></span><br><span class="line">        calendar.setTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        calendar.add(Calendar.SECOND, EXPIRE);</span><br><span class="line">        <span class="keyword">return</span> JWT.create().withKeyId(String.valueOf(userId)).withIssuer(ISSUER).withExpiresAt(calendar.getTime()).withClaim(<span class="string">&quot;user_id&quot;</span>, userId).withClaim(<span class="string">&quot;phone&quot;</span>, phone).withClaim(<span class="string">&quot;avatar&quot;</span>, avatar).withClaim(<span class="string">&quot;nickname&quot;</span>, nickname).sign(algorithm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Claim&gt; <span class="title function_">VerifyToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.RSA256(RSAUtils.getPublicKey(), RSAUtils.getPrivateKey());</span><br><span class="line">            <span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(algorithm).build();</span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> verifier.verify(token);</span><br><span class="line">            Map&lt;String, Claim&gt; claims = jwt.getClaims();</span><br><span class="line">            <span class="keyword">return</span> claims;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConditionException</span>(<span class="number">401</span>, <span class="string">&quot;token 令牌已过期&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.info(token);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConditionException</span>(<span class="number">401</span>, <span class="string">&quot;token 令牌无效&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch7 安装与使用</title>
      <link href="/posts/450737420.html"/>
      <url>/posts/450737420.html</url>
      
        <content type="html"><![CDATA[<h1 id="Elasticsearch-单机安装"><a href="#Elasticsearch-单机安装" class="headerlink" title="Elasticsearch 单机安装"></a>Elasticsearch 单机安装</h1><h2 id="下载-Elasticsearch"><a href="#下载-Elasticsearch" class="headerlink" title="下载 Elasticsearch"></a>下载 Elasticsearch</h2><blockquote><p>Elasticsearch 版本 7.17.4<br>下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-17-4">https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-17-4</a></p></blockquote><p>网速不好可以先下载在上传至服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.17.4-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zvxf elasticsearch-7.17.4-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="配置-Elasticsearch"><a href="#配置-Elasticsearch" class="headerlink" title="配置 Elasticsearch"></a>配置 Elasticsearch</h2><h3 id="elasticsearch-yml"><a href="#elasticsearch-yml" class="headerlink" title="elasticsearch.yml"></a>elasticsearch.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">vim</span> <span class="string">config/elasticsearch.yml</span></span><br><span class="line"></span><br><span class="line"><span class="string">+</span> <span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><ul><li>discovery.seed_hosts: 集群主机列表</li><li>discovery.seed_providers: 基于配置文件配置集群主机列表</li><li>cluster.initial_master_nodes: 启动时初始化的参与选主的node，生产环境必填</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># node.name: node-1</span></span><br><span class="line"><span class="string">+</span> <span class="attr">node.name:</span> <span class="string">node-1</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="comment">#discovery.seed_hosts: [&quot;host1&quot;, &quot;host2&quot;]</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> [<span class="string">&quot;node-1&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="comment">#cluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;]</span></span><br><span class="line"><span class="string">+</span> <span class="attr">cluster.initial_master_nodes:</span> [<span class="string">&quot;node-1&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="vm-max-map-count"><a href="#vm-max-map-count" class="headerlink" title="vm.max_map_count"></a>vm.max_map_count</h3><p>查看当前最大描述符大小系统环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -a | grep vm.max_map_count</span><br></pre></td></tr></table></figure><p>修改最大描述符大小</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line">+ vm.max_map_count=262144</span><br></pre></td></tr></table></figure><p>修改后需要重启才能生效</p><p>不想重启可以设置临时生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure><h3 id="JVM-分配大小"><a href="#JVM-分配大小" class="headerlink" title="JVM 分配大小"></a>JVM 分配大小</h3><p>根据自己的内存自行调整，内存不够则会启动失败</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim config/jvm.options</span><br><span class="line"></span><br><span class="line">- ## -Xms4g</span><br><span class="line">- ## -Xmx4g</span><br><span class="line">+ -Xms512m</span><br><span class="line">+ -Xmx512m</span><br></pre></td></tr></table></figure><h3 id="最大描述符和最大线程数"><a href="#最大描述符和最大线程数" class="headerlink" title="最大描述符和最大线程数"></a>最大描述符和最大线程数</h3><p>修改后需要重新登录生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加以下内容</span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft nproc 4096</span><br><span class="line">* hard nproc 4096</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ulimit -Hn</span><br><span class="line">65536</span><br></pre></td></tr></table></figure><h2 id="启动-Elasticsearch"><a href="#启动-Elasticsearch" class="headerlink" title="启动 Elasticsearch"></a>启动 Elasticsearch</h2><p>** 不能以 root 用户启动 **</p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd lzscxb</span><br><span class="line">passwd lzscxb</span><br></pre></td></tr></table></figure><p>增加管理员权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers</span><br><span class="line"></span><br><span class="line">+ lzscxb  ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure><p>修改 Elasticsearch 权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R lzscxb:lzscxb elasticsearch-7.17.4</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换用户</span></span><br><span class="line">su lzscxb</span><br></pre></td></tr></table></figure><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">bin/elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台启动</span></span><br><span class="line"><span class="string">bin/elasticsearch</span> <span class="string">-d</span></span><br></pre></td></tr></table></figure><p>启动成功后 http://[ip]:9200 访问</p><p>访问失败请关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220702150121318.png" alt="image-20220702150121318"></p><h1 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h1><h2 id="elasticsearch-analysis-ik-分词器"><a href="#elasticsearch-analysis-ik-分词器" class="headerlink" title="elasticsearch-analysis-ik 分词器"></a>elasticsearch-analysis-ik 分词器</h2><blockquote><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.17.4">https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.17.4</a></p></blockquote><p>下载安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/Software/es/elasticsearch-7.17.4/plugins</span><br><span class="line">wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.17.4/elasticsearch-analysis-ik-7.17.4.zip</span><br><span class="line"></span><br><span class="line">unzip -d ik elasticsearch-analysis-ik-7.17.4.zip</span><br><span class="line"></span><br><span class="line">rm elasticsearch-analysis-ik-7.17.4.zip</span><br></pre></td></tr></table></figure><h2 id="elasticsearch-analysis-pinyin-拼音分词器"><a href="#elasticsearch-analysis-pinyin-拼音分词器" class="headerlink" title="elasticsearch-analysis-pinyin 拼音分词器"></a>elasticsearch-analysis-pinyin 拼音分词器</h2><blockquote><p><a href="https://github.com/medcl/elasticsearch-analysis-pinyin/releases/tag/v7.17.4">https://github.com/medcl/elasticsearch-analysis-pinyin/releases/tag/v7.17.4</a></p></blockquote><p>下载安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/Software/es/elasticsearch-7.17.4/plugins</span><br><span class="line">wget https://github.com/medcl/elasticsearch-analysis-pinyin/releases/download/v7.17.4/elasticsearch-analysis-pinyin-7.17.4.zip</span><br><span class="line"></span><br><span class="line">unzip -d pinyin elasticsearch-analysis-pinyin-7.17.4.zip</span><br><span class="line"></span><br><span class="line">rm elasticsearch-analysis-pinyin-7.17.4.zip</span><br></pre></td></tr></table></figure><p>启动 es7，查看启动日志文件</p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220702190122203.png" alt="image-20220702190122203"></p><h1 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h1><h2 id="安装-Libana"><a href="#安装-Libana" class="headerlink" title="安装 Libana"></a>安装 Libana</h2><blockquote><p>kibana 版本 7.17.4<br>下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases/kibana-7-17-4">https://www.elastic.co/cn/downloads/past-releases/kibana-7-17-4</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-7.17.4-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zvxf kibana-7.17.4-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">mv kibana-7.17.4-linux-x86_64.tar.gz kibana-7.17.4</span><br></pre></td></tr></table></figure><h2 id="配置-Kibana"><a href="#配置-Kibana" class="headerlink" title="配置 Kibana"></a>配置 Kibana</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim config/kibana.yml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server.port: 5601</span><br><span class="line">server.host: &quot;0.0.0.0&quot;</span><br><span class="line">elasticsearch.hosts: [&quot;http://localhost:9200&quot;]</span><br></pre></td></tr></table></figure><h2 id="启动-Kibana"><a href="#启动-Kibana" class="headerlink" title="启动 Kibana"></a>启动 Kibana</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup bin/kibana &gt; logs/kibana-start.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220702195617909.png" alt="image-20220702195617909"></p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220702195906213.png" alt="image-20220702195906213"></p><h2 id="节点监控"><a href="#节点监控" class="headerlink" title="节点监控"></a>节点监控</h2><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220702201323887.png" alt="image-20220702201323887"></p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220702201251621.png" alt="image-20220702201251621"></p><h2 id="测试分词器"><a href="#测试分词器" class="headerlink" title="测试分词器"></a>测试分词器</h2><p>Management -&gt; Dev Tools</p><h3 id="普通分词"><a href="#普通分词" class="headerlink" title="普通分词"></a>普通分词</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;simple&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我是一个程序员，嘿嘿嘿！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220702202029145.png" alt="image-20220702202029145"></p><h3 id="ik-分词"><a href="#ik-分词" class="headerlink" title="ik 分词"></a>ik 分词</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我是一个程序员，嘿嘿嘿！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="pinyin-分词"><a href="#pinyin-分词" class="headerlink" title="pinyin 分词"></a>pinyin 分词</h3><ol><li>使用自定义拼音分析器创建索引</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT /medcl/ </span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;analysis&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;analyzer&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;pinyin_analyzer&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;tokenizer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;my_pinyin&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tokenizer&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;my_pinyin&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;keep_separate_first_letter&quot;</span> <span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;keep_full_pinyin&quot;</span> <span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;keep_original&quot;</span> <span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;limit_first_letter_length&quot;</span> <span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;lowercase&quot;</span> <span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;remove_duplicated_term&quot;</span> <span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>查询</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /medcl/_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;刘德华&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin_analyzer&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220702210610533.png" alt="image-20220702210610533"></p><h1 id="Elasticsearch-集群"><a href="#Elasticsearch-集群" class="headerlink" title="Elasticsearch 集群"></a>Elasticsearch 集群</h1><p>克隆三台虚拟机，并配置ip，删除 ./data 数据目录</p><p>修改<code>elasticsearch.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: kkb-es</span><br><span class="line">node.name: node-0  </span><br><span class="line">node.master: true</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">transport.tcp.port: 9300 # tcp 端口</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.147.66:9300&quot;,&quot;192.168.147.67:9300&quot;,&quot;192.168.147.68:9300&quot;]</span><br><span class="line">discovery.zen.minimum_master_nodes: 2</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Distributed </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux 使用 VirtualBox NAT + Host-Only双网卡</title>
      <link href="/posts/2045486310.html"/>
      <url>/posts/2045486310.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>中文文档 ： <a href="https://wiki.archlinux.org/title/VirtualBox_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/title/VirtualBox_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p></blockquote><h1 id="安装-Virtualbox"><a href="#安装-Virtualbox" class="headerlink" title="安装 Virtualbox"></a>安装 Virtualbox</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S virtualbox</span><br></pre></td></tr></table></figure><p>注意：根据提示选择对应的 <code>virtualbox-host-modules</code>软件包</p><h1 id="加载-VirtualBox-内核模块"><a href="#加载-VirtualBox-内核模块" class="headerlink" title="加载 VirtualBox 内核模块"></a>加载 VirtualBox 内核模块</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo modprobe vboxdrv vboxnetadp vboxnetflt</span><br></pre></td></tr></table></figure><p><code>vboxnetadp</code> 和 <code>vboxnetflt</code>：这两个模块在使用桥接网络和host-only 网络功能时，都是需要的。具体来说，vboxnetadp 模块用于在 VirtualBox 全局配置里为主体机创建虚拟网卡；vboxnetflt 模块会在使用了该功能的客体机启动时起作用。</p><h1 id="VirtualBox支持的多种网络"><a href="#VirtualBox支持的多种网络" class="headerlink" title="VirtualBox支持的多种网络"></a>VirtualBox支持的多种网络</h1><p>网络地址转换（NAT）：</p><p>1、虚拟机可以上网。</p><p>2、默认情况下，主机无法连接虚拟机。</p><p>3、虚拟机与虚拟机不能相互连接，使用此网络模式的虚拟机，VirtualBox会给每个虚拟机单独创建一个NAT设备，虚拟机与虚拟机是无法相互连接的。</p><p>桥接网卡：</p><p>1、虚拟机可以上网。</p><p>2、主机能连接虚拟机，虚拟机也可以连接主机。</p><p>3、虚拟机与虚拟机能相互连接。</p><p>仅主机（Host-Only）网络：</p><p>1、虚拟机不能上网。</p><p>2、主机能连接虚拟机，虚拟机也可以连接主机。</p><p>3、虚拟机与虚拟机能相互连接。</p><p>NAT 网络：</p><p>1、虚拟机可以上网。</p><p>2、默认情况下，主机无法连接虚拟机。</p><p>3、虚拟机与虚拟机能相互连接；</p><p>“网络地址转换（NAT）”与“NAT网络” 最大的不同点在于：“NAT网络”的虚拟机可以使用同一个全局NAT设备，所以虚拟机与虚拟机能相互连接；而使用 “网络地址转换（NAT）”网络，VirtualBox给每个虚拟机单独创建一个NAT设备，所以虚拟机与虚拟机无法相互连接。</p><p>通常可以使用“桥接网卡”这种网络，并将网卡配置为静态IP。主机与虚拟机都在一个网段，实现主机与虚拟机相互连接、虚拟机与虚拟机相互连接，虚拟机也能上网。</p><p>但是公司的网络通常不允许将电脑配置为静态IP，可使用“NAT网络”+“仅主机（Host-Only）网络”双网卡模式解决虚拟机使用静态IP、上网、相互连接的问题。</p><p>“NAT网络”的作用是：实现虚拟机上网，实现虚拟机与虚拟机相互连接，并且支持将网卡配置为静态IP（用于虚拟机之间连接，虚拟机重启后IP地址不变）。</p><p>“仅主机（Host-Only）网络”的作用是：实现主机与虚拟机相互连接，也支持将网卡配置为静态IP，虚拟机重启后IP地址不变。</p><h1 id="创建仅主机网卡"><a href="#创建仅主机网卡" class="headerlink" title="创建仅主机网卡"></a>创建仅主机网卡</h1><p>VirtualBox 6.1.28 对仅主机接口设置的地址施加了额外的控制，如果不是白名单修改则可能会出显以下错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Callee RC: </span><br><span class="line">E_ACCESSDENIED (0x80070005)</span><br></pre></td></tr></table></figure><p>如果是 Linux 用户且则需要添加 IP 白名单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF | sudo tee /etc/vbox/networks.conf                                                                                                                 </span><br><span class="line">* 192.0.0.0/8</span><br><span class="line">* 172.0.0.0/8</span><br><span class="line">* 10.0.0.0/8</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>点击“管理” —&gt; “主机网络管理器” </p><p><strong>修改 网卡 和 DHCP服务器地址</strong></p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220701160245487.png" alt="image-20220701160245487"></p><p>修改成功后在宿住机即可 <code>ip a</code> 查看网卡信息（必须有IP才算成功）</p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220701160432046.png" alt="image-20220701160432046"></p><h1 id="创建-NAT-网络"><a href="#创建-NAT-网络" class="headerlink" title="创建 NAT 网络"></a>创建 NAT 网络</h1><p>点击“管理” —&gt; “全局设定” —&gt; “网络” —&gt; “添加新NAT网络” 。这一步是新建一个全局的NAT设备，所有的虚拟机都可以使用此NAT设备。新NAT网络CIDR默认是10.0.2.0/24。</p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220701160934702.png" alt="image-20220701160934702"></p><h1 id="虚拟机配置双网卡"><a href="#虚拟机配置双网卡" class="headerlink" title="虚拟机配置双网卡"></a>虚拟机配置双网卡</h1><p>网卡一：NAT网络</p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220701161045781.png" alt="image-20220701161045781"></p><p>网卡二：仅主机（Host-Only）</p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220701161124662.png" alt="image-20220701161124662"></p><h1 id="修改虚拟机IP"><a href="#修改虚拟机IP" class="headerlink" title="修改虚拟机IP"></a>修改虚拟机IP</h1><p>enp0s3：为NAT网络</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">NAME=&quot;enp0s3&quot;</span><br><span class="line">DEVICE=&quot;enp0s3&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line"> </span><br><span class="line"># 第1步新建的NatNetwork01网络CIDR是10.0.2.0/24，所以网关填写10.0.2.1，子网掩码是255.255.255.0</span><br><span class="line">GATEWAY=10.0.2.1</span><br><span class="line">IPADDR=10.0.2.100</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>enp0s8：为仅主机网卡</p><p>修改为静态ip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-enp0s8</span><br><span class="line"></span><br><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">NAME=&quot;enp0s8&quot;</span><br><span class="line">DEVICE=&quot;enp0s8&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line"></span><br><span class="line"># 网关与子网掩码与 vboxnet0 相同</span><br><span class="line">GATEWAY=192.168.100.1</span><br><span class="line">IPADDR=192.168.100.66</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重启网卡</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220701162217726.png" alt="image-20220701162217726"></p>]]></content>
      
      
      <categories>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列 RabbitMQ 模式详解</title>
      <link href="/posts/1925779269.html"/>
      <url>/posts/1925779269.html</url>
      
        <content type="html"><![CDATA[<h1 id="下载-RabbitMQ-镜像"><a href="#下载-RabbitMQ-镜像" class="headerlink" title="下载 RabbitMQ 镜像"></a>下载 <code>RabbitMQ</code> 镜像</h1><blockquote><p>rabbitmq:3-management 默认安装并启用 rabbitmq_management</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:3.10-management </span><br></pre></td></tr></table></figure><h1 id="创建并运行-RabbitMQ-容器"><a href="#创建并运行-RabbitMQ-容器" class="headerlink" title="创建并运行 RabbitMQ 容器"></a>创建并运行 <code>RabbitMQ</code> 容器</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5672:5672 -p 15672:15672 \</span><br><span class="line">-e RABBITMQ_DEFAULT_USER=admin \</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=admin \</span><br><span class="line">--hostname myRabbit \</span><br><span class="line">--name rabbitmq \</span><br><span class="line">rabbitmq:3.10-management </span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-d：表示在后台运行容器；</li><li>-p：将容器的端口 5672（应用访问端口）和 15672 （控制台Web端口号）映射到主机中；<ul><li>5672：RabbitMQ 提供给编程语言客户端链接的端口</li><li>15672：RabbitMQ 管理界面的端口</li><li>25672：RabbitMQ 集群的端口</li></ul></li><li>-e：指定环境变量：<ul><li>RABBITMQ_DEFAULT_USER：默认的用户名；</li><li>RABBITMQ_DEFAULT_PASS：默认的用户密码；</li></ul></li><li>–hostname：指定主机名（RabbitMQ 的一个重要注意事项是它根据所谓的 节点名称 存储数据，默认为主机名）；</li><li>–name rabbitmq：设置容器名称；</li><li>rabbitmq:3.10-management ：容器使用的镜像名称；</li></ul><p><strong>查看启动情况：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  bin docker ps -l</span><br><span class="line">CONTAINER ID   IMAGE                      COMMAND                  CREATED              STATUS              PORTS                                                                                                                                                 NAMES</span><br><span class="line">21dec23292a9   rabbitmq:3.10-management   &quot;docker-entrypoint.s…&quot;   About a minute ago   Up About a minute   4369/tcp, 5671/tcp, 0.0.0.0:5672-&gt;5672/tcp, :::5672-&gt;5672/tcp, 15671/tcp, 15691-15692/tcp, 25672/tcp, 0.0.0.0:15672-&gt;15672/tcp, :::15672-&gt;15672/tcp   rabbitmq</span><br></pre></td></tr></table></figure><p>设置 <a href="https://so.csdn.net/so/search?q=docker&spm=1001.2101.3001.7020">docker</a> 启动的时候自动启动（<strong>可选</strong>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update rabbitmq --restart=always</span><br></pre></td></tr></table></figure><h1 id="访问-RabbitMQ-后台管理"><a href="#访问-RabbitMQ-后台管理" class="headerlink" title="访问 RabbitMQ 后台管理"></a>访问 <code>RabbitMQ</code> 后台管理</h1><ul><li><p>浏览器输入地址：<code>http://ip:15672</code> 即可访问后台管理页面，这里的 <code>ip</code> 为运行 RabbitMQ 所在的服务器的 IP 地址；</p></li><li><p>账号密码是你创建容器时指定的账号密码</p></li><li><p>如果访问失败，请尝试关闭防火墙</p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220612172434949.png" alt="image-20220612172434949"></p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220612172459818.png" alt="image-20220612172459818"></p></li></ul><h1 id="创建-RabbitMq-连接"><a href="#创建-RabbitMq-连接" class="headerlink" title="创建 RabbitMq 连接"></a>创建 RabbitMq 连接</h1><ol><li>创建虚拟主机目录</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConnectionUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 RabbitMq 连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;dev.lzscxb.cn&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/lzscxb&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>amqp://<a href="mailto:&#x61;&#x64;&#x6d;&#x69;&#x6e;&#x40;&#x31;&#x2e;&#49;&#52;&#46;&#x31;&#x36;&#x30;&#x2e;&#49;&#x37;&#x34;">&#x61;&#x64;&#x6d;&#x69;&#x6e;&#x40;&#x31;&#x2e;&#49;&#52;&#46;&#x31;&#x36;&#x30;&#x2e;&#49;&#x37;&#x34;</a>:5672//lzscxb</p><h1 id="RabbitMQ模式"><a href="#RabbitMQ模式" class="headerlink" title="RabbitMQ模式"></a>RabbitMQ模式</h1><h2 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a>简单模式</h2><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220612184805825.png" alt="image-20220612184805825"></p><h3 id="消息发送者"><a href="#消息发送者" class="headerlink" title="消息发送者"></a>消息发送者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;hello 你好&quot;</span>;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtils.getConnection();</span><br><span class="line">        <span class="comment">// 创建信道</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 声明队列</span></span><br><span class="line"><span class="comment">         * 参数1:队列的名称</span></span><br><span class="line"><span class="comment">         * 参数2:队列中的数据是否持久化</span></span><br><span class="line"><span class="comment">         * 参数了：是否排外（是否支持扩展，当前队列只能自己用，不能给别人用）</span></span><br><span class="line"><span class="comment">         * 参数4:是否自动删除（当队列的连接数为0时，队列会销毁，不管队列是否还存保存数据）</span></span><br><span class="line"><span class="comment">         * 参数5:队列参数（没有参数为nuLL)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;queue1&quot;</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 向指定队列发送消息</span></span><br><span class="line"><span class="comment">         * 参数1:交换机名称，当前是简单模式，也就是P2P模式，没有交换机，所以名称为&quot;&quot;</span></span><br><span class="line"><span class="comment">         * 参数2:目标队列的名称</span></span><br><span class="line"><span class="comment">         * 参数了：设置消息的属性（没有属性则为nuLL)</span></span><br><span class="line"><span class="comment">         * 参数4:消息的内容（只接收字节数组）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;queue1&quot;</span>, <span class="literal">null</span>, msg.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220612182622469.png" alt="image-20220612182622469"></p><h3 id="消息接收者"><a href="#消息接收者" class="headerlink" title="消息接收者"></a>消息接收者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;queue1&quot;</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>); <span class="comment">// 声明队列</span></span><br><span class="line">        <span class="comment">// 从信道中获取信息</span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> consumerTag</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> envelope</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> properties 协议</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> body 消息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;接收 = &quot;</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列 true 自动确认消息</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;queue1&quot;</span>,<span class="literal">true</span>,consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220612182656228.png" alt="image-20220612182656228"></p><h3 id="消息确认机制-ACK"><a href="#消息确认机制-ACK" class="headerlink" title="消息确认机制 ACK"></a>消息确认机制 ACK</h3><blockquote><p>通过刚才的案例可以看出，消息一旦被消费，消息就会立刻从队列中移除</p></blockquote><p>RabbitMQ如何得知消息被消费者接收？ </p><ul><li>如果消费者接收消息后，还没执行操作就抛异常宕机导致消费失败，但是RabbitMQ无从得 知，这样消息就丢失了</li><li> 因此，RabbitMQ有一个ACK机制，当消费者获取消息后，会向RabbitMQ发送回执ACK，告知消息已经被接收 </li><li>ACK：(Acknowledge character）即是确认字符，在数据通信中，接收站发给发送站的一种 传输类控制字符。表示发来的数据已确认接收无误我们在使用http请求时，http的状态码200 就是告诉我们服务器执行成功</li><li>整个过程就想快递员将包裹送到你手里，并且需要你的签字，并拍照回执</li><li>不过这种回执ACK分为两种情况：<ul><li><strong>自动ACK</strong>：消息接收后，消费者立刻自动发送ACK（快递放在快递柜） </li><li><strong>手动ACK</strong>：消息接收后，不会发送ACK，需要手动调用（快递必须本人签收） </li></ul></li><li>两种情况如何选择，需要看消息的重要性：<ul><li> 如果消息不太重要，丢失也没有影响，自动ACK会比较方便</li><li>如果消息非常重要，最好消费完成手动ACK，如果自动ACK消费后，RabbitMQ就会把 消息从队列中</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// false：手动消息确认</span></span><br><span class="line">channel.basicConsume(<span class="string">&quot;queue1&quot;</span>, <span class="literal">false</span>, consumer);</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 从信道中获取信息</span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> consumerTag</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> envelope</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> properties 协议</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> body 消息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;接收 = &quot;</span> + msg);</span><br><span class="line">                <span class="comment">// 手动确认（收件人信息，是否同时确认多个消息）</span></span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(),<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列 false手动确定消息</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;queue1&quot;</span>, <span class="literal">false</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="工作队列模式"><a href="#工作队列模式" class="headerlink" title="工作队列模式"></a>工作队列模式</h2><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220612184818887.png" alt="image-20220612184818887"></p><ul><li>之前我们学习的简单模式，一个消费者来处理消息，如果生产者生产消息过快过多，而消费者的能 力有限，就会产生消息在队列中堆积（生活中的滞销） </li><li>一个烧烤师傅，一次烤50支羊肉串，就一个人吃的话，烤好的肉串会越来越多，怎么处理？ </li><li>多招揽客人进行消费即可。当我们运行许多消费者程序时，消息队列中的任务会被众多消费者共 享，但其中某一个消息只会被一个消费者获取（100支肉串20个人吃，但是其中的某支肉串只能被 一个人吃）</li></ul><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p>如果有两个员工，当所有 奇怪的消息都很重，甚至消息都很轻时，一个员工会一直很忙，而另一个人几乎什么工作都 不做。好吧，RabbitMQ对此一无所知，它仍然会均匀地分派消息。 这是因为RabbitMQ只在消息进入队列时发送消息。它不查看用户未确认消息的数量。它 只是盲目地将每条第n个消息分派给第n个消费者。</p><p>为了克服这个问题，我们可以使用设置为prefetchCount = 1的basicQos方法。这告诉 RabbitMQ一次不要给一个worker发送一条以上的消息。或者，换句话说，在worker处理并 确认前一个消息之前，不要向它发送新消息。相反，它将把它分派到下一个不繁忙的 worker。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息接收者1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver2</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 统计吃掉羊肉串的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;work_queue&quot;</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 可以理解为快递一个一个送，送完在送下一个</span></span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 从信道中获取信息</span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> consumerTag</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> envelope</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> properties 协议</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> body 消息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.printf(<span class="string">&quot;【顾客2】吃掉 = %s!总共吃[%d]串 \n&quot;</span>, msg, ++i);</span><br><span class="line">                <span class="comment">// 模拟网络延迟</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">900</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 手动确认（收件人信息，是否同时确认多个消息）</span></span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 手动确定消息</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;work_queue&quot;</span>, <span class="literal">false</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>必须使用 ACK 确认消息才能生效</strong></p><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息发送者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtils.getConnection();</span><br><span class="line">        <span class="comment">// 创建信道</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建队列</span></span><br><span class="line"><span class="comment">         * 参数1:队列的名称</span></span><br><span class="line"><span class="comment">         * 参数2:队列中的数据是否持久化</span></span><br><span class="line"><span class="comment">         * 参数了：是否排外（是否支持扩展，当前队列只能自己用，不能给别人用）</span></span><br><span class="line"><span class="comment">         * 参数4:是否自动删除（当队列的连接数为0时，队列会销毁，不管队列是否还存保存数据）</span></span><br><span class="line"><span class="comment">         * 参数5:队列参数（没有参数为nuLL)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;work_queue&quot;</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 发送 100 条数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;羊肉串 --&gt; &quot;</span> + i;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 向指定队列发送消息</span></span><br><span class="line"><span class="comment">             * 参数1:交换机名称，当前是简单模式，也就是P2P模式，没有交换机，所以名称为&quot;&quot;</span></span><br><span class="line"><span class="comment">             * 参数2:目标队列的名称</span></span><br><span class="line"><span class="comment">             * 参数了：设置消息的属性（没有属性则为nuLL)</span></span><br><span class="line"><span class="comment">             * 参数4:消息的内容（只接收字节数组）</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;work_queue&quot;</span>, <span class="literal">null</span>, msg.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot;新鲜出炉：&quot;</span> + msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="订阅模式"><a href="#订阅模式" class="headerlink" title="订阅模式"></a>订阅模式</h2><blockquote><p>生活中的案例：就是玩抖音快手，众多粉丝关注一个视频主，视频主发布视频，所有粉丝都可以得到视 频通知 </p></blockquote><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220613093559688.png" alt="image-20220613093559688"></p><ul><li><p>上图中，X就是视频主，红色的队列就是粉丝。binding是绑定的意思（关注） </p></li><li><p>P生产者发送信息给X路由，X将信息转发给绑定X的队列 </p></li></ul><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220613093626635.png" alt="image-20220613093626635"></p><p>X队列将信息通过信道发送给消费者，从而进行消费 </p><p>整个过程，必须先创建路由</p><ul><li> 路由在生产者程序中创建 </li><li>因为路由没有存储消息的能力，当生产者将信息发送给路由后，消费者还没有运行，所以没 有队列，路由并不知道将信息发送给谁 </li></ul><p>运行程序的顺序： </p><p>​    1. MessageSender </p><ol start="2"><li><p>MessageReceiver1和MessageReceiver2 </p></li><li><p>MessageSender</p></li></ol><h3 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息发送者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtils.getConnection();</span><br><span class="line">        <span class="comment">// 创建信道</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明路由 (路由名，路由类型)</span></span><br><span class="line">        <span class="comment">// fanout:不处理路由键（只需要将队列绑定到路由上，发送到路由的消息都会被转发到与该路由绑定的所有队列上</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;exchange_fanout&quot;</span>, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Hello Java!&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 向指定队列发送消息</span></span><br><span class="line"><span class="comment">         * 参数1:交换机名称，当前是简单模式，也就是P2P模式，没有交换机，所以名称为&quot;&quot;</span></span><br><span class="line"><span class="comment">         * 参数2:目标队列的名称</span></span><br><span class="line"><span class="comment">         * 参数了：设置消息的属性（没有属性则为nuLL)</span></span><br><span class="line"><span class="comment">         * 参数4:消息的内容（只接收字节数组）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;exchange_fanout&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, msg.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;生产者：&quot;</span> + msg);</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息接收者1 (粉丝1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;test_exchange_fanout_queue_1&quot;</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 绑定队列（关注）</span></span><br><span class="line">        channel.queueBind(<span class="string">&quot;test_exchange_fanout_queue_1&quot;</span>, <span class="string">&quot;exchange_fanout&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 从信道中获取信息</span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> consumerTag</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> envelope</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> properties 协议</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> body 消息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.printf(<span class="string">&quot;【消费者1】 %s \n&quot;</span>, msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列 true 自动确认消息</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;test_exchange_fanout_queue_1&quot;</span>, <span class="literal">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h2><blockquote><p> 路由会根据类型进行定向分发消息给不同的队列，如图所示 </p><p>可以理解为是快递公司的分拣中心，整个小区，东面的楼小张送货，西面的楼小王送货</p></blockquote><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220613095800902.png" alt="image-20220613095800902"></p><h3 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sender</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明路由(路由名，路由类型)</span></span><br><span class="line">        <span class="comment">// direct：根据路由键进行定向分发消息</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;test_exchange_direct&quot;</span>, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;用户注册，【userid=S101】&quot;</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;test_exchange_direct&quot;</span>, <span class="string">&quot;insert&quot;</span>, <span class="literal">null</span>, msg.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;[用户系统]：&quot;</span> + msg);</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者1"><a href="#消费者1" class="headerlink" title="消费者1"></a>消费者1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;test_exchange_direct_queue_1&quot;</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 绑定路由（如果路由键的类型是 添加，删除，修改 的话，绑定到这个队列1上）</span></span><br><span class="line">        <span class="comment">//        2.3.4.3 消费者2</span></span><br><span class="line">        <span class="comment">//        1. 记住运行程序的顺序，先运行一次sender（创建路由器），</span></span><br><span class="line">        <span class="comment">//        2. 有了路由器之后，在创建两个Recer1和Recer2，进行队列绑定</span></span><br><span class="line">        <span class="comment">//        3. 再次运行sender，发出消息</span></span><br><span class="line">        <span class="comment">//        2.3.5 通配符模式</span></span><br><span class="line">        channel.queueBind(<span class="string">&quot;test_exchange_direct_queue_1&quot;</span>, <span class="string">&quot;test_exchange_direct&quot;</span>, <span class="string">&quot;insert&quot;</span>);</span><br><span class="line">        channel.queueBind(<span class="string">&quot;test_exchange_direct_queue_1&quot;</span>, <span class="string">&quot;test_exchange_direct&quot;</span>, <span class="string">&quot;update&quot;</span>);</span><br><span class="line">        channel.queueBind(<span class="string">&quot;test_exchange_direct_queue_1&quot;</span>, <span class="string">&quot;test_exchange_direct&quot;</span>, <span class="string">&quot;delete&quot;</span>);</span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;【消费者1】 = &quot;</span> + s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 4.监听队列 true:自动消息确认</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;test_exchange_direct_queue_1&quot;</span>, <span class="literal">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者2"><a href="#消费者2" class="headerlink" title="消费者2"></a>消费者2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息接收者2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;test_exchange_direct_queue_2&quot;</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 绑定路由（如果路由键的类型是 查询 的话，绑定到这个队列2上）</span></span><br><span class="line">        channel.queueBind(<span class="string">&quot;test_exchange_direct_queue_2&quot;</span>, <span class="string">&quot;test_exchange_direct&quot;</span>, <span class="string">&quot;select&quot;</span>);</span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;【消费者2】 = &quot;</span> + s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 4.监听队列 true:自动消息确认</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;test_exchange_direct_queue_2&quot;</span>, <span class="literal">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>记住运行程序的顺序，先运行一次sender（创建路由器）， </li><li>有了路由器之后，在创建两个Recer1和Recer2，进行队列绑定 </li><li>再次运行sender，发出消息</li></ol><h2 id="通配符模式-topic"><a href="#通配符模式-topic" class="headerlink" title="通配符模式 topic"></a>通配符模式 topic</h2><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220613100829225.png" alt="image-20220613100829225"></p><ul><li><p>和路由模式90%是一样的。 </p></li><li><p>唯独的区别就是路由键支持模糊匹配 </p></li><li><p>匹配符号 </p><ul><li>*：只能匹配一个词（正好一个词，多一个不行，少一个也不行） #：匹配0个或更多个词 看一下官网案例： Q1绑定了路由键 <em>.orange.</em> Q2绑定了路由键 <em>.</em>.rabbit 和 lazy.# </li></ul></li></ul><h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><ul><li>消息的可靠性是RabbitMQ的一大特色，那么RabbitMQ是如何避免消息丢失？ <ul><li>消费者的ACK确认机制，可以防止消费者丢失消息</li><li>万一在消费者消费之前，RabbitMQ服务器宕机了，那消息也会丢失 </li></ul></li><li>想要将消息持久化，那么 路由和队列都要持久化 才可以</li></ul><h2 id="生产者-3"><a href="#生产者-3" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sender</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明路由(路由名，路由类型，持久化)</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;test_exchange_topic&quot;</span>, <span class="string">&quot;topic&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;商品降价&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送消息(第三个参数作用是让消息持久化)</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;test_exchange_topic&quot;</span>, <span class="string">&quot;product.price&quot;</span>, MessageProperties.PERSISTENT_TEXT_PLAIN, msg.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;[用户系统]：&quot;</span> + msg);</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消费者-2"><a href="#消费者-2" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtils.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列( 第二个参数为true：支持持久化)</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;test_exchange_topic_queue_1&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        channel.queueBind(<span class="string">&quot;test_exchange_topic_queue_1&quot;</span>, <span class="string">&quot;test_exchange_topic&quot;</span>, <span class="string">&quot;user.#&quot;</span>);</span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;【消费者1】 = &quot;</span> + s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;test_exchange_topic_queue_1&quot;</span>, <span class="literal">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis Plus 自定义 SQL 无法执行</title>
      <link href="/posts/3142020633.html"/>
      <url>/posts/3142020633.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>问题描述：指在 XML 中里面自定义 SQL，却无法调用。本功能同 <code>MyBatis</code> 一样需要配置 XML 扫描路径：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): cn.lzscxb.mapper.EmployeeMapper.getByUsername</span><br><span class="line">at org.apache.ibatis.binding.MapperMethod$SqlCommand.&lt;init&gt;(MapperMethod.java:235) ~[mybatis-3.5.9.jar:3.5.9]</span><br><span class="line">at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.&lt;init&gt;(MybatisMapperMethod.java:50) ~[mybatis-plus-core-3.5.1.jar:3.5.1]</span><br><span class="line">at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.lambda$cachedInvoker$0(MybatisMapperProxy.java:111) ~[mybatis-plus-core-3.5.1.jar:3.5.1]</span><br><span class="line">at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1705) ~[na:na]</span><br><span class="line">at com.baomidou.mybatisplus.core.toolkit.CollectionUtils.computeIfAbsent(CollectionUtils.java:115) ~[mybatis-plus-core-3.5.1.jar:3.5.1]</span><br><span class="line">at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.cachedInvoker(MybatisMapperProxy.java:98) ~[mybatis-plus-core-3.5.1.jar:3.5.1]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Spring Boot 配置（参考<a href="https://gitee.com/baomidou/mybatisplus-spring-boot/blob/2.x/src/main/resources/application.yml">mybatisplus-spring-boot (opens new window)</a>）</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/cn/lzscxb/**/xml/*Mapper.x1ml</span></span><br></pre></td></tr></table></figure><ul><li><p>对于<code>IDEA</code>系列编辑器，XML 文件是不能放在 java 文件夹中的，IDEA 默认不会编译源码文件夹中的 XML 文件，可以参照以下方式解决：</p><p>方式一：将配置文件放在 resource 文件夹中</p><p>方式二：对于 Maven 项目，可指定 POM 文件的 resource</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>提示：注意！Maven 多模块项目的扫描路径需以 <code>classpath*:</code> 开头 （即加载多个 jar 包下的 XML 文件）</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux开启面部解锁功能</title>
      <link href="/posts/3352666994.html"/>
      <url>/posts/3352666994.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>github：<a href="https://github.com/boltgolt/howdy">https://github.com/boltgolt/howdy</a></p><p>archwiki： <a href="https://wiki.archlinux.org/title/Howdy_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/title/Howdy_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p></blockquote><h1 id="安装-Howdy"><a href="#安装-Howdy" class="headerlink" title="安装 Howdy"></a>安装 Howdy</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S howdy</span><br></pre></td></tr></table></figure><p> 修改 Howdy 目录权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R 755 /lib/security/howdy</span><br></pre></td></tr></table></figure><h1 id="添加红外传感器"><a href="#添加红外传感器" class="headerlink" title="添加红外传感器"></a>添加红外传感器</h1><p>可以在诸如 <a href="https://archlinux.org/packages/?name=cheese">cheese</a>、<a href="https://aur.archlinux.org/packages/fswebcam/">fswebcam</a>AUR 或者 <a href="https://archlinux.org/packages/?name=v4l-utils">v4l-utils</a> 的程序里找到并确定能连接到红外传感器的正确 <code>/dev/videoX</code> 文件，</p><p>以内置于 <a href="https://archlinux.org/packages/?name=v4l-utils">v4l-utils</a> 软件包的工具为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v4l2-ctl --list-devices</span></span><br><span class="line">Integrated_Webcam_HD: Integrate (usb-0000:00:14.0-11):</span><br><span class="line">        /dev/video0</span><br><span class="line">        /dev/video1</span><br></pre></td></tr></table></figure><p>修改配置文件 <code>sudo vim /lib/security/howdy/config.ini</code> 也可以使用 <code>sudo howdy config</code> 修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 修改以下内容</span><br><span class="line">- device_path = none</span><br><span class="line">+ device_path = /dev/video0</span><br></pre></td></tr></table></figure><p><strong>测试配置是否成功</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo howdy test</span><br></pre></td></tr></table></figure><h1 id="添加人脸模型"><a href="#添加人脸模型" class="headerlink" title="添加人脸模型"></a>添加人脸模型</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo howdy add</span><br></pre></td></tr></table></figure><p>查看添加的人脸模型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo howdy list</span><br></pre></td></tr></table></figure><h1 id="面部验证"><a href="#面部验证" class="headerlink" title="面部验证"></a>面部验证</h1><p>为了能识别用户，必须对 Howdy 需要用到的 <a href="https://wiki.archlinux.org/title/PAM">PAM</a> 配置文件做一些小修改，任取其一加入：</p><p><strong>建议放在 <a href="https://wiki.archlinux.org/title/PAM">PAM</a> 配置第一行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth sufficient pam_python.so /lib/security/howdy/pam.py</span><br></pre></td></tr></table></figure><h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/pam.d/sudo</span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220524134900307.png" alt="image-20220524134900307"></p><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo visudo</span><br></pre></td></tr></table></figure><h1 id="SDDM"><a href="#SDDM" class="headerlink" title="SDDM"></a>SDDM</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/pam.d/system-login</span><br><span class="line">或</span><br><span class="line">sudo vim  /etc/pam.d/sddm</span><br></pre></td></tr></table></figure><h1 id="polkit-1-KDE代理验证程序"><a href="#polkit-1-KDE代理验证程序" class="headerlink" title="polkit-1 KDE代理验证程序"></a>polkit-1 KDE代理验证程序</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/pam.d/polkit-1</span><br></pre></td></tr></table></figure><h1 id="取消拍照"><a href="#取消拍照" class="headerlink" title="取消拍照"></a>取消拍照</h1><p>Howdy 会在识别用户时拍照，然后保存到 <code>/lib/security/howdy/snapshots</code>。</p><p><code>sudo vim /lib/security/howdy/config.ini</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[snapshots]</span><br><span class="line">capture_failed = false</span><br><span class="line">capture_successful = false</span><br></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="终端里有-GStreamer-warnings"><a href="#终端里有-GStreamer-warnings" class="headerlink" title="终端里有 GStreamer warnings"></a>终端里有 GStreamer warnings</h2><p>已经让 Howdy 正常工作，但是在终端里收到警告：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ WARN:0@0.234] global /build/opencv/src/opencv-4.5.5/modules/videoio/src/cap_gstreamer.cpp (2401) handleMessage OpenCV | GStreamer warning: Embedded video playback halted; module source reported: Could not read from resource.</span><br><span class="line">[ WARN:0@0.234] global /build/opencv/src/opencv-4.5.5/modules/videoio/src/cap_gstreamer.cpp (1356) open OpenCV | GStreamer warning: unable to start pipeline</span><br><span class="line">[ WARN:0@0.234] global /build/opencv/src/opencv-4.5.5/modules/videoio/src/cap_gstreamer.cpp (862) isPipelinePlaying OpenCV | GStreamer warning: GStreamer: pipeline have not been created</span><br><span class="line">Identified face as lzscxb</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加 opencv log 日志等级环境变量 <code>sudo vim /etc/profile</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export OPENCV_LOG_LEVEL=ERROR</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux 常用软件推荐 更新于2022年5月</title>
      <link href="/posts/722051157.html"/>
      <url>/posts/722051157.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一下常用软件</p></blockquote><h1 id="必装软件"><a href="#必装软件" class="headerlink" title="必装软件"></a>必装软件</h1><h2 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h2><ul><li><code>yay</code>     代替pacman的包管理</li><li><code>downgrade</code> pacman 降级工具<h3 id="解决proxychains不支持-yay-一"><a href="#解决proxychains不支持-yay-一" class="headerlink" title="解决proxychains不支持 yay 一"></a>解决proxychains不支持 yay 一</h3>修改proxychains配置文件，把proxy_dns注释掉。</li></ul><p>打开proxychains.conf文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/proxychains.conf</span><br><span class="line"></span><br><span class="line"># 找到52行的位置，在proxy_dns前加上#号</span><br><span class="line"># proxy_dns</span><br></pre></td></tr></table></figure><p>修改完成后就可以愉快的使用yay了</p><p>-<code>yaourt</code>     备用</p><h2 id="终端工具"><a href="#终端工具" class="headerlink" title="终端工具"></a>终端工具</h2><ul><li><code>zsh</code></li><li><code>oh-my-zsh-git</code> 搭配zsh利器`</li><li><code>proxychains4</code> 终端代理工具`</li><li><code>htop</code> top 升级版</li></ul><h2 id="聊天工具"><a href="#聊天工具" class="headerlink" title="聊天工具"></a>聊天工具</h2><p><code>icalingua++</code> 推荐 QQ 客户端</p><h3 id="Wine"><a href="#Wine" class="headerlink" title="Wine"></a>Wine</h3><blockquote><p>dpi，目录映射等可以在 winecfg 进行设置<code>/opt/apps/com.qq.office.deepin/files/run.sh winecfg</code></p></blockquote><ul><li><code>deepin-wine-tim</code> TIM</li><li><code>deepin-wine-wechat</code>  微信`</li><li><code>wechat-devtool</code> 微信开发者工具</li></ul><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><ul><li><code>ttf-sarasa-gothic</code> 推荐字体</li><li><code>wqy-microhei</code></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p><code>wps-office ttf-wps-fonts wps-office-mui-zh-cn</code> 文办公软件WPS</p></li><li><p><code>neovim</code> 编辑器</p></li><li><p><code>google-chrome</code> 谷歌浏览器</p></li><li><p><code>firefox</code> 火狐浏览器</p></li><li><p><code>unrar</code> 解压</p></li><li><p><code>unzip-natspec</code> 不推荐使用<code>unzip</code> 因为有些文件会乱码  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -O gbk yourzip</span><br></pre></td></tr></table></figure></li><li><p><code>cmake</code></p></li><li><p><code>curl wget</code> 命令行下载工具，支持http，ftp</p></li><li><p><code>git</code></p></li><li><p><code>kvantum-qt5</code> 窗口美化神器</p></li><li><p><code>ntfs-3g</code> 挂载手机和u盘</p></li><li><p><code>vlc</code> 视频播放器</p></li><li><p><code>smplayer</code> 视频播放器</p></li><li><p><code>neofetch</code> 装逼神器</p></li><li><p><code>timeshift</code> 系统快照，防止滚挂</p></li><li><p><code>flameshot</code> 火焰截图 强大的截图工具</p></li><li><p><code>xdotool</code> 模拟键盘按键输入</p><h1 id="可选软件"><a href="#可选软件" class="headerlink" title="可选软件"></a>可选软件</h1><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2></li><li><p><code>visual-studio-code-bin</code> vscode</p></li><li><p><code>intellij-idea-ultimate-edition intellij-idea-ultimate-edition-jre</code> Idea Java开发工具</p></li><li><p><code>goland goland-jre</code> go开发工具</p></li><li><p><code>pycharm-professional</code> pycharm</p></li><li><p><code>phpstorm phpstorm-jre</code> phpstorm</p></li><li><p><code>apifox-latest</code> 国内类似 postman 的工具 <strong>推荐</strong></p></li><li><p><code>postman-bin</code> api测试工具</p></li><li><p><code>utools</code> 程序员的工具箱</p></li><li><p><code>tabby-terminal</code> SSH 工具 </p></li><li><p><code>vmware-workstation</code> 虚拟机</p><p>需要启动服务，你也可以设为开机自启</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 必装！ 安装对应 Linux 内核版本</span><br><span class="line">sudo pacman -S sudo pacman -S linux-headers</span><br><span class="line"></span><br><span class="line"># 加载VMware模块</span><br><span class="line">sudo modprobe -a vmw_vmci vmmon </span><br><span class="line"></span><br><span class="line"># 启动虚拟机的网络</span><br><span class="line">sudo systemctl start vmware-networks.service </span><br><span class="line"># 启动虚拟机的 USB</span><br><span class="line">sudo systemctl start vmware-usbarbitrator.service</span><br></pre></td></tr></table></figure><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><ul><li><p><code>gthumb</code> 图片查看器</p></li><li><p><code>netease-cloud-music</code> 网易云音乐<br>设置dpi</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /opt/netease/netease-cloud-music/netease-cloud-music.bash</span><br><span class="line"></span><br><span class="line"># 增加以下内容</span><br><span class="line">--force-device-scale-factor=1.20</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211210155531917-574238588.png" alt="image"></p><ul><li><p><code>qqmusic-bin</code> QQ音乐<br>设置dpi</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/bin/qqmusic</span><br><span class="line"></span><br><span class="line"># 与网易云一样增加以下内容</span><br><span class="line">--force-device-scale-factor=1.20</span><br></pre></td></tr></table></figure></li><li><p><code>xmind-zen</code> 思维导图</p></li><li><p><code>todesk</code>  Todesk远程桌面</p></li><li><p><code>sunloginclient</code> 向日葵 安装完成需按提示启动服务</p></li><li><p><code>typora</code> markdown编辑器（新版 已收费）</p></li><li><p><code>typora-free-cn</code> markdown编辑器（旧版 免费）</p></li><li><p><code>wolai-bin</code> 个人云端笔记软件</p></li><li><p><code>gimp</code> photoshop的替代品, GIMP 是自由、免费、开源的。</p></li><li><p><code>baidunetdisk-electron</code> : 百度网盘  不要下载<code>baidunetdisk-bin</code>这个包似乎有点问题</p></li><li><p><code>filezilla</code> FTP管理工具</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210411221551687-1917115214.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 安装并配置 Nginx</title>
      <link href="/posts/465942936.html"/>
      <url>/posts/465942936.html</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>系统：CentOS7 虚拟机<br>网卡模式：NAT<br>IP： 172.20.1.66</p><h1 id="Nginx-的两种安装方式"><a href="#Nginx-的两种安装方式" class="headerlink" title="Nginx 的两种安装方式"></a>Nginx 的两种安装方式</h1><ul><li>源码包安装：有点繁琐，但是服务性能好。（推荐）</li><li>Yum 安装：简单方便，不易出错。</li></ul><h2 id="Nginx-源码包安装"><a href="#Nginx-源码包安装" class="headerlink" title="Nginx 源码包安装"></a>Nginx 源码包安装</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><ol><li> 安装 gcc 环境<blockquote><p> nginx 编译时依赖 gcc 环境</p></blockquote></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++</span><br></pre></td></tr></table></figure><ol start="2"><li> 安装 pcre<blockquote><p>让 nginx 支持重写功能</p></blockquote></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install pcre pcre-devel</span><br></pre></td></tr></table></figure><ol start="3"><li>安装 openssl 和 zlib <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openssl openssl-devel zlib zlib-devel </span><br></pre></td></tr></table></figure>以上安装完成后，进行 nginx 安装。</li></ol><h2 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h2><ol><li>下载源码包<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.20.2.tar.gz -P /opt/software/server</span><br></pre></td></tr></table></figure></li><li>解压<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/software/server</span><br><span class="line">tar -zvxf nginx-1.20.2.tar.gz</span><br></pre></td></tr></table></figure></li><li>检查平台安装环境</li></ol><blockquote><p><strong>–prefix=/usr/local/nginx  是 nginx 编译安装的目录（推荐），安装完后会在此目录下生成相关文件，相关配置文件也在此目录</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.20.2</span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure><p>如果前面的依赖库都安装成功后，执行 <code>./configure --prefix=/usr/local/nginx</code> 命令会显示一些环境信息。如果出现错误，一般是依赖库没有安装完成，可按照错误提示信息进行所缺的依赖库安装。</p><ol start="4"><li>编译安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li>设置 nginx 软链接<br>安装成功后 nginx 程序路径为 <code>/usr/local/nginx/sbin/nginx</code> 链接到 <code>/usr/local/bin</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/nginx/sbin/nginx /usr/local/bin</span><br></pre></td></tr></table></figure></li></ol><h2 id="Nginx-常用命令"><a href="#Nginx-常用命令" class="headerlink" title="Nginx 常用命令"></a>Nginx 常用命令</h2><ul><li><p>启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure></li><li><p>重新加载服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></li><li><p>停止服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure></li><li><p>查看服务进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx </span><br></pre></td></tr></table></figure></li><li><p>检查 Nginx 配置是否正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure></li></ul><h2 id="Yum-源安装"><a href="#Yum-源安装" class="headerlink" title="Yum 源安装"></a>Yum 源安装</h2><blockquote><p>使用 yum 进行 Nginx 安装时，Nginx 配置文件在 <code>/etc/nginx</code> 目录下</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nginx </span><br></pre></td></tr></table></figure><h1 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><h1 id="Nigix-多配置文件"><a href="#Nigix-多配置文件" class="headerlink" title="Nigix 多配置文件"></a>Nigix 多配置文件</h1><blockquote><p>主配置文件<code>nginx.conf</code>中指定包含其他扩展配置文件，从而简化 Nginx 主配置文件，实现多个站点功能,方便配置文件的维护</p></blockquote><ol><li>创建子配置目录<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/conf</span><br><span class="line">mkdir vhost</span><br></pre></td></tr></table></figure></li><li>引入在主配置文件的<code>http</code>模块中引入子配置目录<br><code>vim nginx.conf</code><br>添加以下内容<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匹配vhost目录下的所有.conf文件</span></span><br><span class="line">include vhost/*.conf;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220510140041335.png" alt="image-20220510140041335"></p><ol start="3"><li>网站目录</li></ol><p>设我的网站目录为 <code>/www/www.test.com</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /www/www.test.com</span><br><span class="line"># 往首页增加一点内容</span><br><span class="line">echo &quot;&lt;h1&gt; Test &lt;/h1&gt;&quot; &gt; /www/www.test.com/index.html</span><br></pre></td></tr></table></figure><ol start="4"><li><p>在<code>vhost</code>编写配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim vhost/www.test.com.conf</span><br></pre></td></tr></table></figure><p>写入以下内容</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># 监听端口</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>; </span><br><span class="line">        <span class="comment"># 虚拟主机的名称  </span></span><br><span class="line">        <span class="attribute">server_name</span> www.test.com;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123; </span><br><span class="line">            <span class="comment"># 项目目录</span></span><br><span class="line">            <span class="attribute">root</span>   /www/www.test.com;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启服务</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查配置文件</span></span><br><span class="line">nginx -t</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载</span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><ol start="6"><li>宿主机或其他机器添加 host<br>想要其他机器访问当前 nginx 服务器配置的域名，需要将域名添加到 host 文件中只指向 nginx 服务器的 ip</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">172.20.1.66 www.test.com</span><br></pre></td></tr></table></figure><p>添加后即可访问 <a href="http://www.test.com/">http://www.test.com</a></p><p>   <img src="https://minio.lzscxb.cn/picture/images/typora/image-20220510143225349.png" alt="image-20220510143225349"></p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="配置-Host"><a href="#配置-Host" class="headerlink" title="配置 Host"></a>配置 Host</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">172.20.1.66 www.kgc.com</span><br><span class="line">172.20.1.66 www.benet.com</span><br></pre></td></tr></table></figure><h2 id="基于域名的跳转"><a href="#基于域名的跳转" class="headerlink" title="基于域名的跳转"></a>基于域名的跳转</h2><p>现在公司旧域名 <a href="http://www.kgc.com/">www.kgc.com</a> 有业务需求变更，需要使用新域名 <a href="http://www.benet.com/">www.benet.com</a> 代替，但是旧域名不能废除，需要跳转到新域名上，而且后面的参数保持不变。</p><ol><li>创建网站目录 <a href="http://www.benet.com/">www.benet.com</a> </li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /www/www.benet.com</span><br><span class="line">echo &quot;&lt;h1&gt;I am www.benet.com &lt;/h1&gt;&quot; &gt; /www/www.benet.com/index.html</span><br></pre></td></tr></table></figure><ol start="2"><li><p>创建  <a href="http://www.benet.com.conf/">www.benet.com.conf</a> 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/conf/vhost</span><br><span class="line">vim www.benet.com.conf</span><br></pre></td></tr></table></figure><p>内容为：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># 监听端口</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>; </span><br><span class="line">        <span class="comment"># 虚拟主机的名称  </span></span><br><span class="line">        <span class="attribute">server_name</span> www.benet.com;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123; </span><br><span class="line">            <span class="comment"># 项目目录</span></span><br><span class="line">            <span class="attribute">root</span>   /www/www.benet.com;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 <a href="http://www.kgc.com.conf/">www.kgc.com.conf</a> 配置文件</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/conf/vhost</span><br><span class="line">vim www.kgc.com.conf</span><br></pre></td></tr></table></figure><p>内容为：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>; </span><br><span class="line">        <span class="attribute">server_name</span> www.kgc.com;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123; </span><br><span class="line">            <span class="attribute">if</span> (<span class="variable">$host</span> = <span class="string">&#x27;www.kgc.com&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment"># $1为正则匹配的内容，即域名后边的字符串</span></span><br><span class="line">                <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> http://www.benet.com/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>重新加载 nginx<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220510150205558.png" alt="image-20220510150205558"></p><h2 id="基于客户端-IP-访问跳转"><a href="#基于客户端-IP-访问跳转" class="headerlink" title="基于客户端 IP 访问跳转"></a>基于客户端 IP 访问跳转</h2><p>今天公司业务新版本上线，要求所有 IP 访问任何内容都显示一个固定维护页面，只有公司 IP ：172.20.1.67 访问正常。</p><ol><li>建立维护页面<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /www/www.benet.com/maintain.html</span><br></pre></td></tr></table></figure>添加以下内容<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>网站升级维护中，请稍后访问！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>新建虚拟机  172.20.1.67 (公司IP)<blockquote><p>如果你有多台则不需要新建，仅用于测试公司 ip 访问</p></blockquote></li></ol><p><strong>添加 host</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;172.20.1.66 www.benet.com&quot; &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><ol start="3"><li><p>修改 <code>www.benet.com.conf</code> 配置文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># 监听端口</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="comment"># 虚拟主机的名称</span></span><br><span class="line">        <span class="attribute">server_name</span> www.benet.com;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 是否跳转到维护页面</span></span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$rewrite</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果是公司ip 则不跳转</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$remote_addr</span> = <span class="string">&quot;172.20.1.67&quot;</span>)&#123;</span><br><span class="line">            <span class="attribute">set</span> <span class="variable">$rewrite</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 跳转到维护中页面</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$rewrite</span> = <span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="attribute">rewrite</span> (.+) /maintain.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="comment"># 项目目录</span></span><br><span class="line">            <span class="attribute">root</span>   /www/www.benet.com;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新加载 nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">ngunx -s reload</span><br></pre></td></tr></table></figure></li><li><p>测试访问</p></li></ol><ul><li>IP：172.20.1.1  其他IP</li></ul><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220510155638333.png" alt="image-20220510155638333"></p><ul><li><p>IP: 172.20.1.67 公司IP</p><p>这台虚拟机没有安装桌面，则用<code>curl</code>测试，如果你安装桌面在浏览器访问即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl www.benet.com</span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220510155837228.png" alt="image-20220510155837228"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github 代理 https ssh 速度起飞</title>
      <link href="/posts/2503342765.html"/>
      <url>/posts/2503342765.html</url>
      
        <content type="html"><![CDATA[<p>很多时候我们在使用 github 的时候会出现下载很慢的情况。<br>如果你有代理，可以直接设置代理，来获取更快下载和上传资源的速度。</p><h1 id="HTTP-amp-HTTPS-代理"><a href="#HTTP-amp-HTTPS-代理" class="headerlink" title="HTTP &amp; HTTPS 代理"></a>HTTP &amp; HTTPS 代理</h1><p>端口号根据自己的代理端口进行修改，一般 ss 是1080，Clash 是 7891</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy &#x27;socks5://127.0.0.1:7891&#x27;</span><br><span class="line">git config --global https.proxy &#x27;socks5://127.0.0.1:7891&#x27;</span><br></pre></td></tr></table></figure><p>也可以直接修改用户主目录下的 <code>.gitconfig</code> 文件</p><p>vim ~/.gitconfig</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[http]</span><br><span class="line">    proxy = socks5://127.0.0.1:7891</span><br><span class="line">[https]</span><br><span class="line">    proxy = socks5://127.0.0.1:7891</span><br></pre></td></tr></table></figure><h1 id="SSH-代理"><a href="#SSH-代理" class="headerlink" title="SSH 代理"></a>SSH 代理</h1><p>打开用户主目录下的 <code>.ssh/config</code> 文件，添加以下内容</p><p><code>vim ~/.ssh/config</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Host</span> <span class="string">github.com</span></span><br><span class="line">   <span class="string">HostName</span> <span class="string">ssh.github.com</span></span><br><span class="line">   <span class="string">User</span> <span class="string">git</span></span><br><span class="line">   <span class="string">Port</span> <span class="number">443</span></span><br><span class="line">   <span class="comment"># socks5 代理（如 Clash） -x </span></span><br><span class="line">   <span class="comment"># -v 输出详情 可省略</span></span><br><span class="line">   <span class="string">ProxyCommand</span> <span class="string">nc</span> <span class="string">-v</span> <span class="string">-x</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:7891</span> <span class="string">%h</span> <span class="string">%p</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220509125712706.png" alt="image-20220509125712706"></p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA 2021.3高版本配合ja-netfilter永久破解激活方法详细图文教程</title>
      <link href="/posts/1312502623.html"/>
      <url>/posts/1312502623.html</url>
      
        <content type="html"><![CDATA[<h1 id="ja-netfilter-2022-01"><a href="#ja-netfilter-2022-01" class="headerlink" title="ja-netfilter 2022.01"></a>ja-netfilter 2022.01</h1><p>我们通常会使用防火墙来阻断这些软件的恶意访问。但防火墙也不是万能的，比如：跨平台问题、https下无法精准阻断某个url访问、部分防火墙不能阻断dns访问。<br>于是就有了我今天开源的这个项目：ja-netfilter！</p><h2 id="下载-ja-netfilter"><a href="#下载-ja-netfilter" class="headerlink" title="下载 ja-netfilter"></a>下载 ja-netfilter</h2><p>链接: <a href="https://pan.baidu.com/s/1LOIY3BTnSsC40ykYiUPsZA?pwd=a9cr">https://pan.baidu.com/s/1LOIY3BTnSsC40ykYiUPsZA?pwd=a9cr</a> 提取码: a9cr </p><p>解压至放到自己喜欢的位置<br>比如我的是:<code>/home/lzscxb/software/git/</code></p><blockquote><p>需要一个过期的激活码<br>现在不能进入到软件界面，我们激活码也是失效的</p></blockquote><h2 id="加载-ja-natfilter-插件"><a href="#加载-ja-natfilter-插件" class="headerlink" title="加载 ja-natfilter 插件"></a>加载 ja-natfilter 插件</h2><ol><li>进入到 Idea 软件安装目录找到 <code>bin/idea64.vmoptions</code><br><img src="https://minio.lzscxb.cn/picture/images/typora/2354934-20220102221103925-2089085769.png" alt="image"></li><li>文件末尾增加插件的路径</li></ol><p><strong>替换为你自己的路径</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:/home/lzscxb/software/git/ja-netfilter/ja-netfilter.jar</span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/2354934-20220102214524193-726523682.png" alt="image"></p><ol start="3"><li>重新打开 idea 输入过期的激活码，就可以激活了。 <strong>尽量断网操作</strong><br><img src="https://minio.lzscxb.cn/picture/images/typora/2354934-20220102214643692-244555316.png" alt="image"><br><img src="https://minio.lzscxb.cn/picture/images/typora/2354934-20220102215526043-2071143580.png" alt="image"></li></ol><h1 id="激活码"><a href="#激活码" class="headerlink" title="激活码"></a>激活码</h1><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">66T2D5AFMA-eyJsaWNlbnNlSWQiOiI2NlQyRDVBRk1BIiwibGljZW5zZWVOYW1lIjoiYmx1ZXMgYXJhYmxlIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IiIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJmYWxsYmFja0RhdGUiOiIyMDIyLTEyLTMxIiwicGFpZFVwVG8iOiIyMDIyLTEyLTMxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQREIiLCJmYWxsYmFja0RhdGUiOiIyMDIyLTEyLTMxIiwicGFpZFVwVG8iOiIyMDIyLTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBXUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjItMTItMzEiLCJwYWlkVXBUbyI6IjIwMjItMTItMzEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUEdPIiwiZmFsbGJhY2tEYXRlIjoiMjAyMi0xMi0zMSIsInBhaWRVcFRvIjoiMjAyMi0xMi0zMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUFMiLCJmYWxsYmFja0RhdGUiOiIyMDIyLTEyLTMxIiwicGFpZFVwVG8iOiIyMDIyLTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQQyIsImZhbGxiYWNrRGF0ZSI6IjIwMjItMTItMzEiLCJwYWlkVXBUbyI6IjIwMjItMTItMzEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFJCIiwiZmFsbGJhY2tEYXRlIjoiMjAyMi0xMi0zMSIsInBhaWRVcFRvIjoiMjAyMi0xMi0zMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQU1ciLCJmYWxsYmFja0RhdGUiOiIyMDIyLTEyLTMxIiwicGFpZFVwVG8iOiIyMDIyLTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjItMTItMzEiLCJwYWlkVXBUbyI6IjIwMjItMTItMzEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUENXTVAiLCJmYWxsYmFja0RhdGUiOiIyMDIyLTEyLTMxIiwicGFpZFVwVG8iOiIyMDIyLTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjExMjMxUFNBTjAwMDAwNSIsImhhc2giOiJUUklBTDotNzUxNjk0MTczIiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-FBHCQ/hbkNFViGb+ivOlf9DIVjxXjVsrNh7cHyU9TQPAv43catWwW3itaW9I0PtxQwc3I529GOEZXaM6l/L5vbjhmK47KwxH3dmHKosxxuN5N+HpH7UPtsgBAGvzLRetn7qtNZTdyjz2AAUalTtX62xu6OPjlIfiC6KpfWh9iObOiCvEjqRyDRghVeAiP8JA/BL8qNS2Qq9cgcZrQ+0xu5cURwjD8ecPK3fYd3RKhhmoSiTk6wpcZoagq006isggl/ILVg3QA02RzKGXisk5tCdEoSGVkp5U0PdR8oOvWdLXWRWfPQsZRAbtM8PhpQtbboHAdRwTLQjowzg+JUro0Q==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBAB2J1ysRudbkqmkUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></table></figure><h2 id="Goland"><a href="#Goland" class="headerlink" title="Goland"></a>Goland</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XRFA83DCDW-eyJsaWNlbnNlSWQiOiJYUkZBODNEQ0RXIiwibGljZW5zZWVOYW1lIjoid2l6YXJkcyBmbGFtIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IiIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiR08iLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA1LTA2IiwicGFpZFVwVG8iOiIyMDIzLTA1LTA2IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQQ1dNUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDUtMDYiLCJwYWlkVXBUbyI6IjIwMjMtMDUtMDYiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUEdPIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNS0wNiIsInBhaWRVcFRvIjoiMjAyMy0wNS0wNiIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA1LTA2IiwicGFpZFVwVG8iOiIyMDIzLTA1LTA2IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDUtMDYiLCJwYWlkVXBUbyI6IjIwMjMtMDUtMDYiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAxMjAyMjA1MDZQU0FOMDAwMDA1IiwiaGFzaCI6IlRSSUFMOi01NTA0MzYzMDYiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-PN/u3+fJtS7k2FbI2sGEG6mUaD4RKEvoEOv8c9exTeQGRgUh6ZSdndw9q8WSGvMQ0wb8ujkmc5SGIByxIL3wiiI2iOi9BHUYl9AtzGm9C6oLfTi50v66mJfba6TCx6Tg7r3rYOT9dGBO68QGjCDme4/ExGH6AXpwpstcSZJbbQVVNkMHdKdTI+AgCC1amuZ0s5W/Fsz0zn3bX7cgaU9imPWm4fiHZN4n/fQ6/1eHOZCAmtGZLOR9eS+NnJ5/AEr9NYDJwgCQkgp6/Yq57vFqSS/2ag6OAdO8f8x0aEraifV0Z5oHpLmETziwS/aSxdgcQQzLG9PyqJ1XAEVKTFHZyA==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBAB2J1ysRudbkqmkUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></table></figure><h2 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9OMDR84AQ1-eyJsaWNlbnNlSWQiOiI5T01EUjg0QVExIiwibGljZW5zZWVOYW1lIjoic2NyaXAgd2FuZSIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IlBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAxLTI0IiwicGFpZFVwVG8iOiIyMDIzLTAxLTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDEtMjQiLCJwYWlkVXBUbyI6IjIwMjMtMDEtMjQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUENXTVAiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAxLTI0IiwicGFpZFVwVG8iOiIyMDIzLTAxLTI0IiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjIwMTIxUFNBTjAwMDAwNSIsImhhc2giOiJUUklBTDo1MjkwOTYzMzciLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-NWwMp5Ucsjt2Z/S/6T8CzV8pcKNycs1d+zV8dzoBH4qV/mivQFLb5XeNPXoI48tRnkEzfmMQ/jFGUj7Gp0GCWIfu/483XP46Yz6/LPAF9r6TLwFVZYEGjRFUcoIjZZue/gCZIFrFeQf88rie5kA67E8oiM+yNj3v4OBJlTAJGl29t4ocNtTNlbzhYUi2GqP6BPWgsb8DoLSKLxnMcs9zjhxQX1ffak0ldNsMLufl8plf4jpkdgY6W3mCBPi4AySWqJMg8zgjFnSFqF9aWWeMfQFsB0SBOVEfh2kSOZM60lEHmN30mUzSTxC0AaCagAzvfc92DxGWk+WDlp7b2zyu6w==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBAB2J1ysRudbkqmkUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></table></figure><h2 id="PHPStorm"><a href="#PHPStorm" class="headerlink" title="PHPStorm"></a>PHPStorm</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">H31FX7UKDS-eyJsaWNlbnNlSWQiOiJIMzFGWDdVS0RTIiwibGljZW5zZWVOYW1lIjoic2NyaXAgd2FuZSIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IlBTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFBTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAxLTI0IiwicGFpZFVwVG8iOiIyMDIzLTAxLTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDEtMjQiLCJwYWlkVXBUbyI6IjIwMjMtMDEtMjQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUENXTVAiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAxLTI0IiwicGFpZFVwVG8iOiIyMDIzLTAxLTI0IiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjIwMTIxUFNBTjAwMDAwNSIsImhhc2giOiJUUklBTDotMjAzNDcyODUzMSIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-hy3rwI8FFAcvim4JsfvqAcSWGSIwWc40UUhMVw1/9ma1F0pzQVqvj1nBA6tT8IKKnBcGgbs7FS43rIMHMVfLpwN6a1jii3SuzAAOnDO9p6UaBbjsgeG6c2mCk/Mlc07IhthBGlg2agF7bMf7PVB/m4zfuFnltmHSGeMx1h1mgHxGDlhCT+jEAFHZukT+MAucG8TzMP1C3alkv7ocx+fbqC/GIPhQP3QhWbf0GA0VBkoVKiL20kU/LAM/jZrvHCNMOrPF6pZOKKp5/qZAL6tU9VoOnEbKjtok5byzyD0XgnCy2gWhwAR3RWiYJmHFZvnzf+XJVS/vdr922blhGnpM4w==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBAB2J1ysRudbkqmkUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></table></figure><h2 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">26HCIAHRUF-eyJsaWNlbnNlSWQiOiIyNkhDSUFIUlVGIiwibGljZW5zZWVOYW1lIjoic2NyaXAgd2FuZSIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IldTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAxLTI0IiwicGFpZFVwVG8iOiIyMDIzLTAxLTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDEyMVBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6MTE4MTQxMDE2MyIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-Xkz/sYVEkWsJKWyzIdLCD9nkC4ULOs2VuZV1fiWvCQRWrRCWliLQLhLNmAUtdwzfMPPrEDv2KJSkz3SknWgWkTA/7IqhD+4NrNRCh3kwipWBdkY8WJ+bijfvrEU1QBrVSe6y2hjV0BS9vhhqkk15rxzVSq5bXU3EAMkaru+XGhl/a9I3zPTzvd1KtXwjXoGG4HLRx0euORsjKGARAo9/df6DKB8ORTOLBVwH85MZuHutXnSeFPWrzR3YwGyFsJ0chk6kAO9qz3L3Cv1ZeGd5BoSwHhdCErZVG0oESZBdkuNOful1CxwRYbjAICI+mzGpWee636qlGmzKWFpMwSuZwQ==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBAB2J1ysRudbkqmkUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></table></figure><h2 id="RubyMine"><a href="#RubyMine" class="headerlink" title="RubyMine"></a>RubyMine</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Z4WFEKGUE1-eyJsaWNlbnNlSWQiOiJaNFdGRUtHVUUxIiwibGljZW5zZWVOYW1lIjoic2NyaXAgd2FuZSIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IlJNIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFJCIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAxLTI0IiwicGFpZFVwVG8iOiIyMDIzLTAxLTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDEtMjQiLCJwYWlkVXBUbyI6IjIwMjMtMDEtMjQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUENXTVAiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAxLTI0IiwicGFpZFVwVG8iOiIyMDIzLTAxLTI0IiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjIwMTIxUFNBTjAwMDAwNSIsImhhc2giOiJUUklBTDotODg5MzIxNTE3IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-ZIjv2AK0rRXB14tOFZoedA8R7GKsTZ7TkH6jFw8kq4sHF453BJL8iz7aDFRoJ9tEiORCoWadrcTolWf0bGOTLfAaY31w3ImbfN4msAz8EZzJKSwecR/bdkud6EL6R0WftMNpifM5gDuJ6lEB476vgziYglfZvjoCDB7qKeap1yavF6td1rpHAbNl7JPybYBLqK8orr5Tde9+BEmAX1FuOVQb0Dh/5E/G1pO4IEhikxlvpWE7/WtFwQqymtoUKl5NQUsM92E5yo/0aJ8NOjUm+phLYTaaUtVk6+hBVvzjNZ2e1bIorujmEsSRBf3PLnWiyiP490Ow68+mFz4Rd7EJtw==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBAB2J1ysRudbkqmkUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IntelliJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装 Maven 私服</title>
      <link href="/posts/2868604331.html"/>
      <url>/posts/2868604331.html</url>
      
        <content type="html"><![CDATA[<h1 id="为何需要-Maven-私服？"><a href="#为何需要-Maven-私服？" class="headerlink" title="为何需要 Maven 私服？"></a>为何需要 Maven 私服？</h1><p>我们从项目实际开发来看：</p><ol><li><p>一些无法从外部仓库下载的构件，例如内部的项目还能部署到私服上，以便供其他依赖项目使用。</p></li><li><p>为了节省带宽和时间，在局域网内架设一个私有的仓库服务器，用其代理所有外部的远程仓库。当本地Maven项目需要下载构件时，先去私服请求，如果私服没有，则再去远程仓库请求，从远程仓库下载构件后，把构件缓存在私服上。这样，及时暂时没有Internet链接，由于私服已经缓存了大量构件，整个项目还是可以正常使用的。同时，也降低了中央仓库的符合。</p></li></ol><h1 id="Nexus"><a href="#Nexus" class="headerlink" title="Nexus"></a>Nexus</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>Nexus 是用来搭建 Maven 私服的可以说是唯一的工具，它的官网上是这样说的：“世界上第一个也是唯一的免费使用的仓库解决方案”。目前的最新版本是 OSS 3.x。提供了针对 Windows、Unix、OS X 三种系统的版本。</p></blockquote><p>这里只简单说明 Docker 下的安装方式</p><ol><li><p>拉取 Nexus3 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull sonatype/nexus3</span><br></pre></td></tr></table></figure></li><li><p>启动镜像并将容器内部<code>/nexus-data</code>挂载到主机<code>/root/nexus-data</code>目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 8081:8081 \</span><br><span class="line">--name nexus \</span><br><span class="line">-v /root/nexus-data:/nexus-data \</span><br><span class="line">--restart=always \</span><br><span class="line">-d sonatype/nexus3</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>docker ps -a</code> 查看容器启动情况</p></li><li><p>访问 <code>ip:8081</code></p></li></ol><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220405190620647.png" alt="image-20220405190620647"></p><p><strong>至此，私服搭建成功。</strong></p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>默认登陆账号 <strong>admin admin123</strong> </p><p>注意，这个时候你可能会遇到如下这个错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Incorrect username or password, or no permission to use the application.</span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220405190954338.png" alt="image-20220405190954338"></p><p>maven 私服登录的时候默认是不能使用明文密码，要使用密文密码，一般在你创建容器的目录</p><ol><li><p>查看密文</p><p>  宿住机中执行</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /root/nexus-data/admin.password</span><br><span class="line">d62fa667-a22b-41db-a14a-6aa6f793f4fb</span><br></pre></td></tr></table></figure><ol start="2"><li>  重新登陆后，会提示你重设密码</li></ol><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220405191757774.png" alt="image-20220405191757774"></p><h1 id="创建-Maven-仓库"><a href="#创建-Maven-仓库" class="headerlink" title="创建 Maven 仓库"></a>创建 Maven 仓库</h1><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220405192112470.png" alt="image-20220405192112470"></p><p>选择maven2（hosted）</p><ul><li><p>  proxy：这是代理方式，它是用来代理中央仓库的，例如我们依赖的包在本地仓库没有，就会到私服获取，私服没有的话，会到中央仓库先把包下载到这里，然后再下载到本地仓库；</p></li><li><p>  hosted：指的是我们公司或团队内部的包，并且 hosted 类型的仓库会分为 releases 和 snapshots 两个，前者是正式版，后者一般是开发测试版；</p></li><li><p>  group：它的目的就是把多个仓库组合起来，然后我们项目中只需要配置上这个类型的仓库地址，就可以把它里面组合的几个仓库都关联上。</p></li></ul><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220405192149963.png" alt="image-20220405192149963"></p><p>填写仓库名称(其他配置按需配置)</p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220405192515896.png" alt="image-20220405192515896"></p><h1 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h1><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220405193645805.png" alt="image-20220405193645805"></p><p>创建好账户后就可以在右上角切换账户了。</p><h1 id="配置-Maven"><a href="#配置-Maven" class="headerlink" title="配置 Maven"></a>配置 Maven</h1><p>接着就是配置本地 maven &gt; conf 了，找到自己本机的 maven conf 下的 setting.xml 文件，添加如下信息：</p><p>注意是 services 节点下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>lzscxb<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>lzscxb<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="发布-Maven-插件到仓库"><a href="#发布-Maven-插件到仓库" class="headerlink" title="发布 Maven 插件到仓库"></a>发布 Maven 插件到仓库</h1><p>创建一个普通的 maven 项目，配置 pom.xml 如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lzscxb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lzscxb-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注意 &lt;version&gt;1.0-RELEASE&lt;/version&gt; 限定版本一定为RELEASE,因为上传的对应仓库的存储类型为RELEASE --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定仓库地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--此名称要和.m2/settings.xml中设置的ID一致 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>lzscxb<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://lzscxb.cn:8081/repository/maven-repo/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--发布代码Jar插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--发布源码插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发布插件    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy</span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220405194811789.png" alt="image-20220405194811789"></p><p>查看发布的 Maven</p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220405194955318.png" alt="image-20220405194955318"></p><h1 id="项目引入私服中依赖"><a href="#项目引入私服中依赖" class="headerlink" title="项目引入私服中依赖"></a>项目引入私服中依赖</h1><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lzscxb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lzscxb-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>lzscxb<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://lzscxb.cn:8081/repository/maven-repo/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220405195510486.png" alt="image-20220405195510486"></p>]]></content>
      
      
      <categories>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 搭建 Minio + picgo + typora 图床</title>
      <link href="/posts/4289372700.html"/>
      <url>/posts/4289372700.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>   中文文档 <a href="http://docs.minio.org.cn/docs/">http://docs.minio.org.cn/docs/</a> </p></blockquote><h1 id="Minio-Docker-单节点单磁盘"><a href="#Minio-Docker-单节点单磁盘" class="headerlink" title="Minio Docker 单节点单磁盘"></a>Minio Docker 单节点单磁盘</h1><blockquote><p>  <a href="https://docs.min.io/docs/minio-docker-quickstart-guide.html">https://docs.min.io/docs/minio-docker-quickstart-guide.html</a></p><p>单节点部署又分为单磁盘、多磁盘部署，这里不推荐使用单磁盘，因为minio的纠删码&gt;  算法要求至少4块磁盘，否则应用不了纠删码，保证不了数据安全以及高可用。</p></blockquote><ol><li>  本地持久化 Minio </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/minio/data</span><br></pre></td></tr></table></figure><blockquote><p>-v /data/minio/data:/data \   持久化数据文件到本地 <code>/data/minio/data</code><br> -v /data/minio/config:/root/.minio \  映射配置目录到本地 <code>/data/minio/config</code>，配置HTTPS需要<br>MINIO_ROOT_USER=用户名 / accessKey<br>MINIO_ROOT_PASSWORD=密码 / secretKey<br>MINIO_SERVER_URL=API 域名，通过 Web 管理域名登陆创建文件分享时会调用此API 域名<br>–console-address ‘0.0.0.0:9001’： Minio控制后台地址<br>–address ‘:9000’：Minio的API地址端口</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -p 9000:9000 \</span><br><span class="line">  -p 9001:9001 \</span><br><span class="line">  --name minio1 \</span><br><span class="line">  -v /data/minio/data:/data \</span><br><span class="line">  -v /data/minio/config:/root/.minio \</span><br><span class="line">  -e &quot;MINIO_ROOT_USER=MBvr3W8YtpZfbsoYuF2E&quot; \</span><br><span class="line">  -e &quot;MINIO_ROOT_PASSWORD=UM79xgV2JW87X78qxfTgF5cLQHhnFumT&quot; \</span><br><span class="line">  -e MINIO_SERVER_URL=http://minio.lzscxb.cn:9000 \</span><br><span class="line">  quay.io/minio/minio server /data \</span><br><span class="line">  --address &quot;:9000&quot; --console-address &quot;:9001&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>  <code>docker ps -a</code> 查看容器是否正常启动</li></ol><p>启动完成后 访问  <a href="http://ip:9000/">http://ip:9000</a>  即可进入Minio</p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220329225559637.png" alt="image-20220329225559637"></p><h1 id="Docker-compose-分布式节点"><a href="#Docker-compose-分布式节点" class="headerlink" title="Docker-compose 分布式节点"></a>Docker-compose 分布式节点</h1><blockquote><p><a href="https://docs.min.io/docs/deploy-minio-on-docker-compose.html">https://docs.min.io/docs/deploy-minio-on-docker-compose.html</a><br>前提条件为安装 docker-compose</p></blockquote><ol><li>下载 docker-compose.yaml 和 nginx.conf 到你喜欢的目录中<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mkdir</span> docker</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> docker</span></span><br><span class="line">wget https://github.com/minio/minio/blob/master/docs/orchestration/docker-compose/docker-compose.yaml?raw=true -O docker-compose.yaml</span><br><span class="line">wget https://github.com/minio/minio/blob/master/docs/orchestration/docker-compose/nginx.conf?raw=true -O nginx.conf</span><br></pre></td></tr></table></figure></li><li>修改 docker-compose.yaml 配置</li></ol><blockquote><p>MINIO_ROOT_USER=用户名 / accessKey<br>MINIO_ROOT_PASSWORD=密码 / secretKey<br>MINIO_SERVER_URL=API 域名，通过 Web 管理域名登陆创建文件分享时会调用此API 域名</p></blockquote><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220330014056006.png" alt="image-20220330014056006"></p><ol start="3"><li>执行安装</li></ol><p>默认创建了 4 个 minio 分布式实例和 1 个 Nginx 服务器。您可以将更多 MinIO 服务（最多 16 个）添加到您的 MinIO Compose 部署中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose pull</span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><ol start="4"><li><code>docker ps -a</code> 查看容器是否正常启动<br>启动完成后 访问  <a href="http://ip:9000/">http://ip:9000</a>  即可进入Minio</li></ol><h1 id="新建-Bucket-并设为公共访问"><a href="#新建-Bucket-并设为公共访问" class="headerlink" title="新建 Bucket 并设为公共访问"></a>新建 Bucket 并设为公共访问</h1><p>PS：如果部署的是单节点单磁盘Minio 提示以下内容，并不影响使用但会丢失<strong>高可用</strong>特性。如果需要可以使用 docker-compose  安装分布式节点</p><p>默认情况下新建的Buckets是私有权限,文件也可以直接分享带有效期的临时链接.如果需要当图床使用,可以将Buckets修改为公开权限,就可以直接用<a href="https://lzscxb.cn/test/abc.jpg%E5%BD%93%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8">https://lzscxb.cn/test/abc.jpg当图床使用</a>.</p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220330012912194.png" alt="image-20220330012912194"></p><p><strong>设为公共访问 Public</strong></p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220330013131001.png" alt="image-20220330013131001"></p><h1 id="Nginx-反向代理"><a href="#Nginx-反向代理" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h1><p>官方文档 <a href="http://docs.minio.org.cn/docs/master/setup-nginx-proxy-with-minio">http://docs.minio.org.cn/docs/master/setup-nginx-proxy-with-minio</a></p><h2 id="标准的Root配置"><a href="#标准的Root配置" class="headerlink" title="标准的Root配置"></a>标准的Root配置</h2><p><strong>在文件<code>/etc/nginx/sites-enabled</code>中添加下面的内容，同时删除同一个目录中现有的<code>default</code>文件。</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server <span class="punctuation">&#123;</span></span><br><span class="line"> listen <span class="number">80</span>;</span><br><span class="line"> server_name example.com;</span><br><span class="line"> location / <span class="punctuation">&#123;</span></span><br><span class="line">   proxy_set_header Host $http_host;</span><br><span class="line">   proxy_pass http<span class="punctuation">:</span><span class="comment">//localhost:9000;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="非Root配置"><a href="#非Root配置" class="headerlink" title="非Root配置"></a>非Root配置</h2><p>注意:</p><ul><li>  用你自己的服务名替换<code>http://localhost:9000</code>。</li><li>  用所需的路径替换<code>files</code>。这不能是<code>~^/minio</code>，因为<code>minio</code>是minio中的保留字。</li><li>  所使用的路径（在本例中为<code>files</code>）按照惯例，应设置为minio所使用的存储桶的名称。</li><li>  可以通过添加更多类似于上面定义的location定义来访问其他存储桶。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> location ~^/files <span class="punctuation">&#123;</span></span><br><span class="line">   proxy_buffering off;</span><br><span class="line">   proxy_set_header Host $http_host;</span><br><span class="line">   proxy_pass http<span class="punctuation">:</span><span class="comment">//localhost:9000;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="宝塔面板"><a href="#宝塔面板" class="headerlink" title="宝塔面板"></a>宝塔面板</h2><p><strong>与非Root配置一样的</strong></p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220418220253866.png" alt="image-20220418220253866"></p><p>保存即可使用  http://域名/桶名/图片路径访问</p><p><a href="http://oss.lzscxb.cn/consult/images/380108996294367.png">http://oss.lzscxb.cn/consult/images/380108996294367.png</a></p><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><p><em>本教程以腾讯云为例</em></p><h2 id="申请腾讯免费-SSL-证书"><a href="#申请腾讯免费-SSL-证书" class="headerlink" title="申请腾讯免费 SSL 证书"></a>申请腾讯免费 SSL 证书</h2><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220418215758818.png" alt="image-20220418215758818"></p><p>申请成功后下载证书</p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220418215817610.png" alt="image-20220418215817610"></p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220418215834493.png" alt="image-20220418215834493"></p><h2 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h2><p><strong><code>minio.lzscxb.cn.key</code> 重命名为 <code>private.key</code><br><code>minio.lzscxb.cn.csr</code> 重命名为 <code>public.crt</code></strong></p><p>将<code>private.key</code>和<code>public.crt</code>文件放在<strong>宿住机</strong>目录<code>~/minio/config/certs</code>文件夹下</p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220418215848083.png" alt="image-20220418215848083"></p><h2 id="重新启动-Minio"><a href="#重新启动-Minio" class="headerlink" title="重新启动 Minio"></a>重新启动 Minio</h2><p><strong>修改服务器地址为 https  重新安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker stop minio1 &amp;&amp; docker rm minio1</span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">  -p 9000:9000 \</span><br><span class="line">  -p 9001:9001 \</span><br><span class="line">  --name minio1 \</span><br><span class="line">  -v /data/minio/data:/data \</span><br><span class="line">  -v /data/minio/config:/root/.minio \</span><br><span class="line">  -e &quot;MINIO_ROOT_USER=UM79xgV2JW87X78qxfTgF5cLQHhnFumT&quot; \</span><br><span class="line">  -e &quot;MINIO_ROOT_PASSWORD=UM79xgV2JW87X78qxfTgF5cLQHhnFumT&quot; \</span><br><span class="line">  -e MINIO_SERVER_URL=https://minio.lzscxb.cn:9000 \</span><br><span class="line">  quay.io/minio/minio server /data \</span><br><span class="line">  --address &quot;:9000&quot; --console-address &quot;:9001&quot;</span><br></pre></td></tr></table></figure><p><strong>PS：如果你设置了 Nginx 反向代理，需要将地址更换为 https</strong></p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220418215917182.png" alt="image-20220418215917182"></p><h1 id="PicGO"><a href="#PicGO" class="headerlink" title="PicGO"></a>PicGO</h1><h2 id="PicGo-App"><a href="#PicGo-App" class="headerlink" title="PicGo App"></a>PicGo App</h2><ol><li>  下载 PicGo</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S picgo-appimage</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 minio 插件<br>可以在 picgo 中安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Herbertzz/picgo-plugin-minio</span><br></pre></td></tr></table></figure></li><li>设置图床参数<br> <img src="https://minio.lzscxb.cn/picture/images/typora/image-20220413121318965.png" alt="image-20220413121318965"></li></ol><p>  测试上传即可</p><h2 id="PicGo-Cli"><a href="#PicGo-Cli" class="headerlink" title="PicGo-Cli"></a>PicGo-Cli</h2><blockquote><p>  Linux 需要使用 Cli 工具，Windonws则不需要</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g picgo</span><br></pre></td></tr></table></figure><ol><li>设置图床信息</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo set uploader</span><br></pre></td></tr></table></figure><ul><li>  设定仓库名：按照【用户名 / 图床仓库名】的格式填写</li><li>  设定分支名：【 main 】 2021年后 master 改为 main</li><li>  设定 Token：粘贴上述生成的【 Token 】</li><li>  指定存储路径：如【 images/ 】，这样就会在仓库下创建一个名为 images 的文件夹，图片将会储存在此文件夹中</li><li>  设定自定义域名：它的的作用是，在图片上传后，PicGo 会按照【 自定义域名 + 上传的图片名 】的方式生成访问链接，放到粘贴板上，</li></ul><ol><li>  安装插件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo install minio</span><br></pre></td></tr></table></figure><ol start="2"><li>  配置 minio 参数</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo set uploader</span><br></pre></td></tr></table></figure><p>​     <img src="https://minio.lzscxb.cn/picture/images/typora/image-20220330020543381.png" alt="image-20220330020543381"></p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220508112322393.png" alt="image-20220508112322393"></p><ol start="3"><li>  选择默认图床</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo use uploader</span><br></pre></td></tr></table></figure><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220330020916960.png" alt="image-20220330020916960">exec: Stderr already set</p>]]></content>
      
      
      <categories>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 2022 实现支付宝、微信支付功能</title>
      <link href="/posts/1040944994.html"/>
      <url>/posts/1040944994.html</url>
      
        <content type="html"><![CDATA[<h1 id="Gopay"><a href="#Gopay" class="headerlink" title="Gopay"></a>Gopay</h1><blockquote><p>微信、支付宝、PayPal、Apple 的Go版本SDK。【极简、易用的聚合支付SDK】<br>  github：<a href="https://github.com/go-pay/gopay">https://github.com/go-pay/gopay</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/go-pay/gopay</span><br></pre></td></tr></table></figure><h1 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h1><blockquote><p>   <a href="https://open.alipay.com/platform/appDaily.htm">https://open.alipay.com/platform/appDaily.htm</a></p></blockquote><h2 id="密钥和授权回调地址"><a href="#密钥和授权回调地址" class="headerlink" title="密钥和授权回调地址"></a>密钥和授权回调地址</h2><p><strong>获取密钥</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220307195026431.png" alt="image-20220307195026431"></p><p>得到以下：</p><ol><li>应用公钥证书 appCertPublicKey.crt</li><li>应用私钥(非 Java 语言) </li><li>支付宝公钥证书 alipayCertPublicKey_RSA2.crt</li><li>支付宝公钥证书 alipayRootCert.crt</li></ol><p>将证书中的内容复制到文件中或着已证书文件的形式加载</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cert</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">Appid = <span class="string">&quot;2021000116674577&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用私钥</span></span><br><span class="line">AppPrivateKey = <span class="string">&quot;MIIEpAIBAAKCAQEAoX6ZLfwZz3NDkwjaVhai18yVxQaUgA47aZuOe2AtG2hfeQ1LJ9GN7aTPAGdnuXMaRj9RRKllRw+vJq2FmAKo........&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 支付宝公钥证书</span></span><br><span class="line">AlipayPublicContentRSA2 = []<span class="type">byte</span>(<span class="string">`-----BEGIN CERTIFICATE-----</span></span><br><span class="line"><span class="string">MIIDszCCApu...................</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支付宝根证书</span></span><br><span class="line">AlipayRootContent = []<span class="type">byte</span>(<span class="string">`-----BEGIN CERTIFICATE----</span></span><br><span class="line"><span class="string">.....................................................</span></span><br><span class="line"><span class="string">-----END CERTIFICATE-----`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用公钥证书</span></span><br><span class="line">AppPublicContent = []<span class="type">byte</span>(<span class="string">`-----BEGIN CERTIFICATE-----.................................`</span>)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>以文件的方式加载</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cert</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">Appid <span class="type">string</span></span><br><span class="line"><span class="comment">// 应用私钥</span></span><br><span class="line">AppPrivateKey <span class="type">string</span></span><br><span class="line"><span class="comment">// 支付宝公钥证书</span></span><br><span class="line">AlipayPublicContentRSA2 []<span class="type">byte</span></span><br><span class="line"><span class="comment">// 支付宝根证书</span></span><br><span class="line">AlipayRootContent []<span class="type">byte</span></span><br><span class="line"><span class="comment">// 应用公钥证书</span></span><br><span class="line">AppPublicContent []<span class="type">byte</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">()</span></span> &#123;</span><br><span class="line">RSA2, _ := os.Open(<span class="string">&quot;alipayCertPublicKey_RSA2.crt&quot;</span>)</span><br><span class="line">rootKey, _ := os.Open(<span class="string">&quot;alipayRootCert.crt&quot;</span>)</span><br><span class="line">appPublicKey, _ := os.Open(<span class="string">&quot;appCertPublicKey.crt&quot;</span>)</span><br><span class="line"></span><br><span class="line">AlipayPublicContentRSA2, _ = ioutil.ReadAll(RSA2)</span><br><span class="line">AlipayRootContent, _ = ioutil.ReadAll(rootKey)</span><br><span class="line">AppPublicContent, _ = ioutil.ReadAll(appPublicKey)</span><br><span class="line"></span><br><span class="line">AppPrivateKey = <span class="string">&quot;MIIEpAIBAAKCAQEAoX6Z==.................&quot;</span></span><br><span class="line">Appid = <span class="string">&quot;2021000116674577&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220307160646231.png" alt="image-20220307160646231"></p><p><strong>回调地址</strong><br><strong>注意这里一定要是公网地址！</strong><br>如果你是本地开发可以使用外网穿透实现 <a href="https://i.cpolar.com/m/4M81">https://i.cpolar.com/m/4M81</a></p><h2 id="电脑网站支付"><a href="#电脑网站支付" class="headerlink" title="电脑网站支付"></a>电脑网站支付</h2><blockquote><p><a href="https://github.com/go-pay/gopay/blob/main/doc/alipay.md">https://github.com/go-pay/gopay/blob/main/doc/alipay.md</a></p><p><a href="https://opendocs.alipay.com/apis/api_1/alipay.trade.page.pay?scene=22">https://opendocs.alipay.com/apis/api_1/alipay.trade.page.pay?scene=22</a></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pay</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-pay/gopay&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-pay/gopay/alipay&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-pay/gopay/pkg/xlog&quot;</span></span><br><span class="line"><span class="string">&quot;micro-shop-api/order-web/config/cert&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">TradeStatusWaitBuyerPay <span class="type">string</span> = <span class="string">&quot;WAIT_BUYER_PAY&quot;</span> <span class="comment">// 交易创建等待买家支付</span></span><br><span class="line">TradeStatusClose               = <span class="string">&quot;TRADE_CLOSED&quot;</span>   <span class="comment">// 交易关闭</span></span><br><span class="line">TradeStatusSuccess             = <span class="string">&quot;TRADE_SUCCESS&quot;</span>  <span class="comment">// 支付成功</span></span><br><span class="line">TradeStatusFinished            = <span class="string">&quot;TRADE_FINISHED&quot;</span> <span class="comment">// 交易完结(不可退款）</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Notify 支付宝异步通知</span></span><br><span class="line"><span class="comment">// 使用的 gin框架</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Notify</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析异步请求的参数</span></span><br><span class="line">notifyReq, err := alipay.ParseNotifyToBodyMap(ctx.Request)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">zap.S().Errorf(<span class="string">&quot;解析参数错误:%s&quot;</span>, err.Error())</span><br><span class="line">response.Fail(ctx, status2.InvalidParameter)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 验证消息是否是支付宝发送的 保证安全性</span></span><br><span class="line"><span class="comment">// 支付宝步通知验签（公钥证书模式）</span></span><br><span class="line">ok, err := alipay.VerifySignWithCert(global.Config.Alipay.AlipayPublicContentRSA2, notifyReq)</span><br><span class="line"><span class="keyword">if</span> !ok || err != <span class="literal">nil</span> &#123;</span><br><span class="line">zap.S().Errorf(<span class="string">&quot;支付宝异步通知验签失败:%s&quot;</span>, err.Error())</span><br><span class="line">response.Fail(ctx, status2.InnerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以下是业务逻辑</span></span><br><span class="line"><span class="comment">// 更新订单状态</span></span><br><span class="line">orderSn := notifyReq[<span class="string">&quot;out_trade_no&quot;</span>].(<span class="type">string</span>)</span><br><span class="line">orderStatus := notifyReq[<span class="string">&quot;trade_status&quot;</span>].(<span class="type">string</span>)</span><br><span class="line">_, err = global.OrderSrvClient.UpdateOrderStatus(context.Background(), &amp;proto.OrderStatus&#123;OrderSn: orderSn, Status: orderStatus&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">zap.S().Errorf(<span class="string">&quot;支付成功但更新状态失败,支付状态:%s, 订单号:%s, err:%s&quot;</span>, orderStatus, orderSn, err.Error())</span><br><span class="line">response.Fail(ctx, status2.InnerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ====异步通知，返回支付宝平台的信息====</span></span><br><span class="line"><span class="comment">//    文档：https://opendocs.alipay.com/open/203/105286</span></span><br><span class="line"><span class="comment">//    程序执行完后必须打印输出“success”（不包含引号）。如果商户反馈给支付宝的字符不是success这7个字符，支付宝服务器会不断重发通知，直到超过24小时22分钟。一般情况下，25小时以内完成8次通知（通知的间隔频率一般是：4m,10m,10m,1h,2h,6h,15h）</span></span><br><span class="line"><span class="comment">//   也就是最大努力通知</span></span><br><span class="line">ctx.String(http.StatusOK, <span class="string">&quot;success&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Alipay</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化支付宝客户端</span></span><br><span class="line"><span class="comment">//    appId：应用ID</span></span><br><span class="line"><span class="comment">//    privateKey：应用私钥，支持PKCS1和PKCS8</span></span><br><span class="line"><span class="comment">//    isProd：是否是正式环境</span></span><br><span class="line">client, err := alipay.NewClient(cert.Appid, cert.AppPrivateKey, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">xlog.Error(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打开Debug开关，输出日志，默认关闭</span></span><br><span class="line">client.DebugSwitch = gopay.DebugOn</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置支付宝请求 公共参数</span></span><br><span class="line"><span class="comment">//    注意：具体设置哪些参数，根据不同的方法而不同，此处列举出所有设置参数</span></span><br><span class="line">client.SetLocation(alipay.LocationShanghai). <span class="comment">// 设置时区，不设置或出错均为默认服务器时间</span></span><br><span class="line">SetCharset(alipay.UTF8).                                              <span class="comment">// 设置字符编码，不设置默认 utf-8</span></span><br><span class="line">SetSignType(alipay.RSA2).                                             <span class="comment">// 设置签名类型，不设置默认 RSA2</span></span><br><span class="line">SetReturnUrl(<span class="string">&quot;https://lzscxb.js.cool&quot;</span>).                               <span class="comment">// 设置返回URL，付款结束后跳转的url</span></span><br><span class="line">SetNotifyUrl(<span class="string">&quot;http://3n3swpx.nat.ipyingshe.com/v1/pay/alipay/notify&quot;</span>) <span class="comment">// 设置异步通知URL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动同步验签（只支持证书模式）</span></span><br><span class="line"><span class="comment">// 传入 alipayCertPublicKey_RSA2.crt 内容</span></span><br><span class="line">client.AutoVerifySign(cert.AlipayPublicContentRSA2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公钥证书模式，需要传入证书，以下两种方式二选一</span></span><br><span class="line"><span class="comment">// 证书路径</span></span><br><span class="line"><span class="comment">//err := client.SetCertSnByPath(&quot;appCertPublicKey.crt&quot;, &quot;alipayRootCert.crt&quot;, &quot;alipayCertPublicKey_RSA2.crt&quot;)</span></span><br><span class="line"><span class="comment">// 证书内容</span></span><br><span class="line">err = client.SetCertSnByContent(cert.AppPublicContent, cert.AlipayRootContent, cert.AlipayPublicContentRSA2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 BodyMap</span></span><br><span class="line">bm := <span class="built_in">make</span>(gopay.BodyMap)</span><br><span class="line">bm.Set(<span class="string">&quot;subject&quot;</span>, <span class="string">&quot;订单支付&quot;</span>). <span class="comment">// 标题</span></span><br><span class="line">Set(<span class="string">&quot;out_trade_no&quot;</span>, <span class="string">&quot;lzscxb_order_id:6666666&quot;</span>). <span class="comment">// 订单号，支付成功后会返回</span></span><br><span class="line">Set(<span class="string">&quot;total_amount&quot;</span>, <span class="string">&quot;0.01&quot;</span>).                    <span class="comment">// 订单金额</span></span><br><span class="line">Set(<span class="string">&quot;timeout_express&quot;</span>, <span class="string">&quot;2m&quot;</span>).                   <span class="comment">// 支付超时时间</span></span><br><span class="line">Set(<span class="string">&quot;product_code&quot;</span>, <span class="string">&quot;FAST_INSTANT_TRADE_PAY&quot;</span>)   <span class="comment">// 必填 具体参考文档</span></span><br><span class="line"></span><br><span class="line">aliRsp, err := client.TradePagePay(context.Background(), bm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">xlog.Error(<span class="string">&quot;err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(aliRsp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>如果出现以下情况，请尝试清空浏览器缓存或更换浏览器访问</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220307194725391.png" alt="image-20220307194725391"></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务之分布式锁</title>
      <link href="/posts/3621663789.html"/>
      <url>/posts/3621663789.html</url>
      
        <content type="html"><![CDATA[<h1 id="悲观锁和乐观锁"><a href="#悲观锁和乐观锁" class="headerlink" title="悲观锁和乐观锁"></a>悲观锁和乐观锁</h1><ul><li><p>悲观锁：一开始就认为着里会出现锁的竞争，给自己加一把锁</p><p>  ​    比如一些人为了防止犯错误，一开始就要等到时机非常成熟的时候才会行动，比如锁一样，他拿到一把锁之后才去执行，抱着一种悲观的态度。</p></li><li><p>乐观锁：不关心执行的时出现错误，如果出现问题我重新执行一次，不停的尝试</p><p>  ​    有一些人呢，他就是愿意去尝试，什么都没准备好就开始做了，失败了我重新尝试，抱着一种乐观的态度。</p></li></ul><h1 id="基于-Mysql-乐观锁"><a href="#基于-Mysql-乐观锁" class="headerlink" title="基于 Mysql 乐观锁"></a>基于 Mysql 乐观锁</h1><ul><li><p>优点</p><p>  ​    简单</p><p>  ​    不需要额外的组件 - 维护，mysql的维护比较简单 - 最合适的才是最好的。 系统的可用性</p></li><li><p>缺点</p><p>  ​    性能</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> peewee <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> inventory_srv.config <span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Inventory</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="comment"># 商品的库存表</span></span><br><span class="line">    goods = IntegerField(verbose_name=<span class="string">&quot;商品id&quot;</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    stocks = IntegerField(verbose_name=<span class="string">&quot;库存数量&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line">    version = IntegerField(verbose_name=<span class="string">&quot;版本号&quot;</span>, default=<span class="number">0</span>)  <span class="comment"># 分布式锁的乐观锁</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        database = config.DB</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sell</span>():</span><br><span class="line">    <span class="comment"># 多线程下的并发带来的数据不一致的问题</span></span><br><span class="line">    goods_list = [(<span class="number">1</span>, <span class="number">10</span>), (<span class="number">2</span>, <span class="number">20</span>), (<span class="number">3</span>, <span class="number">30</span>)]</span><br><span class="line">    <span class="keyword">with</span> config.DB.atomic() <span class="keyword">as</span> txn:</span><br><span class="line">        <span class="comment"># 超卖</span></span><br><span class="line">        <span class="keyword">for</span> goods_id, num <span class="keyword">in</span> goods_list:</span><br><span class="line">            <span class="comment"># 查询库存 如果更新失败增重复尝试</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                goods_inv = Inventory.get(Inventory.<span class="built_in">id</span>== goods_id)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;当前的版本号：<span class="subst">&#123;goods_inv.version&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;商品<span class="subst">&#123;goods_id&#125;</span> 售出 <span class="subst">&#123;num&#125;</span>件&quot;</span>)</span><br><span class="line">                <span class="keyword">import</span> time</span><br><span class="line">                <span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">                time.sleep(randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">                <span class="keyword">if</span> goods_inv.stocks &lt; num:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;商品：<span class="subst">&#123;goods_id&#125;</span> 库存不足&quot;</span>)</span><br><span class="line">                    txn.rollback()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 让数据库根据自己当前的值更新数据， 这个语句能不能处理并发的问题</span></span><br><span class="line">                    <span class="comment"># 我当时查询数据的时候版本号是 goods_inv.version</span></span><br><span class="line">                    query = Inventory.update(stocks=Inventory.stocks - num, version=Inventory.version + <span class="number">1</span>).where(</span><br><span class="line">                        Inventory.<span class="built_in">id</span> goods_id, Inventory.version == goods_inv.version)</span><br><span class="line">                    ok = query.execute()</span><br><span class="line">                    <span class="keyword">if</span> ok:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;更新成功&quot;</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;更新失败&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    config.DB.create_tables([Inventory])</span><br><span class="line"> t1 = threading.Thread(target=sell)</span><br><span class="line">    t2 = threading.Thread(target=sell)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    <span class="comment"># 演示基于数据库的乐观锁机制</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><h1 id="基于-Redis-分布式锁"><a href="#基于-Redis-分布式锁" class="headerlink" title="基于 Redis 分布式锁"></a>基于 Redis 分布式锁</h1><blockquote><p>  Python Redis驱动: <a href="https://github.com/redis/redis-py">https://github.com/redis/redis-py</a></p></blockquote><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="基本的-Redis-分布式锁"><a href="#基本的-Redis-分布式锁" class="headerlink" title="基本的 Redis 分布式锁"></a>基本的 Redis 分布式锁</h3><p>当并发很高的时候使用 <code>get();set()</code>可能会存在同时获取数据的问题，一定要使用 <code>setnx</code> 来保证数据的原子性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> peewee <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> inventory_srv.config <span class="keyword">import</span> config, server_config</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 库存表定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Inventory</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="comment"># 商品的库存表</span></span><br><span class="line">    goods = IntegerField(verbose_name=<span class="string">&quot;商品id&quot;</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    stocks = IntegerField(verbose_name=<span class="string">&quot;库存数量&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line">    version = IntegerField(verbose_name=<span class="string">&quot;版本号&quot;</span>, default=<span class="number">0</span>)  <span class="comment"># 分布式锁的乐观锁</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        database = config.DB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisLock</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key, uuid=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> uuid <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">import</span> uuid</span><br><span class="line">            uuid = uuid.uuid4()</span><br><span class="line">        self.<span class="built_in">id</span> = uuid</span><br><span class="line">        self.redis_client = redis.Redis(host=server_config.REDIS_HOST, port=server_config.REDIS_PORT)</span><br><span class="line">        self.key = <span class="string">f&quot;<span class="subst">&#123;server_config.REDIS_PREFIX[<span class="string">&#x27;inventory&#x27;</span>]&#125;</span><span class="subst">&#123;key&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">acquire</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># if not self.redis_client.get(self.key):  # 错误的示范，高并发时可能出现同时进入代码的情况，不能保证原子性</span></span><br><span class="line">            <span class="comment">#     self.redis_client.set(self.key, 1)</span></span><br><span class="line">            <span class="comment">#     break</span></span><br><span class="line">            <span class="comment"># 获取到锁</span></span><br><span class="line">            <span class="comment"># 使用 setnx 获取不到时插入数据，保证数据的原子性</span></span><br><span class="line">            <span class="comment"># if self.redis_client.setnx(self.key, 1):  # 如果 key 存在返回False，不存在设置 key 并返回 True</span></span><br><span class="line">            <span class="keyword">if</span> self.redis_client.<span class="built_in">set</span>(self.key, self.<span class="built_in">id</span>, nx=<span class="literal">True</span>, ex=<span class="number">15</span>):</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 启动一个线程去定时刷新过期时间 最好也使用lua脚本完成 - 看门狗</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 获取不到锁， 等待一秒重新获取</span></span><br><span class="line">                <span class="keyword">import</span> time</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">release</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 防止自己的锁被别人删除</span></span><br><span class="line">        <span class="comment"># 这里的存在文件，需要将代码原子化 redis 没有提供这样的接口，我们可以使用 lua 脚本让redis原子化执行</span></span><br><span class="line">        <span class="built_in">id</span> = self.redis_client.get(self.key)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;释放<span class="subst">&#123;self.key&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">id</span> <span class="keyword">is</span> <span class="keyword">not</span> self.<span class="built_in">id</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;不能删除不属于自己的出锁&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.redis_client.delete(self.key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sell</span>():</span><br><span class="line">    <span class="comment"># 多线程下的并发带来的数据不一致的问题</span></span><br><span class="line">    goods_list = [(<span class="number">1</span>, <span class="number">10</span>), (<span class="number">2</span>, <span class="number">20</span>), (<span class="number">3</span>, <span class="number">30</span>)]</span><br><span class="line">    <span class="keyword">with</span> config.DB.atomic() <span class="keyword">as</span> txn:</span><br><span class="line">        <span class="comment"># 超卖</span></span><br><span class="line">        <span class="keyword">for</span> goods_id, num <span class="keyword">in</span> goods_list:</span><br><span class="line">            lock = RedisLock(key=goods_id)</span><br><span class="line">            <span class="comment"># 查询库存 如果更新失败增重复尝试</span></span><br><span class="line">            goods_inv = Inventory.get(Inventory.<span class="built_in">id</span> == goods_id)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;商品<span class="subst">&#123;goods_id&#125;</span> 售出 <span class="subst">&#123;num&#125;</span>件&quot;</span>)</span><br><span class="line">            <span class="keyword">import</span> time</span><br><span class="line">            <span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">            time.sleep(randint(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">            <span class="keyword">if</span> goods_inv.stocks &lt; num:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;商品：<span class="subst">&#123;goods_id&#125;</span> 库存不足&quot;</span>)</span><br><span class="line">                txn.rollback()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 获取锁</span></span><br><span class="line">                lock.acquire()</span><br><span class="line">                <span class="comment"># 让数据库根据自己当前的值更新数据，</span></span><br><span class="line">                query = Inventory.update(stocks=Inventory.stocks - num).where(Inventory.<span class="built_in">id</span> == goods_id)</span><br><span class="line">                ok = query.execute()</span><br><span class="line">                <span class="keyword">if</span> ok:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;商品：<span class="subst">&#123;goods_id&#125;</span> 更新成功&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;商品：<span class="subst">&#123;goods_id&#125;</span> 更新失败&quot;</span>)</span><br><span class="line">                <span class="comment"># 释放锁</span></span><br><span class="line">                lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    config.DB.create_tables([Inventory, InventoryHistory])</span><br><span class="line"></span><br><span class="line">    t1 = threading.Thread(target=sell)</span><br><span class="line">    t2 = threading.Thread(target=sell)</span><br><span class="line">    t3 = threading.Thread(target=sell)</span><br><span class="line">    t4 = threading.Thread(target=sell)</span><br><span class="line">    t5 = threading.Thread(target=sell)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t3.start()</span><br><span class="line">    t4.start()</span><br><span class="line">    t5.start()</span><br><span class="line"></span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    t3.join()</span><br><span class="line">    t4.join()</span><br><span class="line">    t5.join()</span><br></pre></td></tr></table></figure><h3 id="python-redis-lock"><a href="#python-redis-lock" class="headerlink" title="python-redis-lock"></a>python-redis-lock</h3><blockquote><p><a href="https://github.com/ionelmc/python-redis-lock">https://github.com/ionelmc/python-redis-lock</a></p></blockquote><p>使用pip 安装或着拷贝代码<br><a href="https://github.com/ionelmc/python-redis-lock/blob/master/src/redis_lock/__init__.py">https://github.com/ionelmc/python-redis-lock/blob/master/src/redis_lock/__init__.py</a></p><p>比较简单就不演示了</p>]]></content>
      
      
      <categories>
          
          <category> Distributed </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Micro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务之gRpc负载均衡</title>
      <link href="/posts/4248709937.html"/>
      <url>/posts/4248709937.html</url>
      
        <content type="html"><![CDATA[<h1 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h1><h2 id="集中式load-balance"><a href="#集中式load-balance" class="headerlink" title="集中式load balance"></a>集中式load balance</h2><p>集中式LB方案，如下图。首先，服务的消费方和提供方不直接耦合，而是在服务消费者和服务提供者之间有一个独立的LB（LB通常是专门的硬件设备如F5，或者基于软件如LVS，HAproxy等实现）。</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220222151158046.png" alt="image-20220222151158046"></p><p>LB上有所有服务的地址映射表，通常由运维配置注册，当服务消费方调用某个目标服务时，它向LB发起请求，由LB以某种策略（比如Round-Robin）做负载均衡后将请求转发到目标服务。</p><p>LB一般具备健康检查能力，能自动摘除不健康的服务实例。</p><p>服务消费方如何发现LB呢？通常的做法是通过DNS，运维人员为服务配置一个DNS域名，这个域名指向LB。</p><p>这种方案基本可以否决，因为它有致命的缺点：所有服务调用流量都经过load balance服务器，所以load balance服务器成了系统的单点，一旦LB发生故障对整个系统的影响是灾难性的。为了解决这个问题，必然需要对这个load balance部件做分布式处理（部署多个实例，冗余，然后解决一致性问题等全家桶解决方案），但这样做会徒增非常多的复杂度。</p><h2 id="进程内load-balance"><a href="#进程内load-balance" class="headerlink" title="进程内load balance"></a>进程内load balance</h2><p>进程内load balance。将load balance的功能和算法以sdk的方式实现在客户端进程内。先看架构图：</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220222151145350.png" alt="image-20220222151145350"></p><p>可看到引入了第三方：服务注册中心。它做两件事：</p><ol><li><ol><li> 维护服务提供方的节点列表，并检测这些节点的健康度。检测的方式是：每个节点部署成功，都通知服务注册中心；然后一直和注册中心保持心跳。</li><li> 允许服务调用方注册感兴趣的事件，把服务提供方的变化情况推送到服务调用方。</li></ol></li></ol><p>这种方案下，整个load balance的过程是这样的：</p><ol><li><ol><li> 服务注册中心维护所有节点的情况。</li><li> 任何一个节点想要订阅其他服务提供方的节点列表，向服务注册中心注册。</li><li> 服务注册中心将服务提供方的列表（以长连接的方式）推送到消费方。</li><li> 消费方接收到消息后，在本地维护一份这个列表，并自己做load balance。</li></ol></li></ol><p>可见，服务注册中心充当什么角色？它是唯一一个知道整个集群内部所有的节点情况的中心。所以对它的可用性要求会非常高，这个组件可以用Zookeeper实现。</p><p>这种方案的缺点是：每个语言都要研究一套sdk，如果公司内的服务使用的语言五花八门的话，这方案的成本会很高。第二点是：后续如果要对客户库进行升级，势必要求服务调用方修改代码并重新发布，所以该方案的升级推广有不小的阻力。</p><h2 id="独立进程load-balance"><a href="#独立进程load-balance" class="headerlink" title="独立进程load balance"></a>独立进程load balance</h2><p>该方案是针对第二种方案的不足而提出的一种折中方案，原理和第二种方案基本类似，不同之处是，他将LB和服务发现功能从进程内移出来，变成主机上的一个独立进程，主机上的一个或者多个服务要访问目标服务时，他们都通过同一主机上的独立LB进程做服务发现和负载均衡。如图</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220222151119510.png" alt="image-20220222151119510"></p><p>这个方案解决了上一种方案的问题，不需要为不同语言开发客户库，LB的升级不需要服务调用方改代码。</p><p>但新引入的问题是：这个组件本身的可用性谁来维护？还要再写一个watchdog去监控这个组件？另外，多了一个环节，就多了一个出错的可能，线上出问题了，也多了一个需要排查的环节。</p><h1 id="常见的负载均衡算法"><a href="#常见的负载均衡算法" class="headerlink" title="常见的负载均衡算法"></a>常见的负载均衡算法</h1><p>在分布式系统中，多台服务器同时提供一个服务，并统一到服务配置中心进行管理，消费者通过查询服务配置中心，获取到服务到地址列表，需要选取其中一台来发起RPC远程调用。如何选择，则取决于具体的负载均衡算法，对应于不同的场景，选择的负载均衡算法也不尽相同。负载均衡算法的种类有很多种，常见的负载均衡算法包括轮询法、随机法、源地址哈希法、加权轮询法、加权随机法、最小连接法等，应根据具体的使用场景选取对应的算法。</p><h2 id="轮询（Round-Robin）法"><a href="#轮询（Round-Robin）法" class="headerlink" title="轮询（Round Robin）法"></a>轮询（Round Robin）法</h2><p>轮询很容易实现，将请求按顺序轮流分配到后台服务器上，均衡的对待每一台服务器，而不关心服务器实际的连接数和当前的系统负载。</p><h2 id="随机法"><a href="#随机法" class="headerlink" title="随机法"></a>随机法</h2><p>通过系统随机函数，根据后台服务器列表的大小值来随机选取其中一台进行访问。由概率概率统计理论可以得知，随着调用量的增大，其实际效果越来越接近于平均分配流量到后台的每一台服务器，也就是轮询法的效果。</p><h2 id="源地址哈希法"><a href="#源地址哈希法" class="headerlink" title="源地址哈希法"></a>源地址哈希法</h2><p>源地址哈希法的思想是根据服务消费者请求客户端的IP地址，通过哈希函数计算得到一个哈希值，将此哈希值和服务器列表的大小进行取模运算，得到的结果便是要访问的服务器地址的序号。采用源地址哈希法进行负载均衡，相同的IP客户端，如果服务器列表不变，将映射到同一个后台服务器进行访问。</p><h2 id="加权轮询（Weight-Round-Robin）法"><a href="#加权轮询（Weight-Round-Robin）法" class="headerlink" title="加权轮询（Weight Round Robin）法"></a>加权轮询（Weight Round Robin）法</h2><p>不同的后台服务器可能机器的配置和当前系统的负载并不相同，因此它们的抗压能力也不一样。跟配置高、负载低的机器分配更高的权重，使其能处理更多的请求，而配置低、负载高的机器，则给其分配较低的权重，降低其系统负载，加权轮询很好的处理了这一问题，并将请求按照顺序且根据权重分配给后端。</p><h2 id="加权随机（Weight-Random）法"><a href="#加权随机（Weight-Random）法" class="headerlink" title="加权随机（Weight Random）法"></a>加权随机（Weight Random）法</h2><p>加权随机法跟加权轮询法类似，根据后台服务器不同的配置和负载情况，配置不同的权重。不同的是，它是按照权重来随机选取服务器的，而非顺序。</p><h2 id="最小连接数法"><a href="#最小连接数法" class="headerlink" title="最小连接数法"></a>最小连接数法</h2><p>前面我们费尽心思来实现服务消费者请求次数分配的均衡，我们知道这样做是没错的，可以为后端的多台服务器平均分配工作量，最大程度地提高服务器的利用率，但是，实际上，请求次数的均衡并不代表负载的均衡。因此我们需要介绍最小连接数法，最小连接数法比较灵活和智能，由于后台服务器的配置不尽相同，对请求的处理有快有慢，它正是根据后端服务器当前的连接情况，动态的选取其中当前积压连接数最少的一台服务器来处理当前请求，尽可能的提高后台服务器利用率，将负载合理的分流到每一台服务器。</p><h1 id="gRpc-负载均衡"><a href="#gRpc-负载均衡" class="headerlink" title="gRpc 负载均衡"></a>gRpc 负载均衡</h1><blockquote><p><a href="https://github.com/grpc/grpc/blob/master/doc/load-balancing.md">https://github.com/grpc/grpc/blob/master/doc/load-balancing.md</a></p></blockquote><h2 id="Go-Web-使用负载均衡"><a href="#Go-Web-使用负载均衡" class="headerlink" title="Go Web 使用负载均衡"></a>Go Web 使用负载均衡</h2><blockquote><p><a href="https://github.com/mbobakov/grpc-consul-resolver">https://github.com/mbobakov/grpc-consul-resolver</a></p></blockquote><p>注册两个用户gRpc服务实例</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220222161039288.png" alt="image-20220222161039288"></p><p><strong>一定要引入</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_ <span class="string">&quot;github.com/mbobakov/grpc-consul-resolver&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;demo1/grpc_resolve/proto&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/mbobakov/grpc-consul-resolver&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := grpc.Dial(<span class="string">&quot;consul://172.17.0.1:8500/user-srv?wait=15s&quot;</span>,</span><br><span class="line">grpc.WithTransportCredentials(insecure.NewCredentials()),</span><br><span class="line">grpc.WithDefaultServiceConfig(<span class="string">`&#123;&quot;loadBalancingPolicy&quot;: &quot;round_robin&quot;&#125;`</span>),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">client := proto.NewUserClient(conn)</span><br><span class="line"><span class="comment">// 因为负载均衡实现是进程中的，必须要进程结束前发起请求才被内负载均衡</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">list, err := client.GetUserList(context.Background(), &amp;proto.PageInfo&#123;Page: <span class="number">1</span>, Limit: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(list)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>负载均衡完成</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220222161339730.png" alt="image-20220222161339730"></p>]]></content>
      
      
      <categories>
          
          <category> Distributed </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Golang Jwt 集成 Gin</title>
      <link href="/posts/419692717.html"/>
      <url>/posts/419692717.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jwt"><a href="#Jwt" class="headerlink" title="Jwt"></a>Jwt</h1><blockquote><p>Github： <a href="https://github.com/golang-jwt/jwt">https://github.com/golang-jwt/jwt</a><br>文档：<a href="https://pkg.go.dev/github.com/golang-jwt/jwt">https://pkg.go.dev/github.com/golang-jwt/jwt</a></p></blockquote><p><strong>拉取仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get https://github.com/golang-jwt/jwt</span><br></pre></td></tr></table></figure><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">&quot;WXlqEk8BJXmAjtp&quot;</span> <span class="string">//</span> <span class="string">随机生成</span></span><br></pre></td></tr></table></figure><h2 id="定义-Payload-结构体-和-逻辑代码"><a href="#定义-Payload-结构体-和-逻辑代码" class="headerlink" title="定义 Payload 结构体 和 逻辑代码"></a>定义 Payload 结构体 和 逻辑代码</h2><p><strong>request.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jwtauth</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/golang-jwt/jwt&quot;</span></span><br><span class="line"><span class="string">&quot;go.uber.org/zap&quot;</span></span><br><span class="line"><span class="string">&quot;micro-shop-api/user-web/global&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CustomClaims 自定义 Payload 信息</span></span><br><span class="line"><span class="keyword">type</span> CustomClaims <span class="keyword">struct</span> &#123;</span><br><span class="line">Id       <span class="type">uint</span>   <span class="comment">// 用户id</span></span><br><span class="line">Mobile   <span class="type">string</span> <span class="comment">// 手机号</span></span><br><span class="line">Nickname <span class="type">string</span> <span class="comment">// 用户昵称</span></span><br><span class="line">jwt.StandardClaims</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCustomClaimsDefault</span><span class="params">(id <span class="type">uint</span>, mobile <span class="type">string</span>, nickname <span class="type">string</span>)</span></span> *CustomClaims &#123;</span><br><span class="line">beforeTime := time.Now().Unix()</span><br><span class="line"><span class="keyword">return</span> &amp;CustomClaims&#123;</span><br><span class="line">Id:       id,</span><br><span class="line">Mobile:   mobile,</span><br><span class="line">Nickname: nickname,</span><br><span class="line">StandardClaims: jwt.StandardClaims&#123;</span><br><span class="line">NotBefore: beforeTime, <span class="comment">// 生效时间</span></span><br><span class="line">ExpiresAt: beforeTime + <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>, <span class="comment">// 失效时间</span></span><br><span class="line">Issuer:    <span class="string">&quot;lzscxb&quot;</span>, <span class="comment">// 机构</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> JWT <span class="keyword">struct</span> &#123;</span><br><span class="line">singKey []<span class="type">byte</span> <span class="comment">// Jwt 密钥</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">TokenExpired     = errors.New(<span class="string">&quot;Token is expired&quot;</span>)        <span class="comment">// 令牌过期</span></span><br><span class="line">TokenNotValidYet = errors.New(<span class="string">&quot;Token not active yet&quot;</span>)    <span class="comment">// 令牌未生效</span></span><br><span class="line">TokenMalformed   = errors.New(<span class="string">&quot;that&#x27;s not even a token&quot;</span>) <span class="comment">// 令牌不完整</span></span><br><span class="line">TokenInvalid     = errors.New(<span class="string">&quot;&quot;</span>)                        <span class="comment">// 无效令牌</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewJWT 返回一个JWT 实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewJWT</span><span class="params">()</span></span> *JWT &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;JWT&#123;</span><br><span class="line">singKey: []<span class="type">byte</span>(global.Config.JwtInfo.SingKey),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateToken 创建新的 Token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(j *JWT)</span></span> CreateToken(claims CustomClaims) (token <span class="type">string</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">withClaims := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)</span><br><span class="line"><span class="keyword">return</span> withClaims.SignedString(j.singKey)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ParseToken 验证 Token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(j *JWT)</span></span> ParseToken(token <span class="type">string</span>) (*CustomClaims, <span class="type">error</span>) &#123;</span><br><span class="line">withClaims, err := jwt.ParseWithClaims(token, &amp;CustomClaims&#123;&#125;, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> j.singKey, <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 获取到 Jwt ValidationError 错误类型</span></span><br><span class="line"><span class="keyword">if</span> ve, ok := err.(*jwt.ValidationError); ok &#123;</span><br><span class="line">zap.S().Infof(<span class="string">&quot;获取到 Jwt ValidationError 原：%v 错误类型:%v&quot;</span>, err, ve.Errors)</span><br><span class="line"><span class="keyword">if</span> ve.Errors&amp;jwt.ValidationErrorMalformed != <span class="number">0</span> &#123; <span class="comment">// 令牌不完整</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, TokenMalformed</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ve.Errors&amp;jwt.ValidationErrorExpired != <span class="number">0</span> &#123; <span class="comment">// 令牌过期</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, TokenExpired</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ve.Errors&amp;jwt.ValidationErrorNotValidYet != <span class="number">0</span> &#123; <span class="comment">// 令牌还未生效</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, TokenNotValidYet</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, TokenInvalid</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, TokenInvalid</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> withClaims == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, TokenInvalid</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> claims, ok := withClaims.Claims.(*CustomClaims); ok &#123; <span class="comment">// 验证成功</span></span><br><span class="line"><span class="keyword">return</span> claims, <span class="literal">nil</span></span><br><span class="line">&#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, TokenInvalid</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="生成-Token"><a href="#生成-Token" class="headerlink" title="生成 Token"></a>生成 Token</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">j := jwtauth.NewJWT()</span><br><span class="line">claims := jwtauth.NewCustomClaimsDefault(<span class="type">uint</span>(id),mobile, nickname)</span><br><span class="line">token, err := j.CreateToken(*claims)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(token)</span><br></pre></td></tr></table></figure><h2 id="中间件验证-Token"><a href="#中间件验证-Token" class="headerlink" title="中间件验证 Token"></a>中间件验证 Token</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JwtAuth</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取 header 中的 token</span></span><br><span class="line">token := c.GetHeader(<span class="string">&quot;Authorization&quot;</span>)</span><br><span class="line">j := jwtauth.NewJWT()</span><br><span class="line"><span class="comment">// 验证 token</span></span><br><span class="line">claims, err := j.ParseToken(token)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123; </span><br><span class="line">            <span class="comment">// 验证失败</span></span><br><span class="line">c.Abort() <span class="comment">// 中断，中间件中 return 不生效</span></span><br><span class="line">&#125;</span><br><span class="line">c.Set(<span class="string">&quot;uid&quot;</span>, claims.Id)</span><br><span class="line">c.Set(<span class="string">&quot;mobile&quot;</span>, claims.Mobile)</span><br><span class="line">c.Next()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用中间件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserRoute := router.Group(<span class="string">&quot;user&quot;</span>).Use(middleware.JwtAuth())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON Web Token 详解</title>
      <link href="/posts/3077708436.html"/>
      <url>/posts/3077708436.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jwt-是什么？"><a href="#Jwt-是什么？" class="headerlink" title="Jwt 是什么？"></a>Jwt 是什么？</h1><p>JSON Web Token (JWT)是一个开放标准(RFC 7519)，它定义了一种紧凑的、自包含的方式，用于作为JSON对象在各方之间安全地传输信息。该信息可以被验证和信任，因为它是数字签名的。</p><h1 id="什么时候应该用Jwt"><a href="#什么时候应该用Jwt" class="headerlink" title="什么时候应该用Jwt"></a>什么时候应该用Jwt</h1><p><strong>下列场景中使用JSON Web Token是很有用的：</strong></p><p><strong>Authorization (授权) :</strong> 这是使用JWT的最常见场景。一旦用户登录，后续每个请求都将包含JWT，允许用户访问该令牌允许的路由、服务和资源。单点登录是现在广泛使用的JWT的一个特性，因为它的开销很小，并且可以轻松地跨域使用。</p><p><strong>Information Exchange (信息交换) :</strong> 对于安全的在各方之间传输信息而言，JSON Web Tokens无疑是一种很好的方式。因为JWTs可以被签名，例如，用公钥/私钥对，你可以确定发送人就是它们所说的那个人。另外，由于签名是使用头和有效负载计算的，您还可以验证内容没有被篡改。</p><h1 id="Jwt-的结构是什么样的"><a href="#Jwt-的结构是什么样的" class="headerlink" title="Jwt 的结构是什么样的"></a>Jwt 的结构是什么样的</h1><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/1600657255888-e5bde279-5581-4b0f-b308-33bc9b445d5e.png" alt="image.png"></p><p>JSON Web Token由三部分组成，它们之间用圆点(.)连接。这三部分分别是：</p><ul><li>  Header</li><li>  Payload</li><li>  Signature</li></ul><p>因此，一个典型的JWT看起来是这个样子的：</p><blockquote><p>  xxxxx.yyyyy.zzzzz</p></blockquote><p>接下来，具体看一下每一部分：</p><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>header典型的由两部分组成：token的类型（“JWT”）和算法名称（比如：HMAC SHA256或者RSA等等）。</p><p>例如：<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/1600657280191-a926f50d-ef7c-4ec2-b88d-e4da6c4953d8.png" alt="image"></p><p>然后，用Base64对这个JSON编码就得到JWT的第一部分</p><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>JWT的第二部分是payload，它包含声明（要求）。声明是关于实体(通常是用户)和其他数据的声明。声明有三种类型: registered, public 和 private。</p><p><strong>Registered claims :</strong> 这里有一组预定义的声明，它们不是强制的，但是推荐。比如：iss (issuer), exp (expiration time), sub (subject), aud (audience)等。</p><p><strong>Public claims :</strong> 可以随意定义。</p><p><strong>Private claims :</strong> 用于在同意使用它们的各方之间共享信息，并且不是注册的或公开的声明。</p><p>下面是一个例子：<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/1600657280217-5916e359-a52e-438e-ba9b-f13032054db6.png" alt="image"></p><p>对payload进行Base64编码就得到JWT的第二部分</p><blockquote><p>  注意，不要在JWT的payload或header中放置敏感信息，除非它们是加密的。</p></blockquote><h2 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h2><p>为了得到签名部分，你必须有编码过的header、编码过的payload、一个秘钥，签名算法是header中指定的那个，然对它们签名即可。</p><p>例如：</p><blockquote><p>  HMACSHA256(base64UrlEncode(header) + “.” + base64UrlEncode(payload), secret)</p></blockquote><p>签名是用于验证消息在传递过程中有没有被更改，并且，对于使用私钥签名的token，它还可以验证JWT的发送方是否为它所称的发送方。</p><p>看一张<a href="https://jwt.io/">官网</a>的图就明白了：</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/1600657319902-ab12f7cd-cb45-48ae-983b-ea0461d7d757.png" alt="image.png"></p><h1 id="Jwt-是如何工作的"><a href="#Jwt-是如何工作的" class="headerlink" title="Jwt 是如何工作的"></a>Jwt 是如何工作的</h1><p>在认证的时候，当用户用他们的凭证成功登录以后，一个JSON Web Token将会被返回。此后，token就是用户凭证了，你必须非常小心以防止出现安全问题。一般而言，你保存令牌的时候不应该超过你所需要它的时间。</p><p>无论何时用户想要访问受保护的路由或者资源的时候，用户代理（通常是浏览器）都应该带上JWT，典型的，通常放在Authorization header中，用Bearer schema。</p><p>header应该看起来是这样的：</p><blockquote><p>  Authorization: Bearer</p></blockquote><p>服务器上的受保护的路由将会检查Authorization header中的JWT是否有效，如果有效，则用户可以访问受保护的资源。如果JWT包含足够多的必需的数据，那么就可以减少对某些操作的数据库查询的需要，尽管可能并不总是如此。</p><p>如果token是在授权头（Authorization header）中发送的，那么跨源资源共享(CORS)将不会成为问题，因为它不使用cookie。</p><p>下面这张图显示了如何获取JWT以及使用它来访问APIs或者资源：</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/1600657375506-8ae6b4b0-2f15-46ff-951c-2033ab508464.png" alt="image.png"></p><ul><li>  应用（或者客户端）想授权服务器请求授权。例如，如果用授权码流程的话，就是/oauth/authorize</li><li>  当授权被许可以后，授权服务器返回一个access token给应用</li><li>  应用使用access token访问受保护的资源（比如：API）</li></ul><h1 id="基于Token的身份认证-与-基于服务器的身份认证"><a href="#基于Token的身份认证-与-基于服务器的身份认证" class="headerlink" title="基于Token的身份认证 与 基于服务器的身份认证"></a>基于Token的身份认证 与 基于服务器的身份认证</h1><h2 id="基于服务器的身份认证"><a href="#基于服务器的身份认证" class="headerlink" title="基于服务器的身份认证"></a>基于服务器的身份认证</h2><p>在讨论基于Token的身份认证是如何工作的以及它的好处之前，我们先来看一下以前我们是怎么做的：</p><p>HTTP协议是无状态的，也就是说，如果我们已经认证了一个用户，那么他下一次请求的时候，服务器不知道我是谁，我们必须再次认证</p><p>传统的做法是将已经认证过的用户信息存储在服务器上，比如Session。用户下次请求的时候带着Session ID，然后服务器以此检查用户是否认证过。</p><p>这种基于服务器的身份认证方式存在一些问题：</p><p><strong>Sessions :</strong> 每次用户认证通过以后，服务器需要创建一条记录保存用户信息，通常是在内存中，随着认证通过的用户越来越多，服务器的在这里的开销就会越来越大。</p><p><strong>Scalability :</strong> 由于Session是在内存中的，这就带来一些扩展性的问题。</p><p><strong>CORS :</strong> 当我们想要扩展我们的应用，让我们的数据被多个移动设备使用时，我们必须考虑跨资源共享问题。当使用AJAX调用从另一个域名下获取资源时，我们可能会遇到禁止请求的问题。</p><p><strong>CSRF :</strong> 用户很容易受到CSRF攻击。</p><h2 id="JWT与Session的差异"><a href="#JWT与Session的差异" class="headerlink" title="JWT与Session的差异"></a>JWT与Session的差异</h2><p>相同点是，它们都是存储用户信息；然而，Session是在服务器端的，而JWT是在客户端的。</p><p>Session方式存储用户信息的最大问题在于要占用大量服务器内存，增加服务器的开销。</p><p><strong>而JWT方式将用户状态分散到了客户端中，可以明显减轻服务端的内存压力。</strong></p><p>Session的状态是存储在服务器端，客户端只有session id；而Token的状态是存储在客户端。</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/1600657412534-490e62c9-7d00-4a99-9deb-39a37c1ba740.png" alt="image.png"></p><h2 id="基于Token的身份认证是如何工作的"><a href="#基于Token的身份认证是如何工作的" class="headerlink" title="基于Token的身份认证是如何工作的"></a>基于Token的身份认证是如何工作的</h2><p>基于Token的身份认证是无状态的，服务器或者Session中不会存储任何用户信息。</p><blockquote><p>  没有会话信息意味着应用程序可以根据需要扩展和添加更多的机器，而不必担心用户登录的位置。</p></blockquote><p>虽然这一实现可能会有所不同，但其主要流程如下：</p><ul><li><ul><li>  用户携带用户名和密码请求访问</li><li>  服务器校验用户凭据</li><li>  应用提供一个token给客户端</li><li>  客户端存储token，并且在随后的每一次请求中都带着它</li><li>  服务器校验token并返回数据</li></ul></li></ul><p>注意：</p><ul><li><ul><li>  每一次请求都需要token</li><li>  Token应该放在请求header中</li><li>  我们还需要将服务器设置为接受来自所有域的请求，用<code>Access-Control-Allow-Origin: *</code></li></ul></li></ul><h2 id="用Token的好处"><a href="#用Token的好处" class="headerlink" title="用Token的好处**"></a>用Token的好处**</h2><p><strong>无状态和可扩展性：</strong>Tokens存储在客户端。完全无状态，可扩展。我们的负载均衡器可以将用户传递到任意服务器，因为在任何地方都没有状态或会话信息。</p><p><strong>安全：</strong>Token不是Cookie。（The token, not a cookie.）每次请求的时候Token都会被发送。而且，由于没有Cookie被发送，还有助于防止CSRF攻击。即使在你的实现中将token存储到客户端的Cookie中，这个Cookie也只是一种存储机制，而非身份认证机制。没有基于会话的信息可以操作，因为我们没有会话!</p><p>还有一点，token在一段时间以后会过期，这个时候用户需要重新登录。这有助于我们保持安全。还有一个概念叫token撤销，它允许我们根据相同的授权许可使特定的token甚至一组token无效。</p><h2 id="JWT与OAuth的区别"><a href="#JWT与OAuth的区别" class="headerlink" title="JWT与OAuth的区别"></a>JWT与OAuth的区别</h2><ul><li><ul><li>  OAuth2是一种授权框架 ，JWT是一种认证协议</li><li>  无论使用哪种方式切记用HTTPS来保证数据的安全性</li><li>  OAuth2用在使用第三方账号登录的情况(比如使用weibo, qq, github登录某个app)，而JWT是用在前后端分离, 需要简单的对后台API进行保护时使用。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gRPC Golang Python优雅中断服务</title>
      <link href="/posts/4202137968.html"/>
      <url>/posts/4202137968.html</url>
      
        <content type="html"><![CDATA[<h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将服务启动放入协程中，当接收到终止信号后，主进程销毁，协称也会随着销毁</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">zap.S().Infof(<span class="string">&quot;%s 服务启动！ http://%s:%d&quot;</span>, global.Config.Name, global.Config.Host, global.Config.Port)</span><br><span class="line"><span class="keyword">if</span> err := r.Run(fmt.Sprintf(<span class="string">&quot;:%d&quot;</span>, global.Config.Port)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">zap.S().Panicf(<span class="string">&quot;服务启动失败, port:%d,err:%s&quot;</span>, global.Config.Port, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册服务</span></span><br><span class="line">registerClient := consul.NewRegistryClient(global.Config.Consul.Host, global.Config.Consul.Port)</span><br><span class="line">sc := global.Config</span><br><span class="line">serviceId := fmt.Sprintf(<span class="string">&quot;%s&quot;</span>, uuid.NewV4())</span><br><span class="line">err := registerClient.Register(sc.Host, sc.Port, sc.Name, serviceId, sc.Consul.Tags)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">zap.S().Fatalw(<span class="string">&quot;服务注册失败&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">zap.S().Infow(<span class="string">&quot;服务注册成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优雅的退出程序</span></span><br><span class="line">quit := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal)</span><br><span class="line">signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)</span><br><span class="line">&lt;-quit</span><br><span class="line">zap.S().Infow(<span class="string">&quot;服务注销中...&quot;</span>)</span><br><span class="line"><span class="comment">// 等待信号，如果接受到信号执行以下内容</span></span><br><span class="line">err = registerClient.DeRegister(serviceId)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">zap.S().Fatalw(<span class="string">&quot;服务注销失败&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">zap.S().Infow(<span class="string">&quot;服务注销成功&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> grpc</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">from</span> concurrent <span class="keyword">import</span> futures</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为在终端上运行会找不到根目录所以需要指明项目根目录</span></span><br><span class="line">BASE_PATH = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))</span><br><span class="line">sys.path.insert(<span class="number">0</span>, BASE_PATH)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> user_srv.proto <span class="keyword">import</span> user_pb2, user_pb2_grpc</span><br><span class="line"><span class="keyword">from</span> user_srv.handler.user <span class="keyword">import</span> UserService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理中断函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_exit</span>(<span class="params">signal, frame</span>):</span><br><span class="line">    logger.info(<span class="string">&quot;grpc server exit&quot;</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 服务注销逻辑.......</span></span><br><span class="line">    </span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">serve</span>():</span><br><span class="line">    logger.add(<span class="string">&quot;logs/user_srv_&#123;time&#125;.log&quot;</span>)</span><br><span class="line">    <span class="comment"># 多线程启动</span></span><br><span class="line">    server = grpc.server(futures.ThreadPoolExecutor(max_workers=<span class="number">10</span>))</span><br><span class="line">    <span class="comment"># 注册服务</span></span><br><span class="line">    user_pb2_grpc.add_UserServicer_to_server(UserService(), server)</span><br><span class="line">    <span class="comment"># 端口</span></span><br><span class="line">    server.add_insecure_port(<span class="string">&quot;[::]:50051&quot;</span>)</span><br><span class="line">    <span class="comment"># 监听退出信号</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        windows下支持的信号是有限的：</span></span><br><span class="line"><span class="string">            SIGINT ctrl+C终端</span></span><br><span class="line"><span class="string">            SIGTERM kill发出的软件终止</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    signal.signal(signal.SIGINT, on_exit)</span><br><span class="line">    signal.signal(signal.SIGTERM, on_exit)</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">f&quot;启动服务：http://127.0.0.1:50051&quot;</span>)</span><br><span class="line">    server.start()</span><br><span class="line">    server.wait_for_termination()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    logging.basicConfig()</span><br><span class="line">    serve()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Distributed </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gRPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang gRPC的四种数据流</title>
      <link href="/posts/2249663406.html"/>
      <url>/posts/2249663406.html</url>
      
        <content type="html"><![CDATA[<h1 id="四种数据流"><a href="#四种数据流" class="headerlink" title="四种数据流"></a>四种数据流</h1><ol><li>简单模式<br>这种模式最为传统，即客户端发起一次请求，服务端响应一个数据</li><li>服务器数据流<br>这种模式是客户端发起一次请求，服务端返回一段连续的数据流。典型的例子是客户端向服务端发送一个股票代码，服务端就把该股票的实时数据源源不断的返回给客户端。</li><li>客户端数据流<br>与服务端数据流模式相反，这次是客户端源源不断的向服务端发送数据流，而在发送结束后，由服务端返回一个响应。典型的例子是物联网终端向服务器报送数据。</li><li>双向数据流<br>顾名思义，这是客户端和服务端都可以向对方发送数据流，这个时候双方的数据可以同时互相发送，也就是可以实现实时交互。典型的例子是聊天机器人。</li></ol><p>这里只会讲 grpc 中的 *    stream*，srteam 顾名思义 就是 一种 流，可以源源不断的推送 数据，很适合 传输一些大数据，或者 服务端 和 客户端 长时间 数据交互，比如 客户端 可以向 服务端 订阅 一个数据，服务端 就 可以利用 stream ，源源不断地 推送数据。</p><h1 id="proto"><a href="#proto" class="headerlink" title="proto"></a>proto</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">&quot;/.;proto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">service </span><span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="comment">// 服务端流模式</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> GetStream(StreamRequestData) <span class="keyword">returns</span> (stream StreamResponseData)</span>;</span><br><span class="line">  <span class="comment">// 客户端流模式</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> PutStream(stream StreamRequestData) <span class="keyword">returns</span> (StreamResponseData)</span>;</span><br><span class="line">  <span class="comment">// 双向流模式</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> AllStream(stream StreamRequestData) <span class="keyword">returns</span> (stream StreamResponseData)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">StreamRequestData</span> &#123;</span><br><span class="line">  <span class="type">string</span> data = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">StreamResponseData</span>&#123;</span><br><span class="line">  <span class="type">string</span> data = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h2><ul><li>go<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc -I . stream.proto --go_out=plugins=grpc:.</span><br></pre></td></tr></table></figure></li><li>python <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m grpc_tools.protoc --python_out=. --grpc_python_out=. -I.  stream.proto</span><br></pre></td></tr></table></figure></li></ul><h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;demo1/grpc_stream/proto&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ADDRESS = <span class="string">&quot;localhost:50051&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须实现 proto 中定义的所有方法</span></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器数据流模式 服务端不断的发送数据给客户端</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> GetStream(request *proto.StreamRequestData, stream proto.Greeter_GetStreamServer) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="comment">// 不断的返回时间戳</span></span><br><span class="line">_ = stream.Send(&amp;proto.StreamResponseData&#123;</span><br><span class="line">Data: fmt.Sprintf(request.Data+<span class="string">&quot;: %v&quot;</span>, time.Now().Unix()),</span><br><span class="line">&#125;)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端流模式 客户端不断给服务端发送数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> PutStream(stream proto.Greeter_PutStreamServer) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">r, err := stream.Recv()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;EOF&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;客户端流模式:&quot;</span> + r.Data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> AllStream(stream proto.Greeter_AllStreamServer) <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// 因为发送和接收数据是并行的，不能因为接受或发送数据阻塞，所以用到协程</span></span><br><span class="line">wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"><span class="comment">//接受数据</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">data, err := stream.Recv()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;EOF&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;接收到客户端数据：&quot;</span> + data.Data)</span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">err := stream.Send(&amp;proto.StreamResponseData&#123;</span><br><span class="line">Data: fmt.Sprintf(<span class="string">&quot;我是服务端%d！&quot;</span>, i),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">listener, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, ADDRESS)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;failed Listener:&quot;</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line">g := grpc.NewServer()</span><br><span class="line">proto.RegisterGreeterServer(g, &amp;Server&#123;&#125;)</span><br><span class="line">err = g.Serve(listener)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;demo1/grpc_stream/proto&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ADDRESS = <span class="string">&quot;localhost:50051&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端流模式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetStream</span><span class="params">(c proto.GreeterClient)</span></span> &#123;</span><br><span class="line">rsp, _ := c.GetStream(context.Background(), &amp;proto.StreamRequestData&#123;Data: <span class="string">&quot;lzscxb&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 不断的接收数据</span></span><br><span class="line">r, err := rsp.Recv()</span><br><span class="line"><span class="comment">// 当没有数据时结束</span></span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;EOF&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(r.Data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端流模式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PutStream</span><span class="params">(c proto.GreeterClient)</span></span> &#123;</span><br><span class="line">rsp, _ := c.PutStream(context.Background())</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">_ = rsp.Send(&amp;proto.StreamRequestData&#123;</span><br><span class="line">Data: fmt.Sprintf(<span class="string">&quot;%v&quot;</span>, time.Now().Unix()),</span><br><span class="line">&#125;)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭发送</span></span><br><span class="line">_ = rsp.CloseSend()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向数据流模式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AllStream</span><span class="params">(c proto.GreeterClient)</span></span> &#123;</span><br><span class="line">conn, err := c.AllStream(context.Background())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;the connect failed! &quot;</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line">wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 接受数据</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">r, err := conn.Recv()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;EOF&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;收到服务器发送数据：&quot;</span> + r.Data)</span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">err = conn.Send(&amp;proto.StreamRequestData&#123;</span><br><span class="line">Data: fmt.Sprintf(<span class="string">&quot;我是客户端%v！&quot;</span>, i),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">_ = conn.CloseSend()</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := grpc.Dial(ADDRESS, grpc.WithTransportCredentials(insecure.NewCredentials()))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;the connect failed! &quot;</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">c := proto.NewGreeterClient(conn)</span><br><span class="line">GetStream(c)</span><br><span class="line">PutStream(c)</span><br><span class="line">AllStream(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220127162356072.png" alt="image-20220127162356072"></p>]]></content>
      
      
      <categories>
          
          <category> Distributed </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gRPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang gRPC开发快速入门</title>
      <link href="/posts/2093417083.html"/>
      <url>/posts/2093417083.html</url>
      
        <content type="html"><![CDATA[<h1 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h1><p><a href="https://github.com/protocolbuffers/protobuf/releases">https://github.com/protocolbuffers/protobuf/releases</a><br>对应系统下载即可</p><ul><li>protoc-3.xx.0-win64.zip</li><li>protoc-3.xx.0-linux-x86_64.zip</li></ul><p><strong>注意：protoc的版本需要和golang/protobuf保持一致 （尽量自己去下载最新的版本）</strong></p><p>下载完成后解压后记得将路径添加到环境变量中</p><h1 id="下载go的依赖包"><a href="#下载go的依赖包" class="headerlink" title="下载go的依赖包"></a>下载go的依赖包</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure><h1 id="proto文件"><a href="#proto文件" class="headerlink" title="proto文件"></a>proto文件</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">&quot;/.;proto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">service </span><span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> SayHello (HelloRequest) <span class="keyword">returns</span> (HelloReply)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloRequest</span> &#123;</span><br><span class="line">  <span class="type">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloReply</span> &#123;</span><br><span class="line">  <span class="type">string</span> message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成go文件"><a href="#生成go文件" class="headerlink" title="生成go文件"></a>生成go文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc -I . goods.proto --go_out=plugins=grpc:.</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220119003211761.png" alt="image-20220119003211761"></p><h1 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;demo1/grpc_start/proto&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数必须一致</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> SayHello(ctx context.Context, request *proto.HelloRequest) (*proto.HelloReply, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;proto.HelloReply&#123;</span><br><span class="line">Message: <span class="string">&quot;hello &quot;</span> + request.Name,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line">g := grpc.NewServer()</span><br><span class="line"><span class="comment">// 注册服务</span></span><br><span class="line">proto.RegisterGreeterServer(g, &amp;Server&#123;&#125;)</span><br><span class="line">listener, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:8080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;failed Listen:&quot;</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line">err = g.Serve(listener)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;failed to start grpc:&quot;</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;demo1/grpc_start/proto&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := grpc.Dial(<span class="string">&quot;localhost:8080&quot;</span>, grpc.WithInsecure())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">c := proto.NewGreeterClient(conn)</span><br><span class="line">r, err := c.SayHello(context.Background(), &amp;proto.HelloRequest&#123;Name: <span class="string">&quot;lzscxb&quot;</span>&#125;)</span><br><span class="line">fmt.Println(r.Message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220119003352585.png" alt="image-20220119003352585"></p>]]></content>
      
      
      <categories>
          
          <category> Distributed </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gRPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux Timeshift系统备份与还原</title>
      <link href="/posts/826509507.html"/>
      <url>/posts/826509507.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装-timeshif"><a href="#安装-timeshif" class="headerlink" title="安装 timeshif"></a>安装 timeshif</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -s timeshif</span><br></pre></td></tr></table></figure><h1 id="备份设置"><a href="#备份设置" class="headerlink" title="备份设置"></a>备份设置</h1><h2 id="选择快照类型"><a href="#选择快照类型" class="headerlink" title="选择快照类型"></a>选择快照类型</h2><blockquote><p>此处选择【RSYNC】</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210524220736339-661009589.png" alt="image"></p><h2 id="选择储存位置"><a href="#选择储存位置" class="headerlink" title="选择储存位置"></a>选择储存位置</h2><blockquote><p>每台设备安装分区不一样，大家安装实际情况选择，一般选择比较大的空间存储，并且最好是机械，这样不容易损坏</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210524221142456-179728810.png" alt="image"></p><h2 id="设置计划备份"><a href="#设置计划备份" class="headerlink" title="设置计划备份"></a>设置计划备份</h2><blockquote><p>可按自己硬盘大小设置合适的间隔时间</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210524221437571-517262813.png" alt="image"></p><h1 id="系统恢复"><a href="#系统恢复" class="headerlink" title="系统恢复"></a>系统恢复</h1><h2 id="可视化恢复-可进入系统"><a href="#可视化恢复-可进入系统" class="headerlink" title="可视化恢复(可进入系统)"></a>可视化恢复(可进入系统)</h2><blockquote><p>如果此时还能够进入系统，直接打开 Timeshift软件进行还原</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210524220919372-1849238983.png" alt="image"></p><h2 id="命令行恢复-系统崩溃-可进入命令行"><a href="#命令行恢复-系统崩溃-可进入命令行" class="headerlink" title="命令行恢复(系统崩溃,可进入命令行)"></a>命令行恢复(系统崩溃,可进入命令行)</h2><blockquote><p>一般系统崩溃后不能进入桌面，但是能够进入登录界面，现象就是在登录界面输入密码后不会进入桌面，那么就要通过命令行的方式进行还原。</p></blockquote><ol><li>通过Ctrl+Alt+F1（一般是F1-F6都可）进入tty终端</li><li>输入用户和密码登录</li><li>查看可还原节点列表<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo timeshift --list</span><br></pre></td></tr></table></figure>结果为：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sudo timeshift --list                                               1 ✘  22:19:03   </span><br><span class="line"></span><br><span class="line">/dev/nvme0n1p6 is mounted at: /run/timeshift/backup, options: rw,relatime</span><br><span class="line"></span><br><span class="line">Device : /dev/nvme0n1p6</span><br><span class="line">UUID   : c16a9a25-22e4-4438-98ce-b3210ceaf18a</span><br><span class="line">Path   : /run/timeshift/backup</span><br><span class="line">Mode   : RSYNC</span><br><span class="line">Status : OK</span><br><span class="line">1 snapshots, 32.7 GB free</span><br><span class="line"></span><br><span class="line">Num     Name                 Tags  Description  </span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">0    &gt;  2021-05-22_11-00-01  W </span><br><span class="line">1    &gt;  2021-05-23_11-00-01  W </span><br></pre></td></tr></table></figure></li><li>选择节点还原数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo timeshift --restore --snapshot &#x27;2019-07-16_16-35-42&#x27; --skip-grub</span><br></pre></td></tr></table></figure><blockquote><p>在输出的内容中依次输入【Enter】键和【y】键。<br>–skip-grub 选项为跳过grub安装，一般来说grub不需要重新安装，除非bios启动无法找到正确的grub启动项，才需要安装。</p></blockquote></li></ol><h2 id="ArchLinux-Live-CD恢复-无法进入系统"><a href="#ArchLinux-Live-CD恢复-无法进入系统" class="headerlink" title="ArchLinux Live CD恢复(无法进入系统)"></a>ArchLinux Live CD恢复(无法进入系统)</h2><blockquote><p>无法进入系统，通过U盘启动系统</p></blockquote><ol><li>制作 Archlinux 启动盘</li><li>进入live系统</li><li>安装timeshift</li><li>安装上面《命令行恢复(系统崩溃,可进入命令行)》章节进行恢复</li></ol><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="恢复完成后桌面无法加载程序快捷方式"><a href="#恢复完成后桌面无法加载程序快捷方式" class="headerlink" title="恢复完成后桌面无法加载程序快捷方式"></a>恢复完成后桌面无法加载程序快捷方式</h2><blockquote><p>执行更新系统即可恢复</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -Syuu</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+Hexo个人博客搭建：快速建站</title>
      <link href="/posts/961d0026.html"/>
      <url>/posts/961d0026.html</url>
      
        <content type="html"><![CDATA[<h1 id="软件依赖"><a href="#软件依赖" class="headerlink" title="软件依赖"></a>软件依赖</h1><ul><li>Node.js   (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li>git</li></ul><h1 id="创建-Github-Page"><a href="#创建-Github-Page" class="headerlink" title="创建 Github Page"></a>创建 Github Page</h1><p>创建一个名称为 <code>username.github.io</code> 的存储库<br><a href="https://github.com/new">https://github.com/new</a><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220112214252824.png" alt="image-20220112214252824"></p><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><blockquote><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p></blockquote><h2 id="Hexo-Cli-工具"><a href="#Hexo-Cli-工具" class="headerlink" title="Hexo Cli 工具"></a>Hexo Cli 工具</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>初始化项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><blockquote><p>网站的 配置 信息，您可以在此配置大部分的参数<br>具体查看 <a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a></p></blockquote><h2 id="Butterfly-主题"><a href="#Butterfly-主题" class="headerlink" title="Butterfly 主题"></a>Butterfly 主题</h2><blockquote><p><a href="https://github.com/jerryc127/hexo-theme-butterfly/blob/dev/README_CN.md">https://github.com/jerryc127/hexo-theme-butterfly/blob/dev/README_CN.md</a></p></blockquote><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><ol><li>在博客根目录安装主题<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure></li><li>安装pug以及stylus的渲染器<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li>应用主题<br>修改hexo配置文件_config.yml，把主题改为Butterfly<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><ol><li>添加配置文件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp themes/butterfly/_config.yml _config.butterfly.yml</span><br></pre></td></tr></table></figure><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2></li><li>生成静态文件并部署<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li><li>启动本地服务<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>访问 <a href="http://localhost:4000/">http://localhost:4000/</a><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20220111231638210-1103195162.png" alt="image"><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20220112155543398-1392583106.png" alt="image"></li></ol><h2 id="部署到-Github-Pages"><a href="#部署到-Github-Pages" class="headerlink" title="部署到 Github Pages"></a>部署到 Github Pages</h2><ol><li>配置 Github SSH<br>生成ssh密钥文件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t</span><br></pre></td></tr></table></figure>然后直接三个回车即可，默认不需要设置密码<br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将生成的内容复制</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220112214432005.png" alt="image-20220112214432005"></p><ol start="2"><li><p>安装一键部署工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>在 _config.yml（如果有已存在的请删除）添加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:lzscxb/lzscxb.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-page</span></span><br></pre></td></tr></table></figure></li><li><p>部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+Hexo个人博客搭建：SEO 优化及站点被搜索引擎收录设置</title>
      <link href="/posts/3627051870.html"/>
      <url>/posts/3627051870.html</url>
      
        <content type="html"><![CDATA[<p><strong>必须要有自己的域名</strong></p><h1 id="网站优化"><a href="#网站优化" class="headerlink" title="网站优化"></a>网站优化</h1><p>想要收索引擎重视，就得先对自己网站或者博客进行优化、如：标题标签、Meta描述、Meta关键字、XML网站地图、Robots.txt、网站图标、自定义404页面、加载时间(速度)、以及网站结构</p><h2 id="文章永久链接"><a href="#文章永久链接" class="headerlink" title="文章永久链接"></a>文章永久链接</h2><blockquote><p><a href="https://github.com/rozbo/hexo-abbrlink">https://github.com/rozbo/hexo-abbrlink</a></p></blockquote><p>这样你修改文件名、文章名称或者日期后，文章链接不会发生变化</p><p>生成完后，原<code>md</code>文件的Front-matter 内会增加<code>abbrlink</code> 字段，值为生成的ID 。</p><p>这个字段确保了在我们修改文件名或标题之后而不会改变链接地址。</p><p>将插件添加到 Hexo：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>修改 config.yml 文件中的永久链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">permalink: posts/:abbrlink.html</span><br><span class="line"># or  permalink: posts/:abbrlink/ </span><br><span class="line"></span><br><span class="line">abbrlink:</span><br><span class="line">    alg: crc32   #算法： crc16(default) and crc32</span><br><span class="line">    rep: dec #  dec数字 hex哈希串</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">https://post.zz173.com/posts/66c8.html</span><br><span class="line"></span><br><span class="line">crc16 &amp; dec</span><br><span class="line">https://post.zz173.com/posts/65535.html</span><br><span class="line">crc32 &amp; hex</span><br><span class="line">https://post.zz173.com/posts/8ddf18fb.html</span><br><span class="line"></span><br><span class="line">crc32 &amp; dec</span><br><span class="line">https://post.zz173.com/posts/1690090958.html</span><br></pre></td></tr></table></figure><h2 id="Head-头部优化"><a href="#Head-头部优化" class="headerlink" title="Head 头部优化"></a>Head 头部优化</h2><p>修改<code>_config.yml</code>的关键字配置<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220117135018965.png" alt="image-20220117135018965"></p><h1 id="hexo-filter-nofollow-插件"><a href="#hexo-filter-nofollow-插件" class="headerlink" title="hexo-filter-nofollow 插件"></a>hexo-filter-nofollow 插件</h1><blockquote><p><a href="https://github.com/hexojs/hexo-filter-nofollow">https://github.com/hexojs/hexo-filter-nofollow</a></p></blockquote><p>为网站使用到的所有外链添加rel=”noopener external nofollow noreferrer”,可有效地加强网站SEO和防止权重流失</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-nofollow --save</span><br></pre></td></tr></table></figure><p>_config.yml  中修改配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nofollow:</span><br><span class="line">  enable: true</span><br><span class="line">  field: site</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;exclude1.com&#x27;</span><br><span class="line">    - &#x27;exclude2.com&#x27;</span><br></pre></td></tr></table></figure><h3 id="集成百度分析"><a href="#集成百度分析" class="headerlink" title="集成百度分析"></a>集成百度分析</h3><ol><li><p>注册百度统计，新增自己的网站，在百度统计-管理-代码管理-代码获取中找到以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">hm.src = &quot;https://hm.baidu.com/hm.js?c0b27e00db8b5ba6c61a2341566b61a1&quot;;</span><br></pre></td></tr></table></figure><p>其中<code>c0b27e00db8b5ba6c61a2341566b61a1</code>便是我的百度分析的key，大家以自己的为准</p></li><li><p>_config_butterfly.yml中修改配置key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">YAML</span><br><span class="line"># Baidu Analytics</span><br><span class="line"># https://tongji.baidu.com/web/welcome/login</span><br><span class="line">baidu_analytics: c0b27e00db8b5ba6c61a2341566b61a1</span><br></pre></td></tr></table></figure></li><li><p>此时生成的静态网页中查看源代码可以看到以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JAVASCRIPT</span><br><span class="line">(function() &#123;</span><br><span class="line">  var hm = document.createElement(&quot;script&quot;);</span><br><span class="line">  hm.src = &quot;https://hm.baidu.com/hm.js?c0b27e00db8b5ba6c61a2341566b61a1&quot;;</span><br><span class="line">  var s = document.getElementsByTagName(&quot;script&quot;)[0]; </span><br><span class="line">  s.parentNode.insertBefore(hm, s);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>后续可以在百度统计里面看到自己网站的流量报告<br>菜单坐标： 百度统计-基础报告</p></li></ol><h1 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h1><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220128004024779.png" alt="image-20220128004024779"></p><h2 id="链接提交方式"><a href="#链接提交方式" class="headerlink" title="链接提交方式"></a>链接提交方式</h2><ul><li>手动提交：一次性提交链接给百度，可以使用此种方式。</li><li>自动提交（虽然这种方式各有千秋，但是百度推荐全用上，全面一点！）：<ol><li>主动推送（实时）：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。</li><li>自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。</li><li>sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。</li></ol></li></ul><h2 id="验证站点"><a href="#验证站点" class="headerlink" title="验证站点"></a>验证站点</h2><p><a href="https://ziyuan.baidu.com/site/index">https://ziyuan.baidu.com/site/index</a></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220128003738272.png" alt="image-20220128003738272"></p><p>选择HTML验证</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220113230825020.png" alt="image-20220113230825020"></p><p><code>_config.butterfly.yml</code>中添加复制的内容</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220113230942470.png" alt="image-20220113230942470"></p><p><strong>验证成功</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220113231019044.png" alt="image-20220113231019044"></p><h2 id="提交链接"><a href="#提交链接" class="headerlink" title="提交链接"></a>提交链接</h2><p>添加插件hexo-baidu-url-submit</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><p>获取Token<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220113231750742.png" alt="image-20220113231750742"></p><h2 id="配置-百度主动推送"><a href="#配置-百度主动推送" class="headerlink" title="配置 百度主动推送"></a>配置 百度主动推送</h2><p>同样在根目录下，把以下内容配置到<code>_config.yml</code> 文件中，注意是博客的根目录噢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 百度主动推送</span><br><span class="line">baidu_url_submit:</span><br><span class="line">  count: 100 # 提交最新的一个链接</span><br><span class="line">  host: imzjw.cn # 在百度站长平台中注册的域名</span><br><span class="line">  token: YourToken # 请注意这是你百度站长平台主动推送的的秘钥, 所以请不要把博客源代码发布在公众仓库里!</span><br><span class="line">  path: baidu_urls.txt # 文本文档的地址, 新链接会保存在此文本文档里</span><br></pre></td></tr></table></figure><p>最后，加入新的 deploy (可以参考一下我的<code>_config.yml 文件</code>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">deploy: # 定义部署</span><br><span class="line">  - type: git</span><br><span class="line">    repo:</span><br><span class="line">      github: https://github.com/XXX/XXX.git,master</span><br><span class="line">  - type: baidu_url_submitter</span><br><span class="line">  </span><br><span class="line"># 百度主动推送</span><br><span class="line">baidu_url_submit:</span><br><span class="line">  count: 100 # 提交最新的100个链接</span><br><span class="line">  host: lzscxb.github.io # 在百度站长平台中注册的域名</span><br><span class="line">  token: YourToken # 请注意这是你百度站长平台主动推送的的秘钥, 所以请不要把博客源代码发布在公众仓库里!</span><br><span class="line">  path: baidu_urls.txt # 文本文档的地址, 新链接会保存在此文本文档里</span><br></pre></td></tr></table></figure><h2 id="如何进行推送"><a href="#如何进行推送" class="headerlink" title="如何进行推送"></a>如何进行推送</h2><p>执行 <code>hexo d</code> 的时候，新的链接就会被推送了。如下图</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220113232317235.png" alt="image-20220113232317235"></p><p>重新生成后，我们可以发现在 <code>public</code> 目录下生成有 <code>baidu_urls.txt</code> 里面的就是推送的链接.</p><h2 id="sitemap-提交"><a href="#sitemap-提交" class="headerlink" title="sitemap 提交"></a>sitemap 提交</h2><p>安装 hexo generator-baidu-sitemap 插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap@0.1.4 --save</span><br></pre></td></tr></table></figure><p>然后在博客的根目录下的<code>_config.yml</code> 里面<code>手动</code>加入配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure><p>之后去百度站长平台提交一下 sitemap 的路径就好，如：https://你的博客地址/baidusitemap.xml</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220128004424016.png" alt="image-20220128004424016"></p><h1 id="Google-收录"><a href="#Google-收录" class="headerlink" title="Google 收录"></a>Google 收录</h1><p>登录 Google 账号，打开<a href="https://search.google.com/search-console">谷歌搜索控制台</a> 添加你的网站，需要验证网站，它那里会提供几种验证方式，验证方式和baidu一样</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220128003855195.png" alt="image-20220128003855195"></p><p>验证成功后不是当天就是明天就能在 Google 找到你的网站了，谷歌搜索输入如 <code>site:域名</code></p><h2 id="谷歌-sitemap-提交"><a href="#谷歌-sitemap-提交" class="headerlink" title="谷歌 sitemap 提交"></a>谷歌 sitemap 提交</h2><p>提交 sitemap，上面使用的是百度的 sitemap 也可以，如果 Google 识别不了，可以使用通用 sitemap 生成器<br>安装hexo-generator-sitemap插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>配置 博客根目录下 的_config.yml, 手动输入以下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sitemap: </span><br><span class="line">  path: sitemap.xml</span><br></pre></td></tr></table></figure><p>执行 hexo g 重新生成，会在 public 目录下生成 sitemap.xml 文件，发布后，就可以在 Google 控制台提交这个 sitemap 了</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220128003559577.png" alt="image-20220128003559577"></p><h1 id="必应收录"><a href="#必应收录" class="headerlink" title="必应收录"></a>必应收录</h1><ol><li>点击进入<a href="https://www.bing.com/webmasters/home">必应搜索控制台</a></li><li>网站验证和前边相同 或 直接通过 google 导入</li><li>添加站点地图</li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+Hexo个人博客搭建：butterfly主题配置</title>
      <link href="/posts/2099209647.html"/>
      <url>/posts/2099209647.html</url>
      
        <content type="html"><![CDATA[<h1 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h1><p>在项目根目录下，在命令行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>你会找到 source/categories/index.md 这个文件, 修改这个文件内容：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Categories</span><br><span class="line">date: 2022-01-13 14:17:49</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line"><span class="section">comments: false</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h1 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h1><p>在项目根目录下，在命令行输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>你会找到 source/tags/index.md 这个文件, 修改这个文件内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Tags</span><br><span class="line">date: 2022-01-13 14:17:49</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h1 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h1><p>在项目根目录下，在命令行输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><ol><li><code>_config.yml</code>中添加<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><code>_config.butterfly.yml</code> 修改为<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>重新部署即可在顶栏中找到搜索按钮</li></ol><h1 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h1><blockquote><p>  只能用于本地管理</p></blockquote><p>在项目根目录下，在命令行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br></pre></td></tr></table></figure><p><strong>设置密码</strong><br>先将服务启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:4000/admin/#/auth-setup">http://localhost:4000/admin/#/auth-setup</a><br>输入对应的账号密码信息，自动生成配置信息</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220113111418145.png" alt="image-20220113111418145"></p><p><code>_config.yml</code> 文件末尾添加复制的内容</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220113111625268.png" alt="image-20220113111625268"></p><p>重启服务后，再次访问 <a href="http://localhost:4000/admin">http://localhost:4000/admin</a> 就会提示你输入密码</p><h1 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h1><blockquote><p>使用 Gitalk 插件</p></blockquote><p>Gitalk 的特性：</p><blockquote><ol><li>使用 GitHub 登录</li><li>支持多语言 [en, zh-CN, zh-TW, es-ES, fr, ru]</li><li>支持个人或组织</li><li>无干扰模式（设置 distractionFreeMode 为 true 开启）</li><li>快捷键提交评论 （cmd|ctrl + enter）</li></ol></blockquote><p>使用Gitalk需要你做一些提前准备：</p><ol><li>在github上创建一个仓库，Gitalk会把评论放在这个仓库的issues里面。</li><li>在github上申请一个GitHub OAuth application，来让Gitalk有权限操作github上的仓库。</li></ol><h3 id="申请一个OAuth-application"><a href="#申请一个OAuth-application" class="headerlink" title="申请一个OAuth application"></a>申请一个OAuth application</h3><p><code>GitHub OAuth application</code>允许程序来操作你的github账户，可以对github中仓库读写。<br>打开 <a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a>  进入新建页面</p><p>在注册OAuth应用页面有如下几个参数需要填写：<br>Application name：必填，OAuth的名字<br>Homepage URL：必填，你应用的网址，哪个网站用了Gitalk组件，就填写这个网址<br>Application description：选填，该OAuth的说明<br>Authorization callback URL：必填，授权成功后回调网址，跟Homepage URL参数保持一致就好<br>这些参数在注册成功后是可以修改</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220113124341801.png" alt="image-20220113124341801"></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220113124510156.png" alt="image-20220113124510156"></p><p>``_config.butterfly.yml` 修改 gitalk 两处配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Up to two comments system, the first will be shown as default</span></span><br><span class="line">  <span class="comment"># Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo</span></span><br><span class="line">  <span class="attr">use:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Gitalk</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span> <span class="comment"># Display the comment name next to the button</span></span><br><span class="line">  <span class="comment"># lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span></span><br><span class="line">  <span class="comment"># If you set it to true, the comment count will be invalid</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># Display comment count in top_img</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">false</span> <span class="comment"># Display comment count in Home Page</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220113124654879.png" alt="image-20220113124654879"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">你的client</span> <span class="string">id</span> </span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">你的client</span> <span class="string">secret</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">你的github仓库</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="string">你的github用户名</span></span><br><span class="line">  <span class="attr">admin:</span> <span class="string">该仓库的拥有者或协作者</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># en, zh-CN, zh-TW, es-ES, fr, ru</span></span><br><span class="line">  <span class="attr">perPage:</span> <span class="number">10</span> <span class="comment"># Pagination size, with maximum 100.</span></span><br><span class="line">  <span class="attr">distractionFreeMode:</span> <span class="literal">false</span> <span class="comment"># Facebook-like distraction free mode.</span></span><br><span class="line">  <span class="attr">pagerDirection:</span> <span class="string">last</span> <span class="comment"># Comment sorting direction, available values are last and first.</span></span><br><span class="line">  <span class="attr">createIssueManually:</span> <span class="literal">false</span> <span class="comment"># Gitalk will create a corresponding github issue for your every single page automatically</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure><p>重新部署后</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220113124917996.png" alt="image-20220113124917996"></p><h1 id="Pjax"><a href="#Pjax" class="headerlink" title="Pjax"></a>Pjax</h1><p>当用户点击链接，通过 ajax 更新页面需要变化的部分，然后使用 HTML5 的 pushState 修改浏览器的 URL 地址。<br>这样可以不用重复加载相同的资源（css/js）， 从而提升网页的加载速度。<br>修改主题配置文件<code>_config.butterfly.yml：</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果你有使用hexo-douban，可配置这个</span></span><br><span class="line"><span class="attr">pjax:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br></pre></td></tr></table></figure><h1 id="Gulp压缩"><a href="#Gulp压缩" class="headerlink" title="Gulp压缩"></a>Gulp压缩</h1><p>一个可以自动压缩 HTML、JS、CSS 文件、图片，可以将 ES6 语法转换成 ES5，减少网络请求，同时降低网络负担</p><p>首先全局安装 gulp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp-cli</span><br><span class="line">npm install gulp</span><br></pre></td></tr></table></figure><p>安装babel7</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-babel @babel/core @babel/preset-env babel-preset-es2015 babel-core@6 --save</span><br></pre></td></tr></table></figure><p>安装模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-cache gulp-changed gulp-clean gulp-debug  gulp-htmlmin gulp-minify gulp-util --save-dev</span><br></pre></td></tr></table></figure><p>安装压缩 HTML</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-htmlclean --save-dev</span><br></pre></td></tr></table></figure><p>安装压缩 CSS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-minify-css --save-dev</span><br></pre></td></tr></table></figure><p>安装压缩 JS<br>这里我选择 gulp-uglify + gulp-babel，可以把 ES6 转换成 ES5，因为兼容所以选择</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp-uglify</span><br></pre></td></tr></table></figure><p>安装如上插件之后，在你的博客根目录创建一个 <code>gulpfile.js</code> 文件并把如下代码 CV 进去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> gutil = <span class="built_in">require</span>(<span class="string">&#x27;gulp-util&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> clean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> debug = <span class="built_in">require</span>(<span class="string">&#x27;gulp-debug&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cache = <span class="built_in">require</span>(<span class="string">&#x27;gulp-cache&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;gulp-babel&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> changed = <span class="built_in">require</span>(<span class="string">&#x27;gulp-changed&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-css&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩css文件</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-css&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/css/**/*.css&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">minifycss</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/css&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩js文件，支持将ES6代码转换成ES5代码</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-js&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/lib/**/*.js&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">babel</span>(&#123;</span><br><span class="line">      <span class="attr">presets</span>: [<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/lib&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html文件</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">      <span class="attr">removeComments</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">minifyJS</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// gulp3的写法</span></span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, gulp.<span class="title function_">parallel</span>(<span class="string">&#x27;minify-css&#x27;</span>, <span class="string">&#x27;minify-js&#x27;</span>, <span class="string">&#x27;minify-html&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用：</strong></p><p>在 hexo g 之后运行 gulp 即可</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+PicGo+jsDelivr+Typora搭建免费图床</title>
      <link href="/posts/4153064379.html"/>
      <url>/posts/4153064379.html</url>
      
        <content type="html"><![CDATA[<h1 id="Github-仓库"><a href="#Github-仓库" class="headerlink" title="Github 仓库"></a>Github 仓库</h1><ol><li><p>创建仓库<br> <img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220112204447287.png" alt="image-20220112204447287"></p></li><li><p>创建密钥<br> 直接访问<code>https://github.com/settings/tokens</code>， 点击<code>Generate new token</code>按照下图配置创建即可。</p></li></ol><p><strong>只需要勾选repo</strong></p><p>  <img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220112204633150.png" alt="image-20220112204633150"><br>3. 保存密钥<br><strong>创建成功后不要刷新页面，密钥只会出现一次请妥善保存！</strong><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220112204547970.png" alt="image-20220112204547970"></p><h1 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h1><h2 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h2><ul><li>windows&amp;Linux&amp;Mac<br><a href="https://github.com/Molunerfinn/picgo/releases">https://github.com/Molunerfinn/picgo/releases</a></li><li>ArchLinux<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S picgo-appimage</span><br></pre></td></tr></table></figure><h2 id="PicGO-Cli"><a href="#PicGO-Cli" class="headerlink" title="PicGO-Cli"></a>PicGO-Cli</h2></li></ul><blockquote><p>  Linux 需要使用 Cli 工具，Windonws则不需要</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g picgo</span><br></pre></td></tr></table></figure><ol><li>设置图床信息</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo set uploader</span><br></pre></td></tr></table></figure><ul><li>  设定仓库名：按照【用户名 / 图床仓库名】的格式填写</li><li>  设定分支名：【 main 】 2021年后 master 改为 main</li><li>设定 Token：粘贴上述生成的【 Token 】</li><li>指定存储路径：如【 images/ 】，这样就会在仓库下创建一个名为 images 的文件夹，图片将会储存在此文件夹中</li><li>设定自定义域名：它的的作用是，在图片上传后，PicGo 会按照【 自定义域名 + 上传的图片名 】的方式生成访问链接，放到粘贴板上，因为我们要使用 jsDelivr 加速访问，所以可以设置为 <a href="https://cdn.jsdelivr.net/gh/lzscxb/Picture">https://cdn.jsdelivr.net/gh/lzscxb/Picture</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220112203726795.png" alt="image-20220112203726795"></p><ol start="2"><li><p>使用图床</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo use uploader</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220112203818797.png" alt="image-20220112203818797"></p></li><li><p>验证</p></li></ol><p><strong>命令行</strong><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220112203626864.png" alt="image-20220112203626864"></p><h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><blockquote><p>设置 -&gt; 图像 设置 PicGo 配置</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo upload</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220112203557267.png" alt="image-20220112203557267"></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220112203659848.png" alt="image-20220112203659848"></p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+PicGo+jsDelivr+Typora搭建免费图床</title>
      <link href="/posts/4153064378.html"/>
      <url>/posts/4153064378.html</url>
      
        <content type="html"><![CDATA[<h1 id="Github-仓库"><a href="#Github-仓库" class="headerlink" title="Github 仓库"></a>Github 仓库</h1><ol><li><p>创建仓库<br> <img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220112204447287.png" alt="image-20220112204447287"></p></li><li><p>创建密钥<br> 直接访问<code>https://github.com/settings/tokens</code>， 点击<code>Generate new token</code>按照下图配置创建即可。</p></li></ol><p><strong>只需要勾选repo</strong></p><p>  <img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220112204633150.png" alt="image-20220112204633150"><br>3. 保存密钥<br><strong>创建成功后不要刷新页面，密钥只会出现一次请妥善保存！</strong><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220112204547970.png" alt="image-20220112204547970"></p><h1 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h1><h2 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h2><ul><li>windows&amp;Linux&amp;Mac<br><a href="https://github.com/Molunerfinn/picgo/releases">https://github.com/Molunerfinn/picgo/releases</a></li><li>ArchLinux<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S picgo-appimage</span><br></pre></td></tr></table></figure><h2 id="PicGO-Cli"><a href="#PicGO-Cli" class="headerlink" title="PicGO-Cli"></a>PicGO-Cli</h2></li></ul><blockquote><p>  Linux 需要使用 Cli 工具，Windonws则不需要</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g picgo</span><br></pre></td></tr></table></figure><ol><li>设置图床信息</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo set uploader</span><br></pre></td></tr></table></figure><ul><li>  设定仓库名：按照【用户名 / 图床仓库名】的格式填写</li><li>  设定分支名：【 main 】 2021年后 master 改为 main</li><li>设定 Token：粘贴上述生成的【 Token 】</li><li>指定存储路径：如【 images/ 】，这样就会在仓库下创建一个名为 images 的文件夹，图片将会储存在此文件夹中</li><li>设定自定义域名：它的的作用是，在图片上传后，PicGo 会按照【 自定义域名 + 上传的图片名 】的方式生成访问链接，放到粘贴板上，因为我们要使用 jsDelivr 加速访问，所以可以设置为 <a href="https://cdn.jsdelivr.net/gh/lzscxb/Picture">https://cdn.jsdelivr.net/gh/lzscxb/Picture</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220112203726795.png" alt="image-20220112203726795"></p><ol start="2"><li><p>使用图床</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo use uploader</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220112203818797.png" alt="image-20220112203818797"></p></li><li><p>验证</p></li></ol><p><strong>命令行</strong><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220112203626864.png" alt="image-20220112203626864"></p><h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><blockquote><p>设置 -&gt; 图像 设置 PicGo 配置</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo upload</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220112203557267.png" alt="image-20220112203557267"></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220112203659848.png" alt="image-20220112203659848"></p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlnux打造极速Shell终端zsh+zim</title>
      <link href="/posts/3898520568.html"/>
      <url>/posts/3898520568.html</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Arch Linux + KDE Plasma</p><h1 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S zsh</span><br></pre></td></tr></table></figure><h2 id="更改默认终端"><a href="#更改默认终端" class="headerlink" title="更改默认终端"></a>更改默认终端</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h1 id="zimfw"><a href="#zimfw" class="headerlink" title="zimfw"></a>zimfw</h1><blockquote><p><a href="https://zimfw.sh/docs/">https://zimfw.sh/docs/</a></p></blockquote><p><strong>安装 zimfw 需要在 git 下载建议在终端使用代理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export https_proxy=&quot;127.0.0.1:7890&quot;</span><br></pre></td></tr></table></figure><p>With curl:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh</span><br></pre></td></tr></table></figure><p>With wget:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -nv -O - https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh</span><br></pre></td></tr></table></figure><p><strong>重启后即可进入 zim</strong></p><p>如果安装 zim 成功，模块安装失败则重新安装模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zimfw install</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="zsh-配置"><a href="#zsh-配置" class="headerlink" title="zsh 配置"></a>zsh 配置</h2><p><code>vim ~/.zshrc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 命令可以使用匹配符，例：（find / -name auto*）</span><br><span class="line">setopt no_nomatch</span><br><span class="line"></span><br><span class="line"># 命令别名</span><br><span class="line">alias pc=&quot;proxychains4&quot;</span><br></pre></td></tr></table></figure><h2 id="degit"><a href="#degit" class="headerlink" title="degit"></a>degit</h2><p>将 degit 设置为默认工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zstyle &#x27;:zim:zmodule&#x27; use &#x27;degit&#x27;</span><br></pre></td></tr></table></figure><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>默认主题：<a href="https://zimfw.sh/docs/themes/">https://zimfw.sh/docs/themes/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim </span><br></pre></td></tr></table></figure><ol><li>主题名称为你喜欢的主题<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 找到默认主题并修改为你自己喜欢的主题</span><br><span class="line"># zmodule asciiship</span><br><span class="line">zmodule magicmace</span><br></pre></td></tr></table></figure></li><li>执行安装<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zimfw install</span><br></pre></td></tr></table></figure></li></ol><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a>autojump</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S autojump</span><br></pre></td></tr></table></figure><p><code>vim ~/.zshrc</code> 添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ -s /etc/profile.d/autojump.sh ]] &amp;&amp; . /etc/profile.d/autojump.sh</span><br></pre></td></tr></table></figure><h2 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h2><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><blockquote><p>双击 esc 在命令前加上sudo</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.zim/modules</span><br><span class="line">mkdir sudo</span><br><span class="line">vim sudo.zsh</span><br></pre></td></tr></table></figure><p>添加链接内文件的所有内容<br><a href="https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sudo/sudo.plugin.zsh">https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sudo/sudo.plugin.zsh</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x sudo.zsh</span><br></pre></td></tr></table></figure><p>添加到 <code>~/.zimrc</code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zmodule sudo</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220115223114689.png" alt="image-20220115223114689"></p>]]></content>
      
      
      <categories>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flume 数据采集工具安装与使用</title>
      <link href="/posts/4099149651.html"/>
      <url>/posts/4099149651.html</url>
      
        <content type="html"><![CDATA[<h1 id="Flume-的定义"><a href="#Flume-的定义" class="headerlink" title="Flume 的定义"></a>Flume 的定义</h1><ul><li>Flume由Cloudera公司开发，是一个<strong>分布式、高可靠、高可用的海量日志采集、聚合、传输的系统。</strong></li><li>Flume支持在日志系统中定制各类数据发送方，用于采集数据；</li><li>Flume提供对数据进行简单处理，并写到各种数据接收方的能力。</li></ul><p>简单的说，Flume是<strong>实时采集日志的数据库引擎</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211226212502790-1022665071.png" alt="image"></p><h2 id="Flume-组建"><a href="#Flume-组建" class="headerlink" title="Flume 组建"></a>Flume 组建</h2><p>Flume有三个重要组件：<strong>Source、Channel、Sink</strong></p><ul><li>Source：数据接收的组件。处理各种类型、各个格式的日子数据。如：avro、exce、netcat。</li><li>Channel：位与Source与Sink之间的缓冲区。允许Source、Sink运行在不同的速率上。（线程安全，可以同时处理多个Source、Sink）<ul><li>常见的Channel:Memory Channel、File Channel</li><li>Memory Channel：内存 速度快、容量有限、容易丢数据</li><li>File Chenmel：文件 速度慢、容量大、不丢数据 </li></ul></li><li>Sink：不断的从Channel中取数据，发送到目的地。</li></ul><h2 id="Flume-的特点"><a href="#Flume-的特点" class="headerlink" title="Flume 的特点"></a>Flume 的特点</h2><p>特点：</p><ul><li>分布式：flume分布式集群部署，扩展性好</li><li>可靠性好：当节点出现故障时，日志能够被传送到其他节点上而不会丢失</li><li>易用性：flume配置使用较繁琐，对使用人员专业技术要求高</li><li>实时采集：flume采集流模式进行数据实时采集</li></ul><p><strong>适用场景</strong> ：适用于日志文件实时采集。</p><h1 id="Flume-安装"><a href="#Flume-安装" class="headerlink" title="Flume 安装"></a>Flume 安装</h1><blockquote><p><a href="https://flume.apache.org/download.html">https://flume.apache.org/download.html</a><br>本文章使用的是 Flume1.9.0<br>安装节点是<strong>slave2</strong></p></blockquote><ol><li>下载安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 下载Flume1.9.0</span><br><span class="line">wget https://dlcdn.apache.org/flume/1.9.0/apache-flume-1.9.0-bin.tar.gz -P /opt/software --no-check-certificate</span><br><span class="line"></span><br><span class="line"># 解压至 /opt/servers</span><br><span class="line">tar -zxvf /opt/software/apache-flume-1.9.0-bin.tar.gz -C /opt/servers</span><br><span class="line"></span><br><span class="line"># 重命名</span><br><span class="line">cd /opt/servers</span><br><span class="line">mv apache-flume-1.9.0-bin flume-1.9.0</span><br></pre></td></tr></table></figure><ol start="2"><li><p>配置环境变量<br>vim /etc/profile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Flume </span><br><span class="line">export FLUME_HOME=/opt/servers/flume-1.9.0</span><br><span class="line">export PATH=$PATH:$FLUME_HOME/bin</span><br></pre></td></tr></table></figure><p>使其生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>拷贝配置模版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $FLUME_HOME/conf</span><br><span class="line">cp flume-env.sh.template flume-env.sh</span><br></pre></td></tr></table></figure></li><li><p>修改配置<br>vim flume-env.sh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_202</span><br></pre></td></tr></table></figure></li></ol><h1 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h1><p>中文flume帮助文档<br><a href="https://flume.liyifeng.org/">https://flume.liyifeng.org/</a></p><h2 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h2><p>监听本机 8888 端口，Flume将监听的数据实时显示在控制台<br>需求分析：<br>使用 telnet 工具可以向 8888 端口发送数据</p><ul><li>监听端口数据，选择 netcat source</li><li>channel 选择 memory</li><li>数据实时显示，选择 logger sink</li></ul><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ol><li>安装telnet工具<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install telnet</span><br></pre></td></tr></table></figure></li><li>检查8888端口是否被占用。如果该端口被占用，可以选择使用其他端口完成任务<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8888</span><br><span class="line"># 如果有进程占用</span><br><span class="line">kill [PID]</span><br></pre></td></tr></table></figure></li><li><strong>创建Flume Agent配置文件</strong>。flume-netcat-logger.conf<blockquote><p><a href="https://flume.liyifeng.org/#netcat-tcp-source">https://flume.liyifeng.org/#netcat-tcp-source</a><br><a href="https://flume.liyifeng.org/#memory-channel">https://flume.liyifeng.org/#memory-channel</a><br><a href="https://flume.liyifeng.org/#logger-sink">https://flume.liyifeng.org/#logger-sink</a></p></blockquote></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/conf</span><br><span class="line">vim ~/conf/flume-netcat-logger.conf</span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Agent  a1是Agent的名称，r1、c1、k1分别是source、channels、sink的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sinks = k1</span><br><span class="line"></span><br><span class="line"># Source</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = slave2</span><br><span class="line">a1.sources.r1.port = 8888</span><br><span class="line"></span><br><span class="line"># Channel</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 10000</span><br><span class="line"></span><br><span class="line"># Sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># Source、Channel、Sink之间的关系</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><p>Memory Channel是使用内存缓冲Event的Channel实现。速度比较快速，容量会受到jvm内存大小的限制，可靠性不够高。适用于允许丢失数据，但对性能要求较高的日志采集业务。</p><ol start="4"><li><p>启动Flume</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent --name a1 \</span><br><span class="line">--conf-file ~/conf/flume-netcat-logger.conf \</span><br><span class="line">-Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211227132816038-870024732.png" alt="image"></p></li><li><p>发送数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet slave 8888</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211227132910325-2127324122.png" alt="image"><br>收到数据并打印在终端上<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211227132939959-531087393.png" alt="image"></p></li></ol><h1 id="监控日志文件信息到HDFS"><a href="#监控日志文件信息到HDFS" class="headerlink" title="监控日志文件信息到HDFS"></a>监控日志文件信息到HDFS</h1><blockquote><p>业务需求：监控本地日志文件，收集内容实时上传到HDFS</p></blockquote><p>需求分析：<br>使用tail-F命令即可找到本地日志文件产生的信息</p><ul><li>source选择exec。exec监听一个指定的命令，获取命令的结果作为数据源。source组件从这个命令的结果中取数据。当agent进程挂掉重启后，可能存在数据丢失；</li><li>channel选择memory</li><li>sink选择HDFS<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tail -f</span><br><span class="line">等同于--follow=descripror,根据文件描述符进行追踪，当文件改名或被删除，追踪停止</span><br><span class="line"></span><br><span class="line">tail -F</span><br><span class="line">等同于--follow=name--retry,根据文件名进行追踪，并保持重试，即该文件被删除或改名后，如果再次创建相同的文件名，会继续追踪选择语言</span><br></pre></td></tr></table></figure></li></ul><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>1、环境准备。Flume要想将数据输出到HDFS,必须持有Hadoop相关jar包。将<br>commons-configuration-1.6.jar<br>hadoop-auth-2.10.1.jar<br>hadoop-common-2.10.1.jar<br>hadoop-hdfs-2.10.1.jar<br>commons-io-2.4.jar<br>htrace-core4-4.1.0-incubating.jar<br>拷贝到 $FLUME_HOME/lib文件夹下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd $HADOOP_HOME/share/hadoop/httpfs/tomcat/webapps/webhdfs/WEB-INF/lib</span><br><span class="line">cp commons-configuration-1.6.jar $FLUME_HOME/lib</span><br><span class="line">cp hadoop-auth-2.10.1.jar $FLUME_HOME/lib</span><br><span class="line">cp hadoop-common-2.10.1.jar $FLUME_HOME/lib</span><br><span class="line">cp hadoop-hdfs-2.10.1.jar $FLUME_HOME/lib</span><br><span class="line">cp commons-io-2.4.jar $FLUME_HOME/lib</span><br><span class="line">cp htrace-core4-4.1.0-incubating.jar $FLUME_HOME/lib </span><br></pre></td></tr></table></figure><ol start="2"><li><p>创建配置文件<br>vim ~/conf/flume-exec-hdfs.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># Name the components on this agent</span><br><span class="line">a2.sources = r2</span><br><span class="line">a2.sinks = k2</span><br><span class="line">a2.channels = c2</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">a2.sources.r2.type = exec</span><br><span class="line">a2.sources.r2.command = tail -F /tmp/root/hive.log</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a2.channels.c2.type = memory</span><br><span class="line">a2.channels.c2.capacity = 10000</span><br><span class="line">a1.channels.c1.transactionCapacity = 10000</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a2.sinks.k2.type = hdfs</span><br><span class="line">a2.sinks.k2.hdfs.path = hdfs://master:9000/flume/%Y%m%d/%H</span><br><span class="line">#上传文件的前缀</span><br><span class="line">a2.sinks.k2.hdfs.filePrefix = logs-</span><br><span class="line"># 是否使用本地时间戳</span><br><span class="line">a2.sinks.k2.hdfs.useLocalTimeStamp = true</span><br><span class="line"># 积攒10000个Event才f1ush到HDFS一次</span><br><span class="line">a2.sinks.k2.hdfs.batchSize = 10000</span><br><span class="line"># 设置文件类型，支持压缩。Datastream没启用压缩</span><br><span class="line">a2.sinks.k2.hdfs.fileType = DataStream</span><br><span class="line"># 1分钟滚动一次</span><br><span class="line">a2.sinks.k2.hdfs.rollInterval = 60</span><br><span class="line"># 128M滚动一次</span><br><span class="line">a2.sinks.k2.hdfs.rollsize = 134217700</span><br><span class="line"># 文件的滚动与Event数量无关</span><br><span class="line">a2.sinks.k2.hdfs.rollCount = 0</span><br><span class="line"># 最小见余数</span><br><span class="line">a2.sinks.k2.hdfs.minBlockReplicas = 1</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a2.sources.r2.channels = c2</span><br><span class="line">a2.sinks.k2.channel = c2</span><br></pre></td></tr></table></figure></li><li><p>启动Flume</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent --name a2 \</span><br><span class="line">--conf-file ~/conf/flume-exec-hdfs.conf \</span><br><span class="line">Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211227143744886-1242621863.png" alt="image"></p></li><li><p>测试<br>使用命令监控，为什么做比对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp/root</span><br><span class="line">tail -F hive.log</span><br></pre></td></tr></table></figure></li></ol><p>输入错的命令使其产生日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive -e &quot;show databasessss&quot;</span><br></pre></td></tr></table></figure><ol start="5"><li>查看HDFS中的文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -ls /flume</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211227144957815-1940581257.png" alt="image"></li></ol>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flume </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux 2022安装配置之KDE</title>
      <link href="/posts/4214995323.html"/>
      <url>/posts/4214995323.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装-KDE"><a href="#安装-KDE" class="headerlink" title="安装 KDE"></a>安装 KDE</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S plasma konsole dolphin dolphin-plugins</span><br></pre></td></tr></table></figure><p><strong>设置登陆管理器自启</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable gdm</span><br><span class="line"></span><br><span class="line"># 建议重启</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h1 id="充电域值"><a href="#充电域值" class="headerlink" title="充电域值"></a>充电域值</h1><blockquote><p>配置详解 <a href="https://linrunner.de/tlp/settings/battery.html">https://linrunner.de/tlp/settings/battery.html</a><br>archlinux wiki <a href="https://wiki.archlinux.org/title/TLP_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/title/TLP_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a><br>安装tlp</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yay -S tlp</span><br><span class="line"></span><br><span class="line"># 查看电池信息</span><br><span class="line">sudo tlp-stat -b</span><br></pre></td></tr></table></figure><p>修改配置 <code>/etc/tlp.conf</code><br><strong>充电达到80%停止充电，低于75开始充电</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/tlp.conf</span><br><span class="line"></span><br><span class="line"># 搜索取消注释以下四行</span><br><span class="line">START_CHARGE_THRESH_BAT0=75</span><br><span class="line">STOP_CHARGE_THRESH_BAT0=80</span><br><span class="line"></span><br><span class="line">START_CHARGE_THRESH_BAT1=75</span><br><span class="line">STOP_CHARGE_THRESH_BAT1=80</span><br></pre></td></tr></table></figure><p><strong>一键设置充电域值脚本</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">if [[ $EUID -ne 0 ]]; then</span><br><span class="line">    echo -e &quot;\n\e[31mError!\e[0m\n\nThis script must be run as root!&quot; 1&gt;&amp;2</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo -e &quot;START_CHARGE_THRESH_BAT0=75\nSTOP_CHARGE_THRESH_BAT0=80\nSTART_CHARGE_THRESH_BAT1=75\nSTOP_CHARGE_THRESH_BAT1=80&quot; &gt; /etc/tlp.conf</span><br><span class="line"></span><br><span class="line"># restart tpl server</span><br><span class="line">systemctl restart tlp.service</span><br><span class="line"></span><br><span class="line">echo -e &quot;\n\e[32mSUCCESS!\e[0m \n\nSet the charging threshold to 80%.&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>给予可执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chmod +x battery80</span><br><span class="line"># 链接到 /usr/local/bin 目录</span><br><span class="line">sudo ln -s /home/lzscxb/software/shell/battery80 /usr/local/bin</span><br><span class="line"># 执行</span><br><span class="line">battery80</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211210171804582-157846974.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## 开机自启</span><br><span class="line">sudo systemctl enable tlp.service</span><br><span class="line">sudo systemctl restart tlp.service</span><br><span class="line">## 查看电池信息</span><br><span class="line">sudo tlp-stat -b</span><br></pre></td></tr></table></figure><h1 id="触摸版配置"><a href="#触摸版配置" class="headerlink" title="触摸版配置"></a>触摸版配置</h1><blockquote><p>开启三指切换工作区等多触控手势<br>应该只支持 X11(xorg)，其他请自行测试</p></blockquote><ol><li>安装多触控 GnomeExtends 插件<br><a href="https://extensions.gnome.org/extension/4033/x11-gestures/">https://extensions.gnome.org/extension/4033/x11-gestures/</a></li><li>安装触摸版手势 Touchégg<br>Github：<a href="https://github.com/JoseExposito/touchegg#gnome">https://github.com/JoseExposito/touchegg#gnome</a></li><li>安装 touche Gui 软件管理触摸版手势（可选）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S touchegg touche</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211213224129451-1430723584.png" alt="image"></li></ol><h1 id="笔记本最大亮度"><a href="#笔记本最大亮度" class="headerlink" title="笔记本最大亮度"></a>笔记本最大亮度</h1><blockquote><p>笔记本有时候拔出电源会自动将亮度调整最低，所以写个脚本设置最高亮度</p></blockquote><p><strong>shell脚本</strong><br><code>vim ~/software/shell/max-brightness</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">sudo sh -c &#x27;echo `cat /sys/class/backlight/amdgpu_bl0/max_brightness` &gt; /sys/class/backlight/amdgpu_bl0/brightness&#x27;</span><br></pre></td></tr></table></figure><p>设置可执行权限并链接到<code>/usr/local/bin</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x max-brightness</span><br><span class="line">sudo ln -s /home/lzscxb/software/shell/max-brightness /usr/local/bin</span><br></pre></td></tr></table></figure><p>完成后在设置中增加快捷键即可<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211214010916628-2048463509.png" alt="image"></p><h1 id="触摸板配置"><a href="#触摸板配置" class="headerlink" title="触摸板配置"></a>触摸板配置</h1><blockquote><p>开启三指切换工作区等多触控手势</p></blockquote><h2 id="libinput-gestures（推荐）"><a href="#libinput-gestures（推荐）" class="headerlink" title="libinput-gestures（推荐）"></a>libinput-gestures（推荐）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S libinput-gestures xdotool</span><br></pre></td></tr></table></figure><p><strong>添加当前用户到input组中并启动libinput-gestures</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gpasswd -a $USER input</span><br><span class="line">libinput-gestures-setup autostart start</span><br></pre></td></tr></table></figure><p><strong>重启生效</strong></p><h3 id="方式一：-手动配置"><a href="#方式一：-手动配置" class="headerlink" title="方式一： 手动配置"></a>方式一： 手动配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.config/libinput-gestures.conf</span><br></pre></td></tr></table></figure><p>添加以下内容，并将配置修改为你自己的快捷键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 三指滑动</span><br><span class="line">gesture swipe right 3 xdotool key ctrl+super+Left # 切换桌面</span><br><span class="line">gesture swipe left 3 xdotool key ctrl+super+Right # 切换桌面</span><br><span class="line">gesture swipe up 3 xdotool key ctrl+alt+Up        # 最大化窗口</span><br><span class="line">gesture swipe down 3 xdotool key ctrl+alt+Down    # 最小化窗口</span><br><span class="line"></span><br><span class="line"># 四指滑动</span><br><span class="line">gesture swipe down 4 xdotool key super+d # 最小化所有窗口</span><br><span class="line">gesture swipe up 4 xdotool key super+Tab # 显示窗口预览</span><br><span class="line"></span><br><span class="line"># 三指捏合</span><br><span class="line">gesture pinch in 3 xdotool key alt+F4 # 关闭窗口</span><br><span class="line"># gesture pinch out 3 xdotool key alt+F4 # （向外）关闭窗口</span><br><span class="line">~</span><br></pre></td></tr></table></figure><p><strong>重启启动 libinput-gestures</strong>即可生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libinput-gestures-setup restart</span><br></pre></td></tr></table></figure><h3 id="方式二：-gestures-GUI"><a href="#方式二：-gestures-GUI" class="headerlink" title="方式二： gestures GUI"></a>方式二： gestures GUI</h3><p>安装<code>gestures</code>后即可在gestures GUI中添加手势操作<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211227163849763-837412470.png" alt="image"></p><h2 id="Touchegg"><a href="#Touchegg" class="headerlink" title="Touchégg"></a>Touchégg</h2><blockquote><p>只支持 X11(xorg)，其他请自行测试</p></blockquote><ol start="2"><li>安装触摸版手势 Touchégg<br>Github：<a href="https://github.com/JoseExposito/touchegg#gnome">https://github.com/JoseExposito/touchegg#gnome</a></li><li>安装 touche Gui 软件管理触摸版手势（可选）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S touchegg touche</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211213224129451-1430723584.png" alt="image"></li></ol>]]></content>
      
      
      <categories>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
            <tag> KDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装并配置LAMP</title>
      <link href="/posts/1645576139.html"/>
      <url>/posts/1645576139.html</url>
      
        <content type="html"><![CDATA[<!-- * @Author: LzsCxb * @Date: 2021-12-21 15:12:52 * @LastEditors: LzsCxb * @LastEditTime: 2021-12-22 16:53:06--><blockquote><p>LAMP 为 Linux、Apache、MySQL、PHP 的简称，这是一个常规的 Web 服务器环境解决方案，使用其首字母缩写“LAMP”来引用。</p></blockquote><h1 id="关闭防火墙和-selinux"><a href="#关闭防火墙和-selinux" class="headerlink" title="关闭防火墙和 selinux"></a>关闭防火墙和 selinux</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p><strong>禁用 Selinux</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br></pre></td></tr></table></figure><p>修改为 disabled</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211220234416246-1526745779.png" alt="image"></p><p><strong>注意：</strong>上面配置是重启后才生效，所以需要临时关闭selinux防火墙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenforce  0</span><br></pre></td></tr></table></figure><h1 id="安装-Apache"><a href="#安装-Apache" class="headerlink" title="安装 Apache"></a>安装 Apache</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install httpd</span><br></pre></td></tr></table></figure><p>启动Apache</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd //启动apache</span><br><span class="line"></span><br><span class="line">systemctl enable httpd //设置apache开机启动</span><br><span class="line"></span><br><span class="line">systemctl status httpd //查看服务状态</span><br></pre></td></tr></table></figure><p>启动后在外部浏览器访问主机IP就能看到Apache页面<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211221162039958-619929173.png" alt="image"></p><h2 id="目录详解"><a href="#目录详解" class="headerlink" title="目录详解"></a>目录详解</h2><ul><li>程序目录：/usr/sbin/httpd</li><li>默认网站主页存放目录： /var/www/html/</li><li>日志文件存放目录：/var/log/httpd/</li><li>主配置文件：/etc/httpd/conf/httpd.conf</li><li>从配置文件：/etc/httpd/conf.d/</li></ul><h2 id="检查配置文件是否正确"><a href="#检查配置文件是否正确" class="headerlink" title="检查配置文件是否正确"></a>检查配置文件是否正确</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpd -t</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211221172436718-573676708.png" alt="image"></p><p>如果有以下提示可忽略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AH00558: httpd: Could not reliably determine the server&#x27;s fully qualified domain name, using localhost.localdomain. Set the &#x27;ServerName&#x27; directive globally to suppress this message</span><br></pre></td></tr></table></figure><h2 id="配置站点的三种方式"><a href="#配置站点的三种方式" class="headerlink" title="配置站点的三种方式"></a>配置站点的三种方式</h2><h3 id="基于-IP-的方式"><a href="#基于-IP-的方式" class="headerlink" title="基于 IP 的方式"></a>基于 IP 的方式</h3><ol><li>新建站点文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/html</span><br><span class="line">mkdir web1 &amp;&amp; cd web1</span><br><span class="line">vim index.html</span><br></pre></td></tr></table></figure>添加网页内容<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 style=&quot;color:#D81B60&quot;&gt;Hello Multisite! &lt;/h1&gt;</span><br></pre></td></tr></table></figure></li><li>多站点配置文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/httpd/conf.d/http-vhost.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerAdmin feng@gmail.com</span><br><span class="line">    DocumentRoot /var/www/html/web1</span><br><span class="line">    ServerName web1.frg.com</span><br><span class="line">    ErrorLog logs/web1-frg-com-error_log</span><br><span class="line">    CustomLog logs/web1-frg-com-access_log common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><ol><li>重启 Apache<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 检查配置文件</span><br><span class="line">httpd -t</span><br><span class="line"># 重启服务</span><br><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure></li></ol><p><strong>使用 IP 访问</strong><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211221164302022-2069825614.png" alt="image"></p><h3 id="使用端口访问"><a href="#使用端口访问" class="headerlink" title="使用端口访问"></a>使用端口访问</h3><blockquote><p>配置多站点配置文件</p></blockquote><ol><li>新建站点文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/html</span><br><span class="line">mkdir web2</span><br><span class="line">vim index.html</span><br></pre></td></tr></table></figure>添加网页内容<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 style=&quot;color:#D81B60&quot;&gt;Hello Multisite! &lt;/h1&gt;</span><br></pre></td></tr></table></figure></li><li>多站点配置文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/httpd/conf.d/http-vhost.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:8899&gt;</span><br><span class="line">    ServerAdmin feng@gmail.com</span><br><span class="line">    DocumentRoot /var/www/html/web2</span><br><span class="line">    ServerName web2.frg.com</span><br><span class="line">    ErrorLog logs/web2-frg-com-error_log</span><br><span class="line">    CustomLog logs/web2-frg-io-access_log common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li>增加监听端口<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line"># 在Listen 80 之后增加一行</span><br><span class="line">Listen 8899</span><br></pre></td></tr></table></figure></li><li>重启 Apache<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 检查配置文件</span><br><span class="line">httpd -t</span><br><span class="line"># 重启服务</span><br><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure>浏览器通过域名:8899访问<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211221172408111-846677829.png" alt="image"></li></ol><h3 id="本地DNS解析访问"><a href="#本地DNS解析访问" class="headerlink" title="本地DNS解析访问"></a>本地DNS解析访问</h3><blockquote><p>《CentOS7安装并配置本地DNS服务器》 <a href="https://www.cnblogs.com/LzsCxb/p/15713510.html">https://www.cnblogs.com/LzsCxb/p/15713510.html</a></p><h3 id="在DNS服务器添加正反向解析"><a href="#在DNS服务器添加正反向解析" class="headerlink" title="在DNS服务器添加正反向解析"></a>在DNS服务器添加正反向解析</h3></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/named.rfc1912.zones</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zone &quot;frg.com&quot; IN &#123;</span><br><span class="line">        type master;</span><br><span class="line">        file &quot;feng.io.zone&quot;;</span><br><span class="line">        allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="正向数据区域文件"><a href="#正向数据区域文件" class="headerlink" title="正向数据区域文件"></a>正向数据区域文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /var/named</span><br><span class="line"></span><br><span class="line">cp -p named.localhost frg.com.zone</span><br><span class="line"></span><br><span class="line">vim named.localhost frg.com.zone</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211221174829236-1733653304.png" alt="image"></p><p>重启 DNS 服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart named</span><br></pre></td></tr></table></figure><h3 id="客户机中增加DNS服务器解析"><a href="#客户机中增加DNS服务器解析" class="headerlink" title="客户机中增加DNS服务器解析"></a>客户机中增加DNS服务器解析</h3><p>Linux：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/resolv.conf </span><br></pre></td></tr></table></figure><p>增加自己本地的DNS服务器地址到<strong>顶部</strong><br>重启网络即可使用域名访问<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211221175341114-1177049363.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211221184302178-990761192.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211221181514130-1919326909.png" alt="image"></p><p>window:</p><ol><li>修改网卡首选DNS为本地服务器</li><li>修改host文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.139.100 frg.com</span><br></pre></td></tr></table></figure></li></ol><h1 id="Mysql8安装"><a href="#Mysql8安装" class="headerlink" title="Mysql8安装"></a>Mysql8安装</h1><blockquote><p>《CentOS7 安装 Mysql8 并配置远程登录》 <a href="https://www.cnblogs.com/LzsCxb/p/15366225.html">https://www.cnblogs.com/LzsCxb/p/15366225.html</a></p></blockquote><h1 id="PHP安装与配置"><a href="#PHP安装与配置" class="headerlink" title="PHP安装与配置"></a>PHP安装与配置</h1><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><ol><li><p>下载 PHP7 源码包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -P /opt/software https://www.php.net/distributions/php-7.4.27.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf php-7.4.27.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>安装依赖包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libxml2-devel sqlite-devel  httpd-devel</span><br></pre></td></tr></table></figure></li><li><p>预编译</p><blockquote><p>–enable-fpm –with-apxs2=/usr/bin/apxs 调用Apache的apxs生成PHP模块，依赖包<code>httpd-devel</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/software/php-7.4.27</span><br><span class="line">./configure --prefix=/usr/local/php7 --enable-fpm --with-apxs2=/usr/bin/apxs</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211221200829642-2006377420.png" alt="image"></p></li><li><p>编译并安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>PHP配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/software/php-7.4.27</span><br><span class="line">cp php.ini-development php.ini</span><br></pre></td></tr></table></figure></li><li><p>链接可执行文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/php7/bin/php /usr/local/bin</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -v</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211221202033169-1013561162.png" alt="image"></p><h2 id="配置-Apache-支持-PHP7"><a href="#配置-Apache-支持-PHP7" class="headerlink" title="配置 Apache 支持 PHP7"></a>配置 Apache 支持 PHP7</h2><ol><li>编辑httpd.conf<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure>定位到<code>&lt;IfModule dir_module&gt;</code> 添加上<code>index.php</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule dir_module&gt;</span><br><span class="line">    DirectoryIndex index.php index.html</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211221211917048-1831412515.png" alt="image"></li></ol><p>在文件末尾处添加<br>如果已存在则不需要添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LoadModule php7_module modules/libphp7.so</span><br><span class="line">&lt;FilesMatch \.php$&gt;</span><br><span class="line">        SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211221212007303-1896583759.png" alt="image"></p><ol start="2"><li><p>检查配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpd -t</span><br></pre></td></tr></table></figure></li><li><p>进入站点新建一个index.php<br>vim index.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">phpinfo();</span><br></pre></td></tr></table></figure><p>访问站点<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211221211349011-1629960517.png" alt="image"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装并配置本地DHCP服务器</title>
      <link href="/posts/1354855466.html"/>
      <url>/posts/1354855466.html</url>
      
        <content type="html"><![CDATA[<!-- * @Author: LzsCxb * @Date: 2021-12-21 11:56:18 * @LastEditors: LzsCxb * @LastEditTime: 2021-12-21 14:16:14--><h1 id="DHCP服务器的三种IP分配方式"><a href="#DHCP服务器的三种IP分配方式" class="headerlink" title="DHCP服务器的三种IP分配方式"></a>DHCP服务器的三种IP分配方式</h1><p>DHCP服务器具有三种IP的分配方式，手动分配，自动分配和动态分配。其中动态分配功能最为强大，配置也最为烦琐。目前的DHCP服务器一般支持全部的几种分配方式或者是其中的两种。</p><ul><li><p>手动分配：<br>网络管理员在DHCP服务器通过手工方法配置DHCP客户机的IP地址。当DHCP客户机要求网络服务时，DHCP服务器把手工配置的IP地址传递给DHCP客户机。</p></li><li><p>自动分配：<br>不需要进行任何的IP地址手工分配。当DHCP客户机第一次向DHCP服务器租用到IP地址后，这个地址就永久地分配给了该DHCP客户机，而不会再分配给其他客户机。</p></li><li><p>动态分配：<br>当DHCP客户机向DHCP服务器租用IP地址时，DHCP服务器只是暂时分配给客户机一个IP地址。只要租约到期，这个地址就会还给DHCP服务器，以供其他客户机使用。如果DHCP客户机仍需要一个IP地址来完成工作，则可以再要求另外一个IP地址。</p></li></ul><h1 id="DHCP-搭建过程"><a href="#DHCP-搭建过程" class="headerlink" title="DHCP 搭建过程"></a>DHCP 搭建过程</h1><h2 id="安装-DHCP"><a href="#安装-DHCP" class="headerlink" title="安装 DHCP"></a>安装 DHCP</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install dhcp</span><br></pre></td></tr></table></figure><h2 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">subnet 192.168.139.0 netmask 255.255.255.0 &#123;</span><br><span class="line">        range 192.168.139.200 192.168.139.220;          # 地址池</span><br><span class="line">        option domain-name-servers 192.168.139.100;     # DNS服务器地址</span><br><span class="line">        option domain-name &quot;feng.io&quot;;                   # 域名</span><br><span class="line">        option routers 192.168.139.2;                   # 默认路由网关</span><br><span class="line">        option broadcast-address 192.168.139.255;       # 广播地址</span><br><span class="line">        default-lease-time 600;                         # 默认租约时间</span><br><span class="line">        max-lease-time 7200;                            # 最大组约时间</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211221141607564-1705751890.png" alt="image"></p><h2 id="启动-DHCP"><a href="#启动-DHCP" class="headerlink" title="启动 DHCP"></a>启动 DHCP</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start dhcpd</span><br><span class="line">systemctl enable dhcpd</span><br><span class="line">systemctl status dhcpd</span><br></pre></td></tr></table></figure><p><strong>检查端口是否开启</strong><br>PS：CentOS7默认没有 netstat 命令，需要安装 net-tools 工具，<code>yum install -y net-tools</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat  -anpu  |  grep &quot;:67&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211221135508086-977821357.png" alt="image"></p><h1 id="客户机测试-DHCP"><a href="#客户机测试-DHCP" class="headerlink" title="客户机测试 DHCP"></a>客户机测试 DHCP</h1><blockquote><p> 准备一台Linux客户机</p></blockquote><h2 id="关闭-Vmware-本地-DHCP-服务器"><a href="#关闭-Vmware-本地-DHCP-服务器" class="headerlink" title="关闭 Vmware 本地 DHCP 服务器"></a>关闭 Vmware 本地 DHCP 服务器</h2><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211221135831703-636554410.png" alt="image"></p><h2 id="客户机-IP-获取方式"><a href="#客户机-IP-获取方式" class="headerlink" title="客户机 IP 获取方式"></a>客户机 IP 获取方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211221140707011-1082253059.png" alt="image"></p><p><strong>重启网卡并查看动态获取的IP地址</strong><br><strong>PS：</strong>重启后IP会动态获取，如果你正在使用SSH远程连接则会断开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br><span class="line"></span><br><span class="line"># 查看IP</span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>如果能看到IP则配置成功<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211221141018196-304159717.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装并配置本地DNS服务器</title>
      <link href="/posts/3993163816.html"/>
      <url>/posts/3993163816.html</url>
      
        <content type="html"><![CDATA[<!-- * @Author: LzsCxb * @Date: 2021-12-20 21:21:10 * @LastEditors: LzsCxb * @LastEditTime: 2021-12-20 23:52:04--><blockquote><p>环境：CentOS7</p></blockquote><h1 id="安装-Bind"><a href="#安装-Bind" class="headerlink" title="安装 Bind"></a>安装 Bind</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install bind</span><br></pre></td></tr></table></figure><h1 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/named.conf</span><br></pre></td></tr></table></figure><p><strong>any</strong>表示任意ip这<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211220212551345-1291857061.png" alt="image"></p><h1 id="区域配置"><a href="#区域配置" class="headerlink" title="区域配置"></a>区域配置</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/named.rfc1912.zones</span><br></pre></td></tr></table></figure><p><strong>在末尾添加</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 正向解析区域</span><br><span class="line">// type：区域类型是主服务器</span><br><span class="line">// file：区域数据配置文件，正向通常以zone结尾</span><br><span class="line">zone &quot;feng.io&quot; IN &#123;</span><br><span class="line">        type master;</span><br><span class="line">        file &quot;feng.io.zone&quot;;</span><br><span class="line">        allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 反向解析区域</span><br><span class="line">// 反向解析命名格式：网段倒过来+.in-addr.arpa</span><br><span class="line">// file：反向通常以local结尾</span><br><span class="line">zone &quot;139.168.192.in-addr.arpa&quot; IN &#123;</span><br><span class="line">        type master;</span><br><span class="line">        file &quot;feng.io.local&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="正向区域数据文件"><a href="#正向区域数据文件" class="headerlink" title="正向区域数据文件"></a>正向区域数据文件</h2><blockquote><p>以默认配置文件做模版，复制一份出来进行配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /var/named</span><br><span class="line"></span><br><span class="line">cp -p named.localhost feng.io.zone</span><br><span class="line"></span><br><span class="line"># 修改配置文件</span><br><span class="line">vim feng.io.zone</span><br></pre></td></tr></table></figure><p><strong>A (Address) 记录是用来指定主机名（或域名）对应的IP地址记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www     IN      A       192.168.139.100</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211220231851942-530833131.png" alt="image"></p><h2 id="反向区域数据文件"><a href="#反向区域数据文件" class="headerlink" title="反向区域数据文件"></a>反向区域数据文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /var/named</span><br><span class="line">cp -p named.localhost feng.io.local</span><br><span class="line"></span><br><span class="line"># 修改配置文件</span><br><span class="line">vim feng.io.local</span><br></pre></td></tr></table></figure><ul><li>100 对应的是192.168.139.0/24的主机位</li><li>注意：域名后面有个点<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100     IN      PTR     www.feng.io.</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211220232006313-1870465147.png" alt="image"></li></ul><h1 id="配置-DNS-解析器"><a href="#配置-DNS-解析器" class="headerlink" title="配置 DNS 解析器"></a>配置 DNS 解析器</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver 192.168.139.100</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211220232812704-333400507.png" alt="image"></p><h1 id="启动-Bind"><a href="#启动-Bind" class="headerlink" title="启动 Bind"></a>启动 Bind</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start named</span><br><span class="line">systemctl enable named</span><br></pre></td></tr></table></figure><p>如果启动出现以下情况<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211220231247313-452983258.png" alt="image"></p><p><strong>查看当前服务状态</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status named</span><br></pre></td></tr></table></figure><p><strong>请检查你的配置文件是否正确</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">named-checkconf -z &quot;$NAMEDCONF&quot;</span><br></pre></td></tr></table></figure><h1 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl enable firewalld</span><br></pre></td></tr></table></figure><h1 id="禁用-Selinux"><a href="#禁用-Selinux" class="headerlink" title="禁用 Selinux"></a>禁用 Selinux</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br></pre></td></tr></table></figure><p>修改为 disabled</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220115224249332.png" alt="image-20220115224249332"></p><p><strong>注意：</strong>上面配置是重启后才生效，所以需要临时关闭selinux防火墙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenforce  0</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="nslookup-测试"><a href="#nslookup-测试" class="headerlink" title="nslookup 测试"></a>nslookup 测试</h2><p>安装软件包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install bind-utils</span><br></pre></td></tr></table></figure><ol><li><p>测试正向解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup www.feng.io</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211220232922628-1563957648.png" alt="image"></p></li><li><p>测试反向解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup 192.168.139.100</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211220233012365-455210237.png" alt="image"></p></li></ol><h2 id="客户端测试"><a href="#客户端测试" class="headerlink" title="客户端测试"></a>客户端测试</h2><blockquote><p>创建一台客户机并配置好IP</p></blockquote><ol><li>安装软件包<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install bind-utils net-tools </span><br></pre></td></tr></table></figure></li><li>修改网卡DNS<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure></li></ol><p><strong>将DNS1 服务器地址修改为本地DNS服务器</strong><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211220234939261-1736423329.png" alt="image"></p><p>重启网卡</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><ol start="3"><li>nslookup 测试</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nslookup www.feng.io</span><br><span class="line">nslookup 192.168.139.100</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211220235153639-117826615.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sqoop 安装配置与使用</title>
      <link href="/posts/1042481035.html"/>
      <url>/posts/1042481035.html</url>
      
        <content type="html"><![CDATA[<!-- * @Author: LzsCxb * @Date: 2021-12-16 21:24:58 * @LastEditors: LzsCxb * @LastEditTime: 2021-12-16 23:36:15--><blockquote><p>Sqoop 只用在一台有  HIVE 的服务器上安装即可<br>这里我选择的是 slave2 </p></blockquote><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>Apacha Sqoop 官方下载地址</p><p><a href="http://archive.apache.org/dist/sqoop/1.4.7/">http://archive.apache.org/dist/sqoop/1.4.7/</a></p><ol><li>下载上传至 /opt/software</li><li>解压至 /opt/servers<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf sqoop-1.4.7.bin__hadoop-2.6.0.tar.gz -C /opt/servers</span><br><span class="line"></span><br><span class="line">cd /opt/servers</span><br><span class="line"></span><br><span class="line">mv sqoop-1.4.7.bin__hadoop-2.6.0 sqoop-1.4.7</span><br></pre></td></tr></table></figure></li></ol><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Sqoop</span><br><span class="line">export SQOOP_HOME=/opt/servers/sqoop-1.4.7</span><br><span class="line">export PATH=$PATH:$SQOOP_HOME/bin</span><br></pre></td></tr></table></figure><p>使其生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="创建并修改配置文件"><a href="#创建并修改配置文件" class="headerlink" title="创建并修改配置文件"></a>创建并修改配置文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $SQOOP_HOME/conf</span><br><span class="line">cp sqoop-env-template.sh sqoop-env.sh</span><br></pre></td></tr></table></figure><p>vim sqoop-env.sh<br>在文件末尾增加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_COMMON_HOME=/opt/servers/hadoop-2.10.1</span><br><span class="line">export HADOOP_MAPRED_HOME=/opt/servers/hadoop-2.10.1</span><br><span class="line">export HIVE_HOME=/opt/servers/hive-2.3.9</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211216224939464-1602388102.png" alt="image"></p><h2 id="链接-Jar-包"><a href="#链接-Jar-包" class="headerlink" title="链接 Jar 包"></a>链接 Jar 包</h2><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><p>注意自己的JDBC版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /opt/servers/hive-2.3.9/lib/mysql-connector-java-8.0.26.jar /opt/servers/sqoop-1.4.7/lib</span><br></pre></td></tr></table></figure><h3 id="hive-common-jar"><a href="#hive-common-jar" class="headerlink" title="hive-common.jar"></a>hive-common.jar</h3><p>将$HIVE_HOME/lib下的hive-common-2.3.7.jar,拷贝到$SQOOP_HOME/lib目录下。如不拷贝在MySQL往Hive导数据的时候将会出现错误：ClassNotFoundException:org.apache.hadoop.hive.conf.HiveConf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /opt/servers/hive-2.3.9/lib/hive-common-2.3.9.jar /opt/servers/sqoop-1.4.7/lib</span><br></pre></td></tr></table></figure><h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqoop version</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211216224852913-61706414.png" alt="image"></p><h1 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h1><p>懒了，有需要在我补充上去。。。。</p><h1 id="数据导出Mysql"><a href="#数据导出Mysql" class="headerlink" title="数据导出Mysql"></a>数据导出Mysql</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE jobdata_origin (</span><br><span class="line">city VARCHAR ( 100 ) COMMENT &#x27;城市&#x27;,</span><br><span class="line">salary VARCHAR ( 100 ) COMMENT &#x27;薪资&#x27;,</span><br><span class="line">company VARCHAR ( 100 ) COMMENT &#x27;福利&#x27;,</span><br><span class="line">`kill` VARCHAR ( 100 ) COMMENT &#x27;技能&#x27; </span><br><span class="line">) COMMENT &quot;原始职位数据表&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sqoop export \</span><br><span class="line">--connect jdbc:mysql://slave2:3306/fengrengui \</span><br><span class="line">--username hive \</span><br><span class="line">--password 0000 \</span><br><span class="line">--table jobdata_origin \</span><br><span class="line">-m 1 \</span><br><span class="line">--export-dir /user/hive/warehouse/fengrengui.db/ods_jobdata_origin \n</span><br><span class="line">--input-fields-terminated-by &quot;,&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211216233638613-1880642311.png" alt="image"></p><p>导出成功后到mysql查看是否有数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM jobdata_origin;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux 使用KVM和virt-manager</title>
      <link href="/posts/902109.html"/>
      <url>/posts/902109.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S qemu virt-manager</span><br></pre></td></tr></table></figure><p>网络相关依赖包</p><blockquote><p>没有下列软件包初始化NAT网络可能会出现异常 libvirt:Failed to initialize a valid firewall backend</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S ebtables iptables dnsmasq</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ol><li>配置 libvirtd 用户组<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/libvirt/libvirtd.conf</span><br></pre></td></tr></table></figure></li></ol><p><strong>取消注释并修改以下两行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 用户组</span><br><span class="line">unix_sock_group = &quot;wheel&quot;</span><br><span class="line"></span><br><span class="line"># unix_sock_rw_perms = &quot;0770&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>添加当前用户到用户组中<br>PS：如果用户已配置用户组则不需要进行此步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G wheel $(whoami)</span><br></pre></td></tr></table></figure></li><li><p>设置  libvirtd 开机自启</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start libvirtd</span><br><span class="line">sudo systemctl enable libvirtd</span><br></pre></td></tr></table></figure><blockquote><p>可以通过命令行 （virsh） 或通过 virt-manager 图形界面管理 libvirt 系统<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211210124655768-1402877812.png" alt="image"></p></blockquote><p><strong>建议在Home目录下创建一个文件系统目录，在此目录手动创建硬盘。自动创建可能会出现不可预知的权限问题</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211210135157452-1020889102.png" alt="image"></p><h1 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h1><h2 id="启动网卡"><a href="#启动网卡" class="headerlink" title="启动网卡"></a>启动网卡</h2><ol><li>首先建立default网卡文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /etc/libvirt/qemu/networks/default.xml                                                                                                1 ✘  19:22:18  </span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">WARNING: THIS IS AN AUTO-GENERATED FILE. CHANGES TO IT ARE LIKELY TO BE</span><br><span class="line">OVERWRITTEN AND LOST. Changes to this xml configuration should be made using:</span><br><span class="line">  virsh net-edit default</span><br><span class="line">or other application using the libvirt API.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;network&gt;</span><br><span class="line">  &lt;name&gt;default&lt;/name&gt;</span><br><span class="line">  &lt;uuid&gt;7ef2500e-b19a-4e8a-9322-467bb7e50f43&lt;/uuid&gt;</span><br><span class="line">  &lt;forward mode=&#x27;nat&#x27;/&gt;</span><br><span class="line">  &lt;bridge name=&#x27;virbr0&#x27; stp=&#x27;on&#x27; delay=&#x27;0&#x27;/&gt;</span><br><span class="line">  &lt;mac address=&#x27;52:54:00:a4:29:99&#x27;/&gt;</span><br><span class="line">  &lt;ip address=&#x27;192.168.122.1&#x27; netmask=&#x27;255.255.255.0&#x27;&gt;</span><br><span class="line">    &lt;dhcp&gt;</span><br><span class="line">      &lt;range start=&#x27;192.168.122.2&#x27; end=&#x27;192.168.122.254&#x27;/&gt;</span><br><span class="line">    &lt;/dhcp&gt;</span><br><span class="line">  &lt;/ip&gt;</span><br><span class="line">&lt;/network&gt;</span><br></pre></td></tr></table></figure></li><li>定义网卡</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo virsh net-define /etc/libvirt/qemu/networks/default.xml</span><br></pre></td></tr></table></figure><ol start="3"><li>启动网卡<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh net-start default</span><br></pre></td></tr></table></figure>4、查看网卡<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211213211605201-1675934469.png"></li></ol><h2 id="关闭DHCP服务器"><a href="#关闭DHCP服务器" class="headerlink" title="关闭DHCP服务器"></a>关闭DHCP服务器</h2><blockquote><p>如果有这个需求可按以下方式关闭</p></blockquote><ol><li><p>停止dnsmasq DHCP和DNS服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop dnsmasq</span><br><span class="line">sudo systemctl enable dnsmasq</span><br></pre></td></tr></table></figure></li><li><p>查看网卡</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo virsh net-list    </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211213211346471-1548257738.png"></p></li><li><p>已经分配的dhcp租约条目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo virsh net-dhcp-leases default                                             </span><br><span class="line"> Expiry Time   MAC 地址   Protocol   IP address   Hostname   Client ID or DUID</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">2021-12-13 16:09:57  52:54:00:c6:51:45  ipv4      192.168.122.23/24         registry        01:52:54:00:c6:51:45</span><br></pre></td></tr></table></figure></li><li><p>直接删除dhcp租约条目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /var/lib/libvirt/dnsmasq/virbr0.*</span><br><span class="line">sudo virsh net-dhcp-leases default</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211213211525833-950041815.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux 2022安装配置之Gnome40</title>
      <link href="/posts/2976737149.html"/>
      <url>/posts/2976737149.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装-Gnome"><a href="#安装-Gnome" class="headerlink" title="安装 Gnome"></a>安装 Gnome</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S gnome gnome-tweak-tool gnome-shell chrome-gnome-shell xorg-xrandr</span><br></pre></td></tr></table></figure><p><strong>设置登陆管理器自启</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable gdm</span><br><span class="line"></span><br><span class="line"># 建议重启</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h1 id="高分屏-HiDPI"><a href="#高分屏-HiDPI" class="headerlink" title="高分屏 HiDPI"></a>高分屏 HiDPI</h1><p><strong>gnome-tweak-tool 中可以调整缩放</strong><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211210151346816-160805791.png" alt="image"></p><p>高分屏用以下方法</p><blockquote><p>注意： scaling-factor仅能设置为整数。1 = 100%，2 = 200%……等等</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gsettings set org.gnome.desktop.interface scaling-factor 2</span><br></pre></td></tr></table></figure><p>如果想调整为1.2可以这么做</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 先设置为两倍大小</span><br><span class="line">gsettings set org.gnome.desktop.interface scaling-factor 2</span><br><span class="line"># 通过 xrandr 缩小倍数即可满足要求 </span><br><span class="line"># eDP1-1 为显示器名称 执行 xrandr 查看</span><br><span class="line">xrandr</span><br><span class="line">xrandr --output eDP1-1 --scale 1.8x1.8</span><br></pre></td></tr></table></figure><h1 id="fcitx5-输入法"><a href="#fcitx5-输入法" class="headerlink" title="fcitx5 输入法"></a>fcitx5 输入法</h1><blockquote><p>搭配使用 <a href="https://wiki.archlinux.org/title/Fcitx5_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/title/Fcitx5_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S  fcitx5 fcitx5-rime fcitx5-qt fcitx5-gtk fcitx5-config-qt gnome-shell-extension-kimpanel-git fcitx5-material-color</span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.pam_environment</span><br><span class="line"></span><br><span class="line">GTK_IM_MODULE DEFAULT=fcitx</span><br><span class="line">QT_IM_MODULE  DEFAULT=fcitx</span><br><span class="line">XMODIFIERS    DEFAULT=\@im=fcitx</span><br><span class="line">INPUT_METHOD  DEFAULT=fcitx</span><br><span class="line">SDL_IM_MODULE DEFAULT=fcitx</span><br><span class="line">GLFW_IM_MODULE DEFAULT=ibus</span><br></pre></td></tr></table></figure><p><strong>重启后在拓展中启动 kimpanel 插件状态栏就会出现输入法图标</strong></p><h2 id="配置小鹤音型"><a href="#配置小鹤音型" class="headerlink" title="配置小鹤音型"></a>配置小鹤音型</h2><blockquote><p>个人配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/software/git</span><br><span class="line">cd ~/software/git</span><br><span class="line">git clone https://hub.fastgit.org/maojunxyz/flypy-linux</span><br><span class="line">cp -r ~/software/git/flypy-linux/rime-data ~/.local/share/fcitx5</span><br><span class="line"></span><br><span class="line"># 重启fcitx5</span><br><span class="line">kill `ps -A | grep fcitx5 | awk &#x27;&#123;print $1&#125;&#x27;` &amp;&amp; fcitx5&amp;</span><br></pre></td></tr></table></figure><p>#配置蓝牙</p><blockquote><p><a href="https://wiki.archlinux.org/title/Bluetooth_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/title/Bluetooth_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a><br>安装软件包</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S bluez bluez-utils pulseaudio-bluetooth</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start bluetooth.service</span><br><span class="line">systemctl enable bluetooth.service</span><br></pre></td></tr></table></figure><p>重启系统即可连接蓝牙</p><h1 id="充电域值"><a href="#充电域值" class="headerlink" title="充电域值"></a>充电域值</h1><blockquote><p>配置详解 <a href="https://linrunner.de/tlp/settings/battery.html">https://linrunner.de/tlp/settings/battery.html</a><br>archlinux wiki <a href="https://wiki.archlinux.org/title/TLP_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/title/TLP_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a><br>安装tlp</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yay -S tlp</span><br><span class="line"></span><br><span class="line"># 查看电池信息</span><br><span class="line">sudo tlp-stat -b</span><br></pre></td></tr></table></figure><p>修改配置 <code>/etc/tlp.conf</code><br><strong>充电达到80%停止充电，低于75开始充电</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/tlp.conf</span><br><span class="line"></span><br><span class="line"># 搜索取消注释以下四行</span><br><span class="line">START_CHARGE_THRESH_BAT0=75</span><br><span class="line">STOP_CHARGE_THRESH_BAT0=80</span><br><span class="line"></span><br><span class="line">START_CHARGE_THRESH_BAT1=75</span><br><span class="line">STOP_CHARGE_THRESH_BAT1=80</span><br></pre></td></tr></table></figure><p><strong>一键设置充电域值脚本</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">if [[ $EUID -ne 0 ]]; then</span><br><span class="line">    echo -e &quot;\n\e[31mError!\e[0m\n\nThis script must be run as root!&quot; 1&gt;&amp;2</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo -e &quot;START_CHARGE_THRESH_BAT0=75\nSTOP_CHARGE_THRESH_BAT0=80\nSTART_CHARGE_THRESH_BAT1=75\nSTOP_CHARGE_THRESH_BAT1=80&quot; &gt; /etc/tlp.conf</span><br><span class="line"></span><br><span class="line"># restart tpl server</span><br><span class="line">systemctl restart tlp.service</span><br><span class="line"></span><br><span class="line">echo -e &quot;\n\e[32mSUCCESS!\e[0m \n\nSet the charging threshold to 80%.&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>给予可执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chmod +x battery80</span><br><span class="line"># 链接到 /usr/local/bin 目录</span><br><span class="line">sudo ln -s /home/lzscxb/software/shell/battery80 /usr/local/bin</span><br><span class="line"># 执行</span><br><span class="line">battery80</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220115224928030.png" alt="image-20220115224928030"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## 开机自启</span><br><span class="line">sudo systemctl enable tlp.service</span><br><span class="line">sudo systemctl restart tlp.service</span><br><span class="line">## 查看电池信息</span><br><span class="line">sudo tlp-stat -b</span><br></pre></td></tr></table></figure><h1 id="触摸版配置"><a href="#触摸版配置" class="headerlink" title="触摸版配置"></a>触摸版配置</h1><blockquote><p>开启三指切换工作区等多触控手势<br>应该只支持 X11(xorg)，其他请自行测试</p></blockquote><ol><li>安装多触控 GnomeExtends 插件<br><a href="https://extensions.gnome.org/extension/4033/x11-gestures/">https://extensions.gnome.org/extension/4033/x11-gestures/</a></li><li>安装触摸版手势 Touchégg<br>Github：<a href="https://github.com/JoseExposito/touchegg#gnome">https://github.com/JoseExposito/touchegg#gnome</a></li><li>安装 touche Gui 软件管理触摸版手势（可选）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S touchegg touche</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220115224953646.png" alt="image-20220115224953646"></li></ol><h1 id="笔记本最大亮度"><a href="#笔记本最大亮度" class="headerlink" title="笔记本最大亮度"></a>笔记本最大亮度</h1><blockquote><p>笔记本有时候拔出电源会自动将亮度调整最低，所以写个脚本设置最高亮度</p></blockquote><p><strong>shell脚本</strong><br><code>vim ~/software/shell/max-brightness</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">sudo sh -c &#x27;echo `cat /sys/class/backlight/amdgpu_bl0/max_brightness` &gt; /sys/class/backlight/amdgpu_bl0/brightness&#x27;</span><br></pre></td></tr></table></figure><p>设置可执行权限并链接到<code>/usr/local/bin</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x max-brightness</span><br><span class="line">sudo ln -s /home/lzscxb/software/shell/max-brightness /usr/local/bin</span><br></pre></td></tr></table></figure><p>完成后在设置中增加快捷键即可<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220115225013098.png" alt="image-20220115225013098"></p>]]></content>
      
      
      <categories>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
            <tag> Gnome </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux 上使用 Clash</title>
      <link href="/posts/285535461.html"/>
      <url>/posts/285535461.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Clash 是 Go 语言实现的，跨平台代理工具，支持规则分流等等。</p></blockquote><p>官方Github：<a href="https://github.com/Dreamacro/clash/releases">https://github.com/Dreamacro/clash/releases</a></p><h1 id="安装-Clash"><a href="#安装-Clash" class="headerlink" title="安装 Clash"></a>安装 Clash</h1><p>Linux 下载对应的 linux-amd64 即可。<br>下载对应的二进制，比如默认放到 ~/software 目录，在终端进入该目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/Dreamacro/clash/releases/download/v1.11.4/clash-linux-amd64-v1.11.4.gz</span><br><span class="line"></span><br><span class="line">gzip -d clash-linux-amd64-v1.11.4.gz</span><br></pre></td></tr></table></figure><p>移动到 <code>/usr/local/bin</code> 目录并给予可执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mv clash-linux-amd64-v1.11.4 /usr/local/bin/clash</span><br><span class="line">sudo chmod +x /usr/local/bin/clash</span><br></pre></td></tr></table></figure><h1 id="启动-Clash"><a href="#启动-Clash" class="headerlink" title="启动 Clash"></a>启动 Clash</h1><blockquote><p>clash 启动后会在 ~/.config/clash 目录生成配置文件。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 此时命令行会进入阻塞状态</span><br><span class="line">clash</span><br></pre></td></tr></table></figure><p>打开新的终端查看是否生成配置文件(3 gewenjian)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.config/clash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211208140319276-1258925038.png" alt="image"></p><h1 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/clash.service</span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Clash Daemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/clash -d /home/[用户名]/.config/clash</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">## 每只修改 xxx.service 文件都需要重启此服务</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"># 启动服务</span><br><span class="line">sudo systemctl start clash.service</span><br><span class="line"># 设置开机自启</span><br><span class="line">sudo systemctl enable clash.service</span><br><span class="line"># 查看服务状态</span><br><span class="line">sudo systemctl status clash.service</span><br></pre></td></tr></table></figure><h1 id="远程管理端口"><a href="#远程管理端口" class="headerlink" title="远程管理端口"></a>远程管理端口</h1><p>Clash 提供了默认的 9090 端口作为远端管理端口，在配置中可以看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.config/clash/config.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 远端管理端口</span><br><span class="line">external-controller: &#x27;127.0.0.1:9090&#x27;</span><br></pre></td></tr></table></figure><p>可以使用 Clash 远程管理的页面进行管理: <a href="http://clash.razord.top/#/proxies">http://clash.razord.top/#/proxies</a></p><p>如果访问失败可以启动项目dashboard：<a href="https://github.com/Dreamacro/clash-dashboard">https://github.com/Dreamacro/clash-dashboard</a></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211208174257477-621959941.png" alt="image"></p><p>这个页面要求提供，Host,Port,Secret 三个输入：</p><ul><li>Host: 127.0.0.1</li><li>Port: 9090</li><li>Secret: 配置文件配置的 secret</li></ul><p>其中 Secret 是在配置文件中通过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 可为空</span><br><span class="line">secret: &#x27;xxx&#x27;</span><br></pre></td></tr></table></figure><h1 id="添加-Proxy"><a href="#添加-Proxy" class="headerlink" title="添加 Proxy"></a>添加 Proxy</h1><blockquote><p>我自己所用的 Proxy 是 <a href="http://invcode.puyun.live/0VslDF" title="PuCloud">PuCloud</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.config/clash</span><br><span class="line"># 备份.config.yaml</span><br><span class="line">mv config.yaml config.yaml.backup</span><br><span class="line"></span><br><span class="line">wget [订阅地址] -O config.yaml</span><br></pre></td></tr></table></figure><p>登录 <a href="https://clash.razord.top/#/proxies">https://clash.razord.top/#/proxies</a> 代理一栏选择代理规则</p><h1 id="命令行代理-proxychains"><a href="#命令行代理-proxychains" class="headerlink" title="命令行代理 proxychains"></a>命令行代理 proxychains</h1><p>安装 proxychains</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S proxychains</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/proxychains.conf</span><br><span class="line"></span><br><span class="line"># 修改文件最后一行为</span><br><span class="line"># 端口是 Socks5 代理端口</span><br><span class="line">socks5  127.0.0.1 7891</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 curl www.google.com</span><br></pre></td></tr></table></figure><h2 id="使-yay-支持-proxychains"><a href="#使-yay-支持-proxychains" class="headerlink" title="使 yay 支持 proxychains"></a>使 yay 支持 proxychains</h2><blockquote><p>由于 go 语言问题, 直接使用 proxychains yay 命令会报网络错误1.<br>需要使用gcc-go重新编译yay和proxychains, 命令如下:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安装 gcc-go 替代默认的 go </span><br><span class="line">yay -S gcc-go</span><br><span class="line"></span><br><span class="line"># 克隆 PKGBUILD 并使用 makepkg 重新编译 yay:</span><br><span class="line">git clone https://aur.archlinux.org/yay.git</span><br><span class="line">cd yay</span><br><span class="line"># 可以会下载不了就使用代理</span><br><span class="line">proxychains4 makepkg -si</span><br></pre></td></tr></table></figure><h1 id="chrome-代理"><a href="#chrome-代理" class="headerlink" title="chrome 代理"></a>chrome 代理</h1><p>下载 Proxy-SwitchyOmega-Chromium 插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/software</span><br><span class="line">wget https://proxy-switchyomega.com/file/Proxy-SwitchyOmega-Chromium-2.5.15.crx</span><br><span class="line"></span><br><span class="line">unzip Proxy-SwitchyOmega-Chromium-2.5.15.crx -d Proxy-SwitchyOmega-Chromium-2.5.15</span><br></pre></td></tr></table></figure><p>Chrome 安装插件<br>浏览器访问 <a href="chrome://extensions/" title="chrome://extensions/">chrome://extensions/</a> 进入插件管理</p><ol><li>开启开发模式</li><li>加载刚刚解压的 Proxy-SwitchyOmega</li><li>修改 Proxy-SwitchyOmega 代理规则<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211208180551571-1885700282.png" alt="image"></li></ol>]]></content>
      
      
      <categories>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Clash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux 2022安装配置之DWM</title>
      <link href="/posts/2673031142.html"/>
      <url>/posts/2673031142.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装必须软件包"><a href="#安装必须软件包" class="headerlink" title="安装必须软件包"></a>安装必须软件包</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S git make cmake gcc xorg-server xorg-xinit xorg-xrandr feh pcmanfm pkg-config yay</span><br></pre></td></tr></table></figure><h1 id="DWM"><a href="#DWM" class="headerlink" title="DWM"></a>DWM</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mkidr ~/software/suckless</span><br><span class="line">cd ~/software/suckless</span><br><span class="line">git clone https://git.suckless.org/dwm</span><br><span class="line">git clone https://git.suckless.org/st</span><br><span class="line">git clone https://git.suckless.org/dmenu</span><br><span class="line"></span><br><span class="line">cd ~/software/suckless/dwm</span><br><span class="line">sudo make clean install</span><br><span class="line"></span><br><span class="line">cd ~/software/suckless/st</span><br><span class="line">sudo make clean install</span><br><span class="line"></span><br><span class="line">cd ~/software/suckless/dmenu</span><br><span class="line">sudo make clean install</span><br></pre></td></tr></table></figure><h2 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h2><ol><li>安装 st 时提示<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/include/X11/Xft/Xft.h:39:22: fatal error: ft2build.h: No such file or directory</span><br></pre></td></tr></table></figure>问题描述:<br>在字体设置文件夹中，没有找到ft2build.h文件，即使复制ft2build.h到/usr/include/fontconfig/目录下或者创建软连接，编译出现同样问题。<br>原因分析：一是系统中没有相关的头文件，二是在编译过程中，gcc和g++没有找到对应的头文件，并不是系统中不存在文件。<br>解决方法:<br>在编译过程中，添加头文件路径。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/software/suckless/st</span><br><span class="line">vim config.mk</span><br></pre></td></tr></table></figure>在文件头部添加以下内容<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export C_INCLUDE_PATH=/usr/include/freetype2</span><br><span class="line">export CPLUS_INCLUDE_PATH=/usr/include/freetype2</span><br></pre></td></tr></table></figure><blockquote><p>此处只做基本安装配置，详细配置请见</p></blockquote></li></ol><h2 id="屏幕亮度暗"><a href="#屏幕亮度暗" class="headerlink" title="屏幕亮度暗"></a>屏幕亮度暗</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看最大亮度</span><br><span class="line">cat /sys/class/backlight/amdgpu_bl0/max_brightness</span><br><span class="line"># 修改为合适的数值</span><br><span class="line">sudo vim /sys/class/backlight/amdgpu_bl0/brightness</span><br></pre></td></tr></table></figure><h1 id="自动挂载U盘"><a href="#自动挂载U盘" class="headerlink" title="自动挂载U盘"></a>自动挂载U盘</h1><blockquote><p><a href="https://wiki.archlinux.org/title/Udisks_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#udiskie">https://wiki.archlinux.org/title/Udisks_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#udiskie</a></p></blockquote><p><strong>安装软件包</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S udisks2 udiskie</span><br></pre></td></tr></table></figure><p><strong>启动时自动运行 uidskie 挂载程序</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim .xinitrc</span><br><span class="line"></span><br><span class="line"># 在exce dwm 之前加上</span><br><span class="line">udiskie &amp;</span><br></pre></td></tr></table></figure><p>默认情况下可移动设备挂载到 /run/media/$USER/ 目录下。如果你希望改为挂载到 /media 目录下，应用这条规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/udev/rules.d/99-udisks2.rules</span><br><span class="line"></span><br><span class="line"># UDISKS_FILESYSTEM_SHARED</span><br><span class="line"># ==1: mount filesystem to a shared directory (/media/VolumeName)</span><br><span class="line"># ==0: mount filesystem to a private directory (/run/media/$USER/VolumeName)</span><br><span class="line"># See udisks(8)</span><br><span class="line">ENV&#123;ID_FS_USAGE&#125;==&quot;filesystem|other|crypto&quot;, ENV&#123;UDISKS_FILESYSTEM_SHARED&#125;=&quot;1&quot;</span><br></pre></td></tr></table></figure><p><strong>重启后生效</strong></p><h1 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h1><h2 id="fcitx5"><a href="#fcitx5" class="headerlink" title="fcitx5"></a>fcitx5</h2><blockquote><p><a href="https://wiki.archlinux.org/title/Fcitx5_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/title/Fcitx5_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p></blockquote><p>安装软件包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5 fcitx5-qt fcitx5-gtk fcitx5-rime fcitx5-configtool fcitx5-material-color</span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.pam_environment</span><br><span class="line"></span><br><span class="line">GTK_IM_MODULE DEFAULT=fcitx</span><br><span class="line">QT_IM_MODULE  DEFAULT=fcitx</span><br><span class="line">XMODIFIERS    DEFAULT=\@im=fcitx</span><br><span class="line">INPUT_METHOD  DEFAULT=fcitx</span><br><span class="line">SDL_IM_MODULE DEFAULT=fcitx</span><br><span class="line">GLFW_IM_MODULE DEFAULT=ibus</span><br></pre></td></tr></table></figure><p>配置 dwm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim .xinitrc</span><br><span class="line"></span><br><span class="line"># 在exce dwm 之前加上</span><br><span class="line">fcitx5 &amp;</span><br></pre></td></tr></table></figure><p>需手动启动fcitx-configtool 添加输入法<br><strong>重启系统后生效</strong></p>]]></content>
      
      
      <categories>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux 2022安装配置（一）</title>
      <link href="/posts/2181260631.html"/>
      <url>/posts/2181260631.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本安装指南假设你至少知道在 Linux 如何执行命令以及一些基础的电脑知识。<br>搭配官方Wiki <a href="https://wiki.archlinux.org/title/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/title/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p></blockquote><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p><strong>你需要一台支持 UEFI 引导的 64 位（x86-64）的电脑，最好拥有有线网络连接，务必不要使用蓝牙鼠标。</strong><br><strong>如果你的电脑不支持 UEFI，那么以下某些步骤可能不适合你</strong></p><p>下载系统，前往 <a href="https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/">https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/</a> 下载 ArchLinux 的镜像文件</p><p>准备一个U盘，U盘容量大于镜像文件大小即可，用于制作安装盘。</p><p><strong>使用 Rufus 制作启动盘</strong><br><strong>注意：制作过程将清空 U 盘数据，制作之前务必做好数据备份。</strong><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211206235247616-500938888.png"></p><h1 id="版本区别"><a href="#版本区别" class="headerlink" title="版本区别"></a>版本区别</h1><p>archlinux 的 iso 镜像文件自 2020.06.01 开始改了很多东西，大概就这几个方面：</p><ol><li>archiso默认的 shell 是 zsh ，不再是 bash 了。</li><li>archlinux摒弃了之前的 wifi-menu ，改为使用 iwd 来管理网络。</li><li>对于镜像源的管理，采用 reflector 进行管理，终于不用去手动更改镜像源的位置了，使用 reflector 一条命令就搞定了。</li></ol><h1 id="安装-ArchLinux"><a href="#安装-ArchLinux" class="headerlink" title="安装 ArchLinux"></a>安装 ArchLinux</h1><p>将 U盘 插入主机 进入 UEFI 选择U盘启动进入 Archlinux 安装界面<br><strong>PS：如果你的电脑启用了 UEFI 安全启动，必须关闭安全启动才可以成功启动。</strong><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211207000249668-358577810.png" alt="image"><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211207154653089-382762956.png" alt="image"><br>执行检测当前引导模式是否是 UEFI</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /sys/firmware/efi/efivars</span><br></pre></td></tr></table></figure><p>如果没有列出文件，表示当前没有以 UEFI 模式启动，检查你的电脑是否支持以及 BIOS 设置 。<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211207123403047-1323363534.png" alt="image"></p><h2 id="连接网络"><a href="#连接网络" class="headerlink" title="连接网络"></a>连接网络</h2><h3 id="判断无线网卡是否被锁"><a href="#判断无线网卡是否被锁" class="headerlink" title="判断无线网卡是否被锁"></a>判断无线网卡是否被锁</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># rfkill list</span><br><span class="line">--------------</span><br><span class="line">0: phy0: Wireless LAN</span><br><span class="line">    Soft blocked: yes</span><br><span class="line">    Hard blocked: yes</span><br></pre></td></tr></table></figure><p>如果出现以上内容，可以调节网卡开关打开它。如果没有开关，那就使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># rfkill unblock wifi</span><br></pre></td></tr></table></figure><h3 id="使用-Iwctl-连接-WIFI"><a href="#使用-Iwctl-连接-WIFI" class="headerlink" title="使用 Iwctl 连接 WIFI"></a>使用 Iwctl 连接 WIFI</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ iwctl</span><br><span class="line">[iwd]# help    // 可以查 看帮助</span><br><span class="line">[iwd]# device list    //列出你的无线设备名称，一般以wlan0命名</span><br><span class="line">[iwd]# station &lt;device&gt; scan    // 扫描当前环境下的网络</span><br><span class="line">[iwd]# station &lt;device&gt; get-networks    // 会显示你扫描到的所有网络</span><br><span class="line">[iwd]# station &lt;device&gt; connect &lt;network name&gt;</span><br><span class="line">password:输入密码</span><br><span class="line">[iwd]# exit    //退出当前模式，回到安装模式</span><br></pre></td></tr></table></figure><p>测试网络是否连通：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping baidu.com</span><br></pre></td></tr></table></figure><h2 id="更新为国内镜像源"><a href="#更新为国内镜像源" class="headerlink" title="更新为国内镜像源"></a>更新为国内镜像源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reflector --country China --age 72 --sort rate --protocol https --save /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><p>已将最新的<a href="https://www.zhihu.com/search?q=%E9%95%9C%E5%83%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:433920079%7D">镜像</a>源更新为国内的，保存在/etc/pacman.d/mirrorlist目录下</p><h2 id="更新系统时间"><a href="#更新系统时间" class="headerlink" title="更新系统时间"></a>更新系统时间</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-ntp true</span><br><span class="line"># 确保设置成功</span><br><span class="line">timedatectl status</span><br></pre></td></tr></table></figure><h2 id="系统分区"><a href="#系统分区" class="headerlink" title="系统分区"></a>系统分区</h2><table><thead><tr><th>分区</th><th>挂载点</th><th>建议大小</th></tr></thead><tbody><tr><td>EFI Sytem</td><td>/mnt/efi</td><td>&gt;512M</td></tr><tr><td>Linux Swap</td><td>[swap]</td><td>16G</td></tr><tr><td>Linux Root（/）</td><td>/mnt</td><td>90G</td></tr><tr><td>Linux Home</td><td>/mnt/home</td><td>剩余的全部空间</td></tr></tbody></table><h3 id="检查硬盘"><a href="#检查硬盘" class="headerlink" title="检查硬盘"></a>检查硬盘</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><p>[图片]</p><h3 id="建立分区"><a href="#建立分区" class="headerlink" title="建立分区"></a>建立分区</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfdisk /dev/nvme0n1</span><br></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/2354934/202112/2354934-20211207154807442-584500200.png" alt="image"></p><h3 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h3><p>按照上面的步骤建立好分区之后，我们需要将每个分区用对应的文件系统进行格式化。<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211207154930436-1714430350.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211207154942671-786323550.png" alt="image"></p><p>对于 root 分区、home 分区等直接使用 ext4 文件系统进行格式化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/nvme0n1p3</span><br><span class="line">mkfs.ext4 /dev/nvme0n1p4</span><br></pre></td></tr></table></figure><p>格式化 EFI 系统分区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.fat -F32 /dev/nvme0n1p1</span><br></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/2354934/202112/2354934-20211207155342719-1734181879.png" alt="image"></p><p>格式化 Swap</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkswap /dev/nvme0n1p2</span><br><span class="line">swapon /dev/nvme0n1p2</span><br></pre></td></tr></table></figure><h3 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h3><p>首先挂载root分区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/nvme0n1p3 /mnt</span><br></pre></td></tr></table></figure><p>对于其他分区（swap分区除外，不需要），需要自己手动创建挂载点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /mnt/efi</span><br><span class="line">mount /dev/nvme0n1p1 /mnt/efi</span><br><span class="line">mkdir /mnt/home</span><br><span class="line">mount /dev/nvme0n1p4 /mnt/home</span><br></pre></td></tr></table></figure><h2 id="安装必须软件包"><a href="#安装必须软件包" class="headerlink" title="安装必须软件包"></a>安装必须软件包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap /mnt base linux linux-firmware vim</span><br></pre></td></tr></table></figure><h2 id="生成-fstab-文件"><a href="#生成-fstab-文件" class="headerlink" title="生成 fstab 文件"></a>生成 fstab 文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure><p>检查生成的fstab文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /mnt/etc/fstab</span><br></pre></td></tr></table></figure><p>如图说明一切正确<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211207155435910-479581177.png" alt="image"></p><h1 id="配置新系统"><a href="#配置新系统" class="headerlink" title="配置新系统"></a>配置新系统</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure><h2 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><p>然后运行 hwclock 以生成 /etc/adjtime：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure><h2 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h2><blockquote><p>本地化的程序与库若要本地化文本，都依赖Locale，后者明确规定地域、货币、时区日期的格式、&gt;字符排列方式和其他本地化标准等等。</p></blockquote><ol><li><p>在下面两个文件设置：locale.gen 与 locale.conf。<br>首先编辑/etc/locale.gen文件，然后将需要的地区的注释移除，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim etc/locale.gen</span><br></pre></td></tr></table></figure><p>将<code>en_US UTF-8</code>和<code>zh_CN UTF-8</code>都取消注释。</p></li><li><p>创建并写入/etc/locale.conf文件<br>创建locale.conf文件并编辑LANG这一变量（将系统locale 设置为en_US.UTF-8，系统的 Log 就会用英文显示，这样更容易问题的判断和处理。）：</p></li></ol><p>这里最好不要设置为中文locale，会导致TTY乱码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</span><br><span class="line">cat /etc/locale.conf</span><br></pre></td></tr></table></figure><ol start="3"><li>执行命令生成locale。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locale-gen</span><br></pre></td></tr></table></figure></li></ol><h2 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h2><ol><li>创建 hostname 文件:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo lzscxb &gt; /etc/hostname</span><br><span class="line">cat /etc/hostname</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>添加对应的信息到 hosts(5):<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>如果系统有常设的 IP 地址，请使用这个常设的 IP 地址而不是 127.0.1.1。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost</span><br><span class="line">127.0.1.1lzscxb.localdomainlzscxb # 主机名.本地域名 主机名</span><br></pre></td></tr></table></figure></li></ol><h2 id="Root-密码"><a href="#Root-密码" class="headerlink" title="Root 密码"></a>Root 密码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><h2 id="安装及配置引导程序"><a href="#安装及配置引导程序" class="headerlink" title="安装及配置引导程序"></a>安装及配置引导程序</h2><h3 id="安装基本包"><a href="#安装基本包" class="headerlink" title="安装基本包"></a>安装基本包</h3><p><strong>警告：</strong> 这是安装的最后但也至关重要的一步，请按上述指引正确安装好引导加载程序后再重新启动。否则将无法正常进入系统。</p><p><strong>如果你不知道这些包的作用，请务必确保输入的指令与下面的一致</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[修改有待观察是否需要那么多包，可能是多系统才需要]</span><br><span class="line">pacman -S grub efibootmgr networkmanager sudo base-devel</span><br></pre></td></tr></table></figure><p>检查完毕回车，需要选择直接回车就好，等待安装结束</p><h3 id="配置-Grub"><a href="#配置-Grub" class="headerlink" title="配置 Grub"></a>配置 Grub</h3><blockquote><p>因为我的EFI分区在 /efi 目录下，所以上述命令的 –efi-directory 参数就设置为 /efi</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=ArchLinux</span><br></pre></td></tr></table></figure><p>生成grub配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><h3 id="安装微码"><a href="#安装微码" class="headerlink" title="安装微码"></a>安装微码</h3><p><strong>如果你是 Intel 的 CPU，需要安装intel的微码文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S intel-ucode</span><br></pre></td></tr></table></figure><p><strong>如果是 amd</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S amd-ucode</span><br></pre></td></tr></table></figure><h3 id="启用-NetworkManager"><a href="#启用-NetworkManager" class="headerlink" title="启用 NetworkManager"></a>启用 NetworkManager</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable NetworkManager</span><br></pre></td></tr></table></figure><h3 id="重启系统"><a href="#重启系统" class="headerlink" title="重启系统"></a>重启系统</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br><span class="line"></span><br><span class="line">umount -a</span><br><span class="line"></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p><strong>启动时请拔出u盘</strong></p><h1 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -m -G wheel lzscxb</span><br><span class="line"></span><br><span class="line">passwd lzscxb</span><br></pre></td></tr></table></figure><h2 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers</span><br><span class="line"></span><br><span class="line"># 取消这行注释</span><br><span class="line">%wheel ALL=(ALL) ALL</span><br><span class="line"></span><br><span class="line"># 在 root ALL=(ALL) ALL 下面添加</span><br><span class="line">用户名 ALL=(ALL) ALL</span><br></pre></td></tr></table></figure><p><strong>切换用户</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su 用户名</span><br></pre></td></tr></table></figure><h1 id="添加-archlinuxcn-源"><a href="#添加-archlinuxcn-源" class="headerlink" title="添加 archlinuxcn 源"></a>添加 archlinuxcn 源</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/pacman.conf</span><br><span class="line"># 取消注释</span><br><span class="line">[multilib]                                                                                </span><br><span class="line">Include = /etc/pacman.d/mirrorlist </span><br><span class="line"></span><br><span class="line"># 添加以下内容</span><br><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Never</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure><p><strong>导入 GPG key</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syy</span><br><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><h1 id="解决关机慢或等待1分30秒问题"><a href="#解决关机慢或等待1分30秒问题" class="headerlink" title="解决关机慢或等待1分30秒问题"></a>解决关机慢或等待1分30秒问题</h1><p>1.打开需要编辑的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system.conf</span><br></pre></td></tr></table></figure><p>去除文件中默认的注释，修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DefaultTimeoutStartSec=5s</span><br><span class="line">DefaultTimeoutStopSec=5s</span><br><span class="line">DefaultRestartSec=100ms</span><br></pre></td></tr></table></figure><ol start="2"><li>使配置文件生效<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure></li></ol><h1 id="蓝牙-bluez"><a href="#蓝牙-bluez" class="headerlink" title="蓝牙 bluez"></a>蓝牙 bluez</h1><blockquote><p><a href="https://github.com/bluez">https://github.com/bluez</a><br><a href="https://wiki.archlinux.org/index.php/Bluetooth_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/Bluetooth_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p></blockquote><p>安装软件包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S bluez bluez-utils bluedevil</span><br></pre></td></tr></table></figure><p>PS：如果你打开APP蓝牙会断开的话请检查 blue版本是否是5.62<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211231170604965-2094302603.png" alt="image"></p><p>如果是 5.62 则需要安装编译安装git上最新的版本即可解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S bluez-git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBase集群安装部署</title>
      <link href="/posts/3669262003.html"/>
      <url>/posts/3669262003.html</url>
      
        <content type="html"><![CDATA[<p><strong>Master节点</strong></p><ol><li>下载安装包<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://archive.apache.org/dist/hbase/2.3.3/</span><br></pre></td></tr></table></figure></li><li>解压安装包到指定的规划目录 <code>/opt/software</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf hbase-2.3.3-bin.tar.gz -C /opt/servers</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1></li></ol><h2 id="指定-JDK"><a href="#指定-JDK" class="headerlink" title="指定 JDK"></a>指定 JDK</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vcd /opt/servers/hbase-2.3.3/conf</span><br><span class="line">vim hbase-env.sh</span><br><span class="line"></span><br><span class="line"># 修改以下配置</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_202</span><br><span class="line"></span><br><span class="line"># 不使用自带的zk</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br></pre></td></tr></table></figure><h1 id="修改hbase-site-xml"><a href="#修改hbase-site-xml" class="headerlink" title="修改hbase-site.xml"></a>修改hbase-site.xml</h1><p><code>vim hbase-site.xml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--指定hbase是分布式的  PS:如果配置文件中有则修改，没有则添加--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--指定hbase在HDFS上存储的路径--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">&lt;value&gt;hdfs://master:9000/hbase&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--指定zk的地址，多个用“，”分割--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">&lt;value&gt;master:2181,slave1:2181,slave2:2181&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h1 id="修改regionservers文件"><a href="#修改regionservers文件" class="headerlink" title="修改regionservers文件"></a>修改regionservers文件</h1><p>指定regionserver节点<br><code>vim regionservers</code><br><strong>删除文件中的所有内容！！！在添加以下内容</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure><h1 id="分发-HBase"><a href="#分发-HBase" class="headerlink" title="分发 HBase"></a>分发 HBase</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/servers</span><br><span class="line">rsync-script hbase-2.3.3</span><br></pre></td></tr></table></figure><h1 id="配置-HBase-环境变量"><a href="#配置-HBase-环境变量" class="headerlink" title="配置 HBase 环境变量"></a>配置 HBase 环境变量</h1><p><strong>所有机器都需要配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"># HBase</span><br><span class="line">export HBASE_HOME=/opt/servers/hbase-2.3.3</span><br><span class="line">export PATH=$PATH:$HBASE_HOME/bin</span><br><span class="line"></span><br><span class="line"># 使配置生效</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h1 id="启动-Hbase-集群"><a href="#启动-Hbase-集群" class="headerlink" title="启动 Hbase 集群"></a>启动 Hbase 集群</h1><ul><li>前提条件：必须先启动hadoop和zookeeper集群<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 如果已经启动则忽略</span><br><span class="line"># master 节点 启动 Hadoop</span><br><span class="line">start-dfs.sh</span><br><span class="line"># slave2 节点 启动 YARN</span><br><span class="line">satrt-yarn.sh</span><br><span class="line"># master 节点 启动zk</span><br><span class="line">~/shells/zk.sh start</span><br></pre></td></tr></table></figure></li></ul><p><strong>启动 / 停止 HBase</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start-hbase.sh</span><br><span class="line">stop-hbase.sh</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211122212802829-394336554.png" alt="image"></p><p><strong>启动完成后可以通过 <a href="http://master:16010/">http://master:16010</a> 进入Hbase Web端</strong></p><p><strong>启动hbase集群后如果只显示master  请检查配置和系统时间是否一致</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211122213056120-1438420162.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper 集群安装配置</title>
      <link href="/posts/609155046.html"/>
      <url>/posts/609155046.html</url>
      
        <content type="html"><![CDATA[<h1 id="Zookeeper-是什么？"><a href="#Zookeeper-是什么？" class="headerlink" title="Zookeeper 是什么？"></a>Zookeeper 是什么？</h1><p>Zookeeper是一个分布式协调服务的开源框架。主要用来解决分布式集群中应用系统的一致性问题，例如怎样避免同时操作同一数据造<br>成脏读的问题。</p><ul><li>ZooKeeper本质上是一个分布式的小文件存储系统。提供基于类似于文件系统的目录树方式的数据存储，并且可以对树中的节点进行有效管理。</li><li>ZooKeeper提供给客户端监控存储在zk内部数据的功能，从而可以达到基于数据的集群管理。诸如：统一命名服务（dubbo)、分布式配置管理（solr的配置集中管理）、分布式消息队列（sub/pub)、分布式锁、分布式协调等功能。</li></ul><h1 id="Zookeeper-环境搭建"><a href="#Zookeeper-环境搭建" class="headerlink" title="Zookeeper 环境搭建"></a>Zookeeper 环境搭建</h1><h2 id="Zookeeper的搭建方式"><a href="#Zookeeper的搭建方式" class="headerlink" title="Zookeeper的搭建方式"></a>Zookeeper的搭建方式</h2><p>Zookeeper 安装方式有三种，单机模式和集群模式以及伪集群模式。</p><ul><li>单机模式：Zookeeper只运行在一台服务器上，适合测试环境；</li><li>伪集群模式：就是在一台服务器上运行多个 Zookeeper 实例；</li><li>集群模式：Zookeeper 运行于一个集群上，适合生产环境，这个计算机集群被称为一个“集合体”</li></ul><h2 id="Zookeeper集群搭建"><a href="#Zookeeper集群搭建" class="headerlink" title="Zookeeper集群搭建"></a>Zookeeper集群搭建</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p><strong>Master 节点中</strong><br><strong>下载并解压</strong><br>首先我们下载稳定版本的zookeeper <a href="http://zookeeper.apache.org/releases.html">http://zookeeper.apache.org/releases.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://dlcdn.apache.org/zookeeper/zookeeper-3.7.1/apache-zookeeper-3.7.1-bin.tar.gz -P /opt/software</span><br><span class="line"></span><br><span class="line">tar -zxvf apache-zookeeper-3.7.1-bin.tar.gz -C /opt/servers</span><br><span class="line"></span><br><span class="line">cd /opt/servers</span><br><span class="line">mv apache-zookeeper-3.7.1-bin zookeeper-3.7.1</span><br></pre></td></tr></table></figure><h3 id="修改配置并创建-data-和-log-目录"><a href="#修改配置并创建-data-和-log-目录" class="headerlink" title="修改配置并创建 data 和 log 目录"></a>修改配置并创建 data 和 log 目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 创建 data 和 log 目录</span><br><span class="line">mkdir -p /opt/servers/zookeeper-3.7.1/data/log</span><br><span class="line"># 进入配置目录</span><br><span class="line">cd /opt/servers/zookeeper-3.7.1/conf</span><br><span class="line"># 复制一份配置模版并重命名</span><br><span class="line">mv zoo_sample.cfg zoo.cfg</span><br><span class="line">vim zoo.cfg</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">dataDir=/opt/servers/zookeeper-3.7.1/data</span><br><span class="line"># 新增</span><br><span class="line">dataLogDir=/opt/servers/zookeeper-3.7.1/data/log</span><br><span class="line"># 打开注释</span><br><span class="line">#ZK提供了自动清理事务日志和快照文件的功能，这个参数指定了清理频率，单位是小时</span><br><span class="line">autopurge.purgeInterval=1</span><br><span class="line"></span><br><span class="line"># 新增集群配置</span><br><span class="line"># server.服务器ID=服务器IP地址：服务器之间通信端口：服务器之间投票选举端</span><br><span class="line">server.1=master:2888:3888</span><br><span class="line">server.2=slave1:2888:3888</span><br><span class="line">server.3=slave2:2888:3888</span><br></pre></td></tr></table></figure><h3 id="添加myid配置"><a href="#添加myid配置" class="headerlink" title="添加myid配置"></a>添加myid配置</h3><p>1.在zookeeper的data目录下创建一个myid文件，内容为1,这个文件就是记录每个服务器的ID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/servers/zookeeper-3.7.1/data</span><br><span class="line">echo 1 &gt; myid</span><br></pre></td></tr></table></figure><h2 id="将Zookeeper分发到其他节点"><a href="#将Zookeeper分发到其他节点" class="headerlink" title="将Zookeeper分发到其他节点"></a>将Zookeeper分发到其他节点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/servers</span><br><span class="line">rsync-script zookeeper-3.7.1/</span><br></pre></td></tr></table></figure><p><strong>修改slave1和slave2的myid</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># slave1 节点</span><br><span class="line">echo 2 &gt; /opt/servers/zookeeper-3.7.1/data/myid</span><br><span class="line"></span><br><span class="line"># slave2 节点</span><br><span class="line">echo 3 &gt; /opt/servers/zookeeper-3.7.1/data/myid</span><br></pre></td></tr></table></figure><h2 id="启动-Zk-实例"><a href="#启动-Zk-实例" class="headerlink" title="启动 Zk 实例"></a>启动 Zk 实例</h2><p><strong>三个节点都要执行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/servers/zookeeper-3.7.1/bin/zkServer.sh start</span><br></pre></td></tr></table></figure><p><strong>查看Zk启动情况</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/servers/zookeeper-3.7.1/bin/zkServer.sh status</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211122132136655-835425517.png" alt="image"></p><h2 id="群起-Zk-脚本"><a href="#群起-Zk-脚本" class="headerlink" title="群起 Zk 脚本"></a>群起 Zk 脚本</h2><blockquote><p>因为每次都要在三台机子上执行启动命令，所以自己我们就自己写一个启动脚本</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~ </span><br><span class="line">mkdir shells                                  </span><br><span class="line">cd shells </span><br><span class="line">vim zk.sh</span><br></pre></td></tr></table></figure><p>**将以下文件写如到 zk.sh 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">echo &quot;$1 zookeeper server...&quot;</span><br><span class="line">if(($#==0));then</span><br><span class="line">echo &quot;no param&quot;;</span><br><span class="line">exit;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 此处写上你的三台</span><br><span class="line">hosts=&quot;master slave1 slave2&quot;</span><br><span class="line"></span><br><span class="line">for host in $hosts</span><br><span class="line">do</span><br><span class="line">echo &quot;$host server $&#123;1&#125;ing...&quot;</span><br><span class="line">ssh $host &quot;source /etc/profile;/opt/servers/zookeeper-3.7.1/bin/zkServer.sh $1&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>赋予执行权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 zk.sh</span><br></pre></td></tr></table></figure><p><strong>启动 / 停止 zookeeper 集群</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 启动</span><br><span class="line">~/shells/zk.sh start</span><br><span class="line"># 停止</span><br><span class="line">~/shells/zk.sh stop</span><br><span class="line"># 查看服务状态</span><br><span class="line">~/shells/zk.sh status</span><br></pre></td></tr></table></figure><p>启动成功后所有机器上都有这个服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211122145022527-1344388373.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hue 交互工具安装并与Hdfs、Hive集成</title>
      <link href="/posts/2339088039.html"/>
      <url>/posts/2339088039.html</url>
      
        <content type="html"><![CDATA[<h1 id="HUE"><a href="#HUE" class="headerlink" title="HUE"></a>HUE</h1><p>第一部分Hue概述<br>Hue(Hadoop User Experience)是一个开源的 Apache Hadoop UI系统，最早是由 Cloudera Desktop演化而来，由Cloudera贡献给开源社区，它是基于PythonWeb框架Django实现的。通过使用Hue可以在浏览器端的Web控制台上与Hadoop集群进行交互来分析处理数据，例如操作HDFS上的数据，运行MapReduceJob等等。Hue所支持的功能特性集合：</p><ul><li>默认基于轻量级sqlite数据库管理会话数据，用户认证和授权，可以自定义为MySQL、Postgresql,以及Oracle</li><li>基于文件浏览器（File Browser)访问HDFS</li><li>基于Hive编辑器来开发和运行Hive查询</li><li>支持基于Solr进行搜索的应用，并提供可视化的数据视图，以及仪表板（Dashboard)</li><li>支持基于Impala的应用进行交互式查询</li><li>支持Spark编辑器和仪表板（Dashboard)</li><li>支持Pig编辑器，并能够提交脚本任务</li><li>支持Oozie编辑器，可以通过仪表板提交和监控Workflow、Coordinator和Bundle</li><li>支持HBase浏览器，能够可视化数据、查询数据、修改HBase表</li><li>支持Metastore浏览器，可以访问Hive的元数据，以及HCatalog</li><li>支持Job浏览器，能够访问MapReduce Job(MR1/MR2-YARN)</li><li>支持Job设计器，能够创建MapReduce/Streaming/Java Job</li><li>支持Sqoop 2编辑器和仪表板（Dashboard)</li><li>支持ZooKeeper浏览器和编辑器</li><li>支持MySql、PostGresql、Sqlite和Oracle数据库查询编辑器</li></ul><p>一句话总结：Hue是一个友好的界面集成框架，可以集成我们各种学习过的以及将要学习的框架，一个界面就可以做到查看以及执行所有的框架。</p><h1 id="HUE-1"><a href="#HUE-1" class="headerlink" title="HUE"></a>HUE</h1><p>官方网址：<a href="https://gethue.com/">https://gethue.com/</a></p><p>Hue的安装并不是那么简单，官方并没有编译好的软件包，需要从github上下载源码、安装依赖、编译安装。以下详细讲解Hue下载、编译、安装的操作过程。</p><p><strong>安装Hue的节点上最好没有安装过MySQL,否则可能有版本冲突，这里选择将Hue安装在slave1上。</strong></p><h1 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h1><p>1.hue-release-4.10.0.tar.gz<br>2.apache-maven-3.8.3-bin.tar.gz<br><a href="https://dlcdn.apache.org/maven/maven-3/3.8.3/binaries/apache-maven-3.8.3-bin.tar.gz">https://dlcdn.apache.org/maven/maven-3/3.8.3/binaries/apache-maven-3.8.3-bin.tar.gz</a></p><p>将软件包下载至 <code>/opt/software</code></p><p>解压至<code>/opt/servers</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-maven-3.8.3-bin.tar.gz -C /opt/servers</span><br><span class="line">tar -zxvf hue-release-4.10.0.tar.gz -C /opt/servers</span><br><span class="line"># 检查软件包的完整性</span><br></pre></td></tr></table></figure><h1 id="安装必要依赖"><a href="#安装必要依赖" class="headerlink" title="安装必要依赖"></a>安装必要依赖</h1><blockquote><p>具体参见：<a href="https://docs.gethue.com/administrator/installation/dependencies/#centosrhel">https://docs.gethue.com/administrator/installation/dependencies/#centosrhel</a></p></blockquote><p>Python2.7以上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># CentOS/RHEL 系统所需依赖</span><br><span class="line">yum -y install ant asciidoc cyrus-sasl-devel cyrus-sasl-gssapi cyrus-sasl-plain gcc gcc-c++ krb5-devel libffi-devel libxml2-devel libxslt-devel make mysql mysql-devel openldap-devel python-devel sqlite-devel gmp-devel</span><br></pre></td></tr></table></figure><p>Node.js 安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v16.13.0/node-v16.13.0-linux-x64.tar.xz</span><br><span class="line">tar -xvf node-v16.13.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><p>Node.js 环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"># Node.js</span><br><span class="line">export PATH=$PATH:/opt/software/node-v16.13.0/bin</span><br></pre></td></tr></table></figure><h1 id="设置-Maven-环境变量"><a href="#设置-Maven-环境变量" class="headerlink" title="设置 Maven 环境变量"></a>设置 Maven 环境变量</h1><p>编译 Hue 还需要 Maven 环境，因此在编译前需要安装 Maven。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"># 添加环境变量</span><br><span class="line"># MAVEN</span><br><span class="line">export MAVEN_HOME=/opt/software/apache-maven-3.8.3</span><br><span class="line">export PATH=$PATH:$MAVEN_HOME/bin</span><br><span class="line"></span><br><span class="line"># 验证安装</span><br><span class="line">source /etc/profile</span><br><span class="line">mvn -v</span><br></pre></td></tr></table></figure><h1 id="编译-Hue"><a href="#编译-Hue" class="headerlink" title="编译 Hue"></a>编译 Hue</h1><p>:进入hue源码目录，进行编译。使用 PREFIX 指定安装 Hue 的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 进入源码目录</span><br><span class="line">cd /opt/software/hue-release-4.10.0</span><br><span class="line"></span><br><span class="line">PREFIX=/opt/servers make install</span><br></pre></td></tr></table></figure><p>注意：编译需要下载 Jar 包所以要保持联网状态，编译过程可能需要持续30分钟</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211121160453287-388372241.png" alt="image"></p><h1 id="修改-Hadoop-配置"><a href="#修改-Hadoop-配置" class="headerlink" title="修改 Hadoop 配置"></a>修改 Hadoop 配置</h1><p>在 hdfs-site.xml 中增加配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HUE --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;!-- HDFS Web 服务 --&gt;</span><br><span class="line">    &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.permissions.enabled&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>在core-site.xml中增加配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HUE --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.proxyuser.hue.hosts&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.proxyuser.hue.groups&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.proxyuser.hdfs.hosts&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.proxyuser.hdfs.groups&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>增加 httpfs-site.xml 文件，加入配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--HUE--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;httpfs.proxyuser.hue.hosts&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;httpfs.proxyuser.hue.groups&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>分发到其他节点中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rsync-script hdfs-site.xml</span><br><span class="line">rsync-script core-site.xml</span><br><span class="line">rsync-script httpfs-site.xml</span><br></pre></td></tr></table></figure><p>备注：修改完HDFS相关配置后，需要把配置 scp 给集群中每台机器，重启hdfs服务。</p><h1 id="Hue-配置"><a href="#Hue-配置" class="headerlink" title="Hue 配置"></a>Hue 配置</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 进入安装目录</span><br><span class="line">cd /opt/servers/hue</span><br><span class="line"></span><br><span class="line"># 进入配置目录</span><br><span class="line">cd desktop/conf</span><br><span class="line"></span><br><span class="line"># 复制一份 HUE 的配置文件，并修改复制的配置文件</span><br><span class="line">cp pseudo-distributed.ini.tmpl pseudo-distributed.ini</span><br><span class="line">vi pseudo-distributed.ini</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#[desktop]</span><br><span class="line">http_host=slave1</span><br><span class="line">http_port=8000</span><br><span class="line">time_zone=Asia/shanghai</span><br><span class="line">dev=true</span><br><span class="line">server_user=hue</span><br><span class="line">server_group=hue</span><br><span class="line">default_user=hue</span><br><span class="line"></span><br><span class="line">#[[database]]。Hue默认使用SQLite数据库记录相关元数据，替换为mysql</span><br><span class="line">engine=mysql</span><br><span class="line">host=slave2</span><br><span class="line">port=3306</span><br><span class="line">user=hive</span><br><span class="line">password=0000</span><br><span class="line"># 增加一行 数据库名称</span><br><span class="line">name=hue </span><br><span class="line"></span><br><span class="line"># 211行左右。app黑名单，禁用solr,规避报错</span><br><span class="line">app_blacklist=search</span><br><span class="line"></span><br><span class="line"># 1003行，Hadoop配置文件的路径</span><br><span class="line">hadoop_conf_dir=/opt/servers/hadoop-2.10.1/etc/hadoop</span><br></pre></td></tr></table></figure><p><strong>slave2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 在mysq1中创建数据库hue,用来存放元数据</span><br><span class="line">mysql -uhive -p0000</span><br><span class="line">mysql&gt; create database hue;</span><br><span class="line"># 初始化数据库</span><br><span class="line">pwd</span><br><span class="line">/opt/servers/hue/</span><br><span class="line"></span><br><span class="line"># 如果是mysql8的版本需要修改密码加密方式为旧版</span><br><span class="line">build/env/bin/hue syncdb</span><br><span class="line"></span><br><span class="line">build/env/bin/hue migrate</span><br><span class="line"># 检查数据</span><br><span class="line">mysql&gt; show tables;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211121162633904-1076428771.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211121162840998-452135090.png" alt="image"></p><p>修改mysql加密方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">select user,plugin from user where user=&#x27;root&#x27;;</span><br><span class="line"></span><br><span class="line">alter user &#x27;hive&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;0000&#x27;;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build/env/bin/supervisor</span><br></pre></td></tr></table></figure><p>如果启动时出现以下异常<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211121163908834-1723458696.png" alt="image"><br>则是没有hue这个用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd hue -U -m -s /bin/bash</span><br><span class="line">passwd hue</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211121164031570-802782931.png" alt="image"></p><p><strong>访问地址</strong><br><a href="http://slave1:8000/">http://slave1:8000/</a></p><p>第一次进入需要创建用户和密码<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211121164240212-521770360.png" alt="image"><br>此时会报错，需要进行hive的整合</p><h1 id="Hue-集成-HDFS、YARN"><a href="#Hue-集成-HDFS、YARN" class="headerlink" title="Hue 集成 HDFS、YARN"></a>Hue 集成 HDFS、YARN</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/opt/servers/hue/desktop/conf</span><br><span class="line"></span><br><span class="line">vim pseudo-distributed.ini</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># [hadoop] -- [[hdfs_clusters]] -- [[[default]]]</span><br><span class="line"># 注意端口号。</span><br><span class="line">fs_defaultfs=hdfs://master:9000</span><br><span class="line">webhdfs_ur1=http://master:50070/webhdfs/v1</span><br><span class="line"></span><br><span class="line"># [hadoop] -- [[yarn_clusters]] -- [[[default]]]</span><br><span class="line">resourcemanager_host=slave2</span><br><span class="line">resourcemanager_port=8032</span><br><span class="line">submit_to=True</span><br><span class="line">resourcemanager_api_url=http://slave2:8088</span><br><span class="line">proxy_api_ur1=http://slave2:8088</span><br><span class="line">history_server_api_url=http://slave2:19888</span><br></pre></td></tr></table></figure><h1 id="Hue-集成-Hive"><a href="#Hue-集成-Hive" class="headerlink" title="Hue 集成 Hive"></a>Hue 集成 Hive</h1><p>集成 Hive 需要启动 Hiveserver2 服务，在 slave2 节点上启动 Hiveserver2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#[beeswax]</span><br><span class="line">hive_server_host=slave2</span><br><span class="line">hive_server_port=10000</span><br><span class="line">hive_conf_dir=/opt/servers/hive-2.3.9/conf</span><br><span class="line"></span><br><span class="line"># 注意到注释上说，11是hive3.0的</span><br><span class="line">thrift_version=7</span><br></pre></td></tr></table></figure><h1 id="Hue-集成MySQL"><a href="#Hue-集成MySQL" class="headerlink" title="Hue 集成MySQL"></a>Hue 集成MySQL</h1><p>#[librdbms]–[[databases]]–[[[mysq]]]];1922行<br>#注意：1922行原文：##[[mysql]]=&gt;[[mysql]];两个##要去掉！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[[[mysq]]]]</span><br><span class="line">nice_name=&quot;My SQL DB&quot;</span><br><span class="line">name=hue</span><br><span class="line">engine=mysql</span><br><span class="line">host=slave2</span><br><span class="line">port=3306</span><br><span class="line">user=hive</span><br><span class="line">password=0000</span><br></pre></td></tr></table></figure><p>注意：name是database_name</p>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HiveServer2 服务端配置</title>
      <link href="/posts/2461453837.html"/>
      <url>/posts/2461453837.html</url>
      
        <content type="html"><![CDATA[<p>HiveServer2(HS2)是一种允许客户端对Hive执行查询的服务。HiveServer2是HiveServer1的后续版本。HS2支持多客户端并发和身份验证，旨在为JDBC、ODBC等开放API客户端提供更好的支持。</p><p>HS2包括基于Thrift的Hive服务（TCP或HTTP)和用于WebUI的JettyWeb服务器。<br>HiveServer2 作用：</p><ul><li>为Hive提供了一种允许客户端远程访问的服务</li><li>基于thrift协议，支持跨平台，跨编程语言对Hive访问</li><li>允许远程访问Hive</li></ul><h1 id="HiveServer2配置"><a href="#HiveServer2配置" class="headerlink" title="HiveServer2配置"></a>HiveServer2配置</h1><p>配置规划：<br>| 节点   | HiveServer2 | client |<br>| —— | ———– | —— |<br>| master |             |        |<br>| slave1 |             | √      |<br>| slave2 | √           |        |</p><p>配置步骤：<br><strong>master</strong></p><ol><li><p>修改集群上的core-site.xml,增加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--Hiveserver2连不上10000;hadoop为安装用户--&gt;</span><br><span class="line">&lt;!--root用户可以代理所有主机上的所有用户--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.proxyuser.root.hosts&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.proxyuser.root.groups&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改集群上的hdfs-site.xml,增加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--Hiveserver2连不上10000;启用webhdfs服务--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;</span><br><span class="line">&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><p>分发文件到集群中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stop-dfs.sh</span><br><span class="line">rsync-script core-site.xml</span><br><span class="line">rsync-script hdfs-site.xml</span><br></pre></td></tr></table></figure></li></ol><h1 id="启动-HiveServer2"><a href="#启动-HiveServer2" class="headerlink" title="启动 HiveServer2"></a>启动 HiveServer2</h1><p><strong>master</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure><p><strong>slave2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup hiveserver2 &amp;</span><br></pre></td></tr></table></figure><p><a href="http://slave2:10002/">http://slave2:10002</a></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211121190647155-61764268.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive HQL 之 DDL 数据表操作</title>
      <link href="/posts/3488806694.html"/>
      <url>/posts/3488806694.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hive-数据类型"><a href="#Hive-数据类型" class="headerlink" title="Hive 数据类型"></a>Hive 数据类型</h1><h2 id="普通数据类型"><a href="#普通数据类型" class="headerlink" title="普通数据类型"></a>普通数据类型</h2><p>Hive 类似和 Java 语言中一样，会支持多种不同长度的整型和浮点类型数据，同时也支持布尔类型、字符串类型，时间截数据类型以及二进制数组数据类型等。具体的如下表：</p><table><thead><tr><th>大类</th><th>类型</th></tr></thead><tbody><tr><td>Integers(整型）</td><td>TINYINT – 1字节的有符号整型<br/>SAMLINT – 2字节的有符号整型<br/>INT – 4字节的有符号整型<br/>BIGINT – 8字节的有符号整型</td></tr><tr><td>Floating point numbers(浮点数）</td><td>FLOAT – 单精度浮点数<br/>DOUBLE – 双精度浮点数</td></tr><tr><td>Fixed point numbers(定点数）</td><td>DECIMAL – 17字节，任意精度数字。通常用户自定义 decimal(12,6)</td></tr><tr><td>String(字符串）</td><td>STRING – 可指定字符集的不定长字符<br/>VARCHAR – 1-65535长度的不定长字符串<br/>CHAR – 1-255定长字符串</td></tr><tr><td>Datetime(时间日期类型）</td><td>STRTIMESTAMP – 时间戳(纳秒)<br/>DATE – 时间日期类型</td></tr><tr><td>Boolean(布尔类型）</td><td>BOOLEAN – true/false</td></tr><tr><td>Binary types(二进制类型）</td><td>BINARY – 二进制字节序列</td></tr></tbody></table><h1 id="集合数据类型"><a href="#集合数据类型" class="headerlink" title="集合数据类型"></a>集合数据类型</h1><p>Hive 支持集合数据类型，包括array、map、struct、union</p><table><thead><tr><th>类型</th><th>描述</th><th>字面量示例</th></tr></thead><tbody><tr><td>ARRAY</td><td>有序的相同数据类型的集合</td><td>array(1,2)</td></tr><tr><td>MAP</td><td>key-value对。key必须是基本数据类型，value不限</td><td>map(‘a’,1, ‘b’, 2)</td></tr><tr><td>STRUCT</td><td>不同类型字段的集合。类似于C语言的结构 体</td><td>struct(‘1’,1,1.0),<br/>named_struct(‘col1’,’1’,’col2’,1,’clo3’, 1.0)</td></tr><tr><td>UNION</td><td>不同类型的元素存储在同一字段的不同行</td><td>create_union(1,’a’,63)</td></tr></tbody></table><h1 id="内部表-amp-外部表"><a href="#内部表-amp-外部表" class="headerlink" title="内部表 &amp; 外部表"></a>内部表 &amp; 外部表</h1><p>在创建表的时候，可指定表的类型。表有两种类型，分别是内部表（管理表）、外部表。</p><ul><li>默认情况下，创建内部表。如果要创建外部表，需要使用关键字 <code>external</code></li><li>在删除内部表时，表的定义（元数据）和数据同时被删除</li><li>在删除外部表时，仅删除表的定义，数据被保留</li><li>在生产环境中，多使用外部表</li></ul><h2 id="内部表"><a href="#内部表" class="headerlink" title="内部表"></a>内部表</h2><p>t1.dat 文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ID 姓名 爱好 地址</span><br><span class="line">2;zhangsan;book,TV,code;beijing:chaoyang,shagnhai:pudong</span><br><span class="line">3;lishi;book,code;nanjing:jiangning,taiwan:taibei</span><br><span class="line">4;wangwu;music,book;heilongjiang:haerbin</span><br></pre></td></tr></table></figure><p>基于上面数据创建表 HQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-- 创建内部表</span><br><span class="line">create table t1(</span><br><span class="line">    id int,</span><br><span class="line">    name string,</span><br><span class="line">    hobby array&lt;string&gt;,</span><br><span class="line">    addr map&lt;string, string&gt;</span><br><span class="line">)</span><br><span class="line">row format delimited</span><br><span class="line">fields terminated by &quot;;&quot;</span><br><span class="line">collection items terminated by &quot;,&quot;</span><br><span class="line">map keys terminated by &quot;:&quot;;</span><br><span class="line">-- 因为默认的分隔符号是 ^A ^B ^C 所以我们要指定分隔符号</span><br><span class="line"></span><br><span class="line">-- 显示表的定义，信息较少</span><br><span class="line">desc t1;</span><br><span class="line"></span><br><span class="line">-- 显示表的定义，详细</span><br><span class="line">desc formatted t1;</span><br><span class="line"></span><br><span class="line">-- 加载数据</span><br><span class="line">load data local inpath &#x27;/root/t1.dat&#x27; into table t1;</span><br><span class="line"></span><br><span class="line">-- 查询数据</span><br><span class="line">select * from t1;</span><br><span class="line"></span><br><span class="line">-- 查看数据文件</span><br><span class="line">dfs -ls /user/hive/warehouse/mydb.db/t1;</span><br><span class="line">dfs -cat /user/hive/warehouse/mydb.db/t1/t1.dat;</span><br><span class="line"></span><br><span class="line">-- 删除表，文件也一并删除</span><br><span class="line">drop table t1;</span><br></pre></td></tr></table></figure><h2 id="外部表"><a href="#外部表" class="headerlink" title="外部表"></a>外部表</h2><p>t2.dat 文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ID 姓名 爱好 地址</span><br><span class="line">2;zhangsan;book,TV,code;beijing:chaoyang,shagnhai:pudong</span><br><span class="line">3;lishi;book,code;nanjing:jiangning,taiwan:taibei</span><br><span class="line">4;wangwu;music,book;heilongjiang:haerbin</span><br></pre></td></tr></table></figure><p>基于上面数据创建表 HQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-- 创建内部表</span><br><span class="line">create external table t2(</span><br><span class="line">    id int,</span><br><span class="line">    name string,</span><br><span class="line">    hobby array&lt;string&gt;,</span><br><span class="line">    addr map&lt;string, string&gt;</span><br><span class="line">)</span><br><span class="line">row format delimited</span><br><span class="line">fields terminated by &quot;;&quot;</span><br><span class="line">collection items terminated by &quot;,&quot;</span><br><span class="line">map keys terminated by &quot;:&quot;;</span><br><span class="line">-- 因为默认的分隔符号是 ^A ^B ^C 所以我们要指定分隔符号</span><br><span class="line"></span><br><span class="line">-- 显示表的定义，信息较少</span><br><span class="line">desc t2;</span><br><span class="line"></span><br><span class="line">-- 显示表的定义，详细</span><br><span class="line">desc formatted t2;</span><br><span class="line"></span><br><span class="line">-- 加载数据</span><br><span class="line">load data local inpath &#x27;/root/t2.dat&#x27; into table t2;</span><br><span class="line"></span><br><span class="line">-- 查询数据</span><br><span class="line">select * from t2;</span><br><span class="line"></span><br><span class="line">-- 查看数据文件</span><br><span class="line">dfs -ls /user/hive/warehouse/mydb.db/t2;</span><br><span class="line">dfs -cat /user/hive/warehouse/mydb.db/t2/t2.dat;</span><br><span class="line"></span><br><span class="line">-- 删除表，文件不会被删除</span><br><span class="line">drop table t2;</span><br><span class="line"></span><br><span class="line">-- 再次查询数据文件，仍然存在</span><br></pre></td></tr></table></figure><h2 id="内部表与外部表的转换"><a href="#内部表与外部表的转换" class="headerlink" title="内部表与外部表的转换"></a>内部表与外部表的转换</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 内部表转外部表</span><br><span class="line">alter table t1 set tblproperties(&#x27;EXTERNAL&#x27;=&#x27;TRUE&#x27;);</span><br><span class="line">-- 查看表信息，是否转换成功</span><br><span class="line">desc formatted t1;</span><br><span class="line"></span><br><span class="line">-- 外部表转内部表</span><br><span class="line">alter table t1 set tblproperties(&#x27;EXTERNAL&#x27;=&#x27;FALSE&#x27;);</span><br></pre></td></tr></table></figure><h1 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h1><p>Hive在执行查询时，一般会扫描整个表的数据。由于表的数据量大，全表扫描消耗时间长、效率低。<br>而有时候，查询只需要扫描表中的一部分数据即可，Hive引入了分区表的概念，将表的数据存储在不同的子目录中，每一个子目录对应一个分区。只查询部分分区数据时，可避免全表扫描，提高查询效率。<br>在实际中，通常根据时间、地区等信息进行分区。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-- 创建通过 日期字符串 分区的表</span><br><span class="line">create external table t3(</span><br><span class="line">    id int,</span><br><span class="line">    name string,</span><br><span class="line">    hobby array&lt;string&gt;,</span><br><span class="line">    addr map&lt;string, string&gt;</span><br><span class="line">)</span><br><span class="line">partitioned by (dt string)</span><br><span class="line">row format delimited</span><br><span class="line">fields terminated by &quot;;&quot;</span><br><span class="line">collection items terminated by &quot;,&quot;</span><br><span class="line">map keys terminated by &quot;:&quot;;</span><br><span class="line"></span><br><span class="line">-- 加载数据</span><br><span class="line">load data local inpath &#x27;/root/t1.dat&#x27; into table t3 partition(dt=&quot;2021-11-16&quot;);</span><br><span class="line">load data local inpath &#x27;/root/t1.dat&#x27; into table t3 partition(dt=&quot;2021-11-17&quot;);</span><br><span class="line"></span><br><span class="line">-- 查看分区</span><br><span class="line">show partitions t3;</span><br><span class="line"></span><br><span class="line">-- 增加分区</span><br><span class="line">alter table t3 add partition(dt=&quot;2021-11-18&quot;)  partition(dt=&quot;2021-11-19&quot;);</span><br><span class="line"></span><br><span class="line">-- 删除分区</span><br><span class="line">alter table t3 drop partition(dt=&#x27;2021-11-18&#x27;);</span><br></pre></td></tr></table></figure><p><font color=red>备注：分区字段不是表中已经存在的数据，可以将分区字段看成伪列</font> </p><h1 id="分桶表"><a href="#分桶表" class="headerlink" title="分桶表"></a>分桶表</h1><p>当单个的分区或者表的数据量过大，分区不能更细粒度的划分数据，就需要使用分桶技术将数据划分成更细的粒度。将数据按照指定的字段进行分成多个桶中去，即将数据按照字段进行划分，数据按照字段划分到多个文件当中去。<br>分桶的原理：</p><ul><li>MR中：key.hashCode % reductTask</li><li>Hive中：分桶字段.hashCode % 分桶个数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 测试数据</span><br><span class="line">1java90</span><br><span class="line">1C78</span><br><span class="line">1python91</span><br><span class="line">1hadoop80</span><br><span class="line">2java75</span><br><span class="line">2C76</span><br><span class="line">2 python80</span><br><span class="line">2hadoop93</span><br><span class="line">3java98</span><br><span class="line">3C74</span><br><span class="line">3python89</span><br><span class="line">3hadoop91</span><br><span class="line">5java93</span><br><span class="line">6c76</span><br><span class="line">7python87</span><br><span class="line">8hadoop88</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">-- 创建分桶表</span><br><span class="line">create table course(</span><br><span class="line">    id int,</span><br><span class="line">    name string,</span><br><span class="line">    score int</span><br><span class="line">)</span><br><span class="line">clustered by (id) into 3 buckets</span><br><span class="line">row format delimited fields terminated by &quot;\t&quot;;</span><br><span class="line"></span><br><span class="line">-- 创建普通表</span><br><span class="line">create table course_common(</span><br><span class="line">    id int,</span><br><span class="line">    name string,</span><br><span class="line">    score int</span><br><span class="line">)</span><br><span class="line">row format delimited fields terminated by &quot;\t&quot;;</span><br><span class="line"></span><br><span class="line">-- 给普通表增加数据</span><br><span class="line">load data local inpath &#x27;/root/course.dat&#x27; into table course_common;</span><br><span class="line"></span><br><span class="line">-- 需要通过 insert ... select 给桶加数据</span><br><span class="line">insert into table course select * from course_common;</span><br><span class="line"></span><br><span class="line">-- 查看分桶数据 数据按照：(分区字段.hashCode)%(分桶数）进行分区</span><br><span class="line">desc formatted course;</span><br><span class="line">dfs -ls /user/hive/warehouse/mydb.db/course;</span><br></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/2354934/202111/2354934-20211116173654324-217337569.png" alt="image"></p><p>备注：</p><ol><li>分桶规则：分桶字段.hashCode%分桶数</li><li>分桶表加载数据时，使用insert…select…方式进行</li><li>网上有资料说要使用分区表需要设置hive.enforce.bucketing=true,那是Hive1.x以前的版本；<br>Hive2.x中，删除了该参数，始终可以分桶；</li></ol><h1 id="修改表-amp-删除表"><a href="#修改表-amp-删除表" class="headerlink" title="修改表 &amp; 删除表"></a>修改表 &amp; 删除表</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">-- 修改表名。rename</span><br><span class="line">alter table course_common</span><br><span class="line">rename to course_commonl;</span><br><span class="line"></span><br><span class="line">-- 修改列名。change column</span><br><span class="line">alter table course_common1</span><br><span class="line">change column id cid int;</span><br><span class="line"></span><br><span class="line">--修改字段类型。change column</span><br><span class="line">alter table course_common1</span><br><span class="line">change column cid cid string;</span><br><span class="line"></span><br><span class="line">-- The following columns have types incompatible with the existing columns in their</span><br><span class="line">respective positions</span><br><span class="line">--修改字段数据类型时，要满足数据类型转换的要求。如int可以转为string,但是string不能转为int</span><br><span class="line"></span><br><span class="line">--增加字段。add columns</span><br><span class="line">alter table course_common1</span><br><span class="line">add columns (common string);</span><br><span class="line"></span><br><span class="line">--删除字段：replace columns</span><br><span class="line">--这里仅仅只是在元数据中删除了字段，并没有改动hdfs上的数据文件</span><br><span class="line">alter table course_common1</span><br><span class="line">replace columns(</span><br><span class="line">id string, cname string, score int);</span><br><span class="line"></span><br><span class="line">--删除表</span><br><span class="line">drop table course_common1;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive 的安装与配置</title>
      <link href="/posts/1114713646.html"/>
      <url>/posts/1114713646.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h1><blockquote><p>本教程基于《Apache Hadoop 完全分布式集群搭建》下进行搭建<br><a href="https://www.cnblogs.com/LzsCxb/p/15389375.html">https://www.cnblogs.com/LzsCxb/p/15389375.html</a></p></blockquote><p>软件版本</p><ul><li>Hadoop 2.10.1</li><li>Mysql 8.0.26</li><li>Hive 2.3.9</li></ul><ol><li>安装 Mysql(8.0.26) 到 <strong>slave2</strong><br><a href="https://www.cnblogs.com/LzsCxb/p/15366225.html">https://www.cnblogs.com/LzsCxb/p/15366225.html</a></li><li>下载 Mysql JDBC JAR 包<br><a href="https://dev.mysql.com/downloads/connector/j">https://dev.mysql.com/downloads/connector/j</a><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211114203642343-889097790.png" alt="image"><br>解压后将 JAR 包上传至服务器 <code>/opt/software</code></li></ol><table><thead><tr><th>软件</th><th>master</th><th>slave1</th><th>slave2</th></tr></thead><tbody><tr><td>Hadoop</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>Mysql</td><td></td><td></td><td>✓</td></tr><tr><td>Hive</td><td></td><td></td><td>✓</td></tr></tbody></table><h1 id="Mysql-创建并授权-Hive-账户"><a href="#Mysql-创建并授权-Hive-账户" class="headerlink" title="Mysql 创建并授权 Hive 账户"></a>Mysql 创建并授权 Hive 账户</h1><p><strong>slave2</strong><br>不满足策略则需要按上面方法修改密码策略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create user &#x27;hive&#x27;@&#x27;%&#x27; identified by &#x27;0000&#x27;;</span><br><span class="line"># 将所有权限授权给 Hive 账户</span><br><span class="line">grant all on *.* to &#x27;hive&#x27;@&#x27;%&#x27;;</span><br><span class="line"># 刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>测试是否能成功登录 <code>mysql -uhive -p0000</code></p><h1 id="配置-Hive"><a href="#配置-Hive" class="headerlink" title="配置 Hive"></a>配置 Hive</h1><p><strong>slave2</strong><br>下载 Hive(2.3.9) 并解压缩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/software</span><br><span class="line">wget https://dlcdn.apache.org/hive/hive-2.3.9/apache-hive-2.3.9-bin.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf apache-hive-2.3.9-bin.tar.gz -C ../servers/</span><br><span class="line">cd ../servers                                        </span><br><span class="line">mv apache-hive-2.3.9-bin hive-2.3.9</span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile </span><br><span class="line"></span><br><span class="line"># HIVE</span><br><span class="line">export HIVE_HOME=/opt/servers/hive-2.3.9</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br><span class="line"></span><br><span class="line"># 使其生效</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="配置-Hive-1"><a href="#配置-Hive-1" class="headerlink" title="配置 Hive"></a>配置 Hive</h2><h3 id="创建-hive-site-xml-文件"><a href="#创建-hive-site-xml-文件" class="headerlink" title="创建 hive-site.xml 文件"></a>创建 hive-site.xml 文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd $HIVE_HOME/conf</span><br><span class="line"># 新建 hive-site.xml 文件增加以下内容：</span><br><span class="line">vim hive-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- Hive 元数据的存放位置 --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;jdbc:mysql://slave2:3306/hivemetadata?createDatabaseIfNotExist=true&amp;amp;allowPublicKeyRetrieval=true&amp;amp;useSSL=false&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;JDBC connect String for a JDBC metastore&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 指定驱动程序 --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;com.mysql.cj.jdbc.Driver&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;Driver class name for a JDBC metastore&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 连接数据库的用户名 --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hive&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;username to use against metastore database&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 连接数据库的密码 --&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;0000&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;password to use against metastore database&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="移动-JDBC-文件至-lib-目录"><a href="#移动-JDBC-文件至-lib-目录" class="headerlink" title="移动 JDBC 文件至 lib 目录"></a>移动 JDBC 文件至 lib 目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mysql-connector-java-8.0.26.jar /opt/servers/hive-2.3.9/lib</span><br></pre></td></tr></table></figure><h3 id="初始化元数据库"><a href="#初始化元数据库" class="headerlink" title="初始化元数据库"></a>初始化元数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211114234934980-1585819981.png" alt="image"><br>查看数据库是否创建成功<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211114235011420-1305206002.png" alt="image"></p><h2 id="启动-Hive"><a href="#启动-Hive" class="headerlink" title="启动 Hive"></a>启动 Hive</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive</span><br></pre></td></tr></table></figure><ul><li><p>启动成功后如果出现 Log4j 版本冲突警告（可忽略）<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211115002245953-1377846016.png" alt="image"><br>我们保留 Hadoop 的 Log4j，删除 Hive 中的 Log4j</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /opt/servers/hive-2.3.9/lib/log4j-slf4j-impl-2.6.2.jar</span><br></pre></td></tr></table></figure></li><li><p>如果出现下面异常是因为HDFS、服务未启动<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211114235310286-524055962.png" alt="image"></p></li><li><p>如出现以下异常则是进入了安全模式，需要等待<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211114235732900-214707817.png" alt="image"></p></li></ul><p>到这里一个基本可用的 Hive 环境已经搭建好了！</p><h1 id="Hive-常用属性配置"><a href="#Hive-常用属性配置" class="headerlink" title="Hive 常用属性配置"></a>Hive 常用属性配置</h1><blockquote><p>可以在 hive-site.xml 中增加以下常用配置，方便使用</p></blockquote><h2 id="数据存储位置"><a href="#数据存储位置" class="headerlink" title="数据存储位置"></a>数据存储位置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;!-- 数据默认存储位置(HDFS) --&gt;</span><br><span class="line">    &lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;/user/hive/warehouse&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br></pre></td></tr></table></figure><h2 id="显示当前操作的-Database-库"><a href="#显示当前操作的-Database-库" class="headerlink" title="显示当前操作的 Database 库"></a>显示当前操作的 Database 库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在命令行中显示当前操作的数据库 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hive.cli.print.current.db&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h2 id="显示表头属性"><a href="#显示表头属性" class="headerlink" title="显示表头属性"></a>显示表头属性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;!-- 在命令行中显示数据的表头 --&gt;</span><br><span class="line">    &lt;name&gt;hive.cli.print.header&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h2 id="本地模式"><a href="#本地模式" class="headerlink" title="本地模式"></a>本地模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;!-- 操作小规模数据时，使用本地模式，提高效率  --&gt;</span><br><span class="line">    &lt;name&gt;hive.exec.mode.local.auto&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>备注：当 Hive 的输入数据量非常小时，Hive 通过本地模式在单台机器上处理所有的任务。对于小数据集，执行时间会明显被缩短。<strong>当一个 job 满足如下条件才能真正使用本地模式</strong>：</p><ul><li>job 的输入数据量必须小于参数：hive.exec.mode.local.auto.inputbytes.max (默认128MB)</li><li>job 的 map 数必须小于参数：hive.exec.mode.local.auto.tasks.ma x(默认4)</li><li>job 的 reduce 数必须为 0 或者 1</li></ul><h1 id="Hive-Log4j-配置"><a href="#Hive-Log4j-配置" class="headerlink" title="Hive Log4j 配置"></a>Hive Log4j 配置</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/servers/hive-2.3.9/conf</span><br><span class="line">cp hive-log4j2.properties.template hive-log4j2.properties</span><br><span class="line">vim hive-log4j2.properties</span><br></pre></td></tr></table></figure><p>可以使用默认配置<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211115130246215-332109000.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome 屏蔽 IDM  浏览器插件自动更新</title>
      <link href="/posts/2176665131.html"/>
      <url>/posts/2176665131.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>IDM 插件自动更新至最新版本导致旧版的 IDM 软件无法调用。<br>新版本浏览器无法通过修改配置来达到屏蔽自动更新。</p></blockquote><h1 id="不使用代理就不会自动更新"><a href="#不使用代理就不会自动更新" class="headerlink" title="不使用代理就不会自动更新"></a>不使用代理就不会自动更新</h1><h1 id="代理软件设置系统代理绕过-IP"><a href="#代理软件设置系统代理绕过-IP" class="headerlink" title="代理软件设置系统代理绕过 IP"></a>代理软件设置系统代理绕过 IP</h1><blockquote><p>我这里使用的是 Clash，其他软件请自行探讨。</p></blockquote><ol><li><p>打开设置<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211028005725843-480705921.png" alt="image"></p></li><li><p>编写配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- www.googleapis.com</span><br><span class="line">- update.googleapis.com</span><br><span class="line">- clients*.google.com</span><br><span class="line">- clientservices.googleapis.com</span><br><span class="line">- clients*.googleusercontent.com</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211028010001762-922129255.png" alt="image"></p><p>设置完毕！</p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Consul 服务注册中心安装与配置</title>
      <link href="/posts/3777199409.html"/>
      <url>/posts/3777199409.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-安装-Consul"><a href="#Docker-安装-Consul" class="headerlink" title="Docker 安装 Consul"></a>Docker 安装 Consul</h1><blockquote><p>8500 HTTP 端口<br>8600 DNS 端口</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8500:8500 -p 8300:8300 -p 8301:8301 -p 8302:8302 -p 8600:8600/udp consul consul agent -dev -client=0.0.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置开机自启</span></span><br><span class="line">docker container update --restart=always 容器名字/ID</span><br></pre></td></tr></table></figure><h1 id="Consul-Web"><a href="#Consul-Web" class="headerlink" title="Consul Web"></a>Consul Web</h1><p>http:// [docker-ip]:8500</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220218132920968.png" alt="image-20220218132920968"></p><h1 id="Consul-DNS"><a href="#Consul-DNS" class="headerlink" title="Consul DNS"></a>Consul DNS</h1><blockquote><p>  Consul提供 DNS 功能，可以让我们通过， 可以通过dig命令行来测试，consul默认的dns端口是8600</p></blockquote><p><strong>Linux</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S bind</span><br></pre></td></tr></table></figure><p><strong>Windows</strong></p><p><a href="https://www.isc.org/download/">https://www.isc.org/download/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @172.17.0.1 -p 8600 consul.service.consul SRV</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220218134750247.png" alt="image-20220218134750247"></p><h1 id="Consul-APi"><a href="#Consul-APi" class="headerlink" title="Consul APi"></a>Consul APi</h1><h2 id="注册服务与健康检查"><a href="#注册服务与健康检查" class="headerlink" title="注册服务与健康检查"></a>注册服务与健康检查</h2><h3 id="HTTP-Golang"><a href="#HTTP-Golang" class="headerlink" title="HTTP Golang"></a>HTTP Golang</h3><blockquote><p>   服务注册 <a href="https://www.consul.io/api-docs/agent/service#register-service">https://www.consul.io/api-docs/agent/service#register-service</a><br>   健康检查 <a href="https://www.consul.io/api-docs/agent/check">https://www.consul.io/api-docs/agent/check</a></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hashicorp/consul/api&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 注册服务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Register</span><span class="params">(id, name, address <span class="type">string</span>, port <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 默认配置</span></span><br><span class="line">cfg := api.DefaultConfig()</span><br><span class="line">cfg.Address = <span class="string">&quot;172.17.0.1:8500&quot;</span></span><br><span class="line"></span><br><span class="line">client, err := api.NewClient(cfg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生成服务注册对象</span></span><br><span class="line">registation := &amp;api.AgentServiceRegistration&#123;</span><br><span class="line">ID:      id,</span><br><span class="line">Name:    name,</span><br><span class="line">Address: address,</span><br><span class="line">Port:    port,</span><br><span class="line">Check: &amp;api.AgentServiceCheck&#123;</span><br><span class="line"><span class="comment">// 每个服务都要提供一个GET接口返回&#123;code:200,success:true&#125;</span></span><br><span class="line">HTTP:   <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 不能使用 127.0.0.1 因为 Consul 已经部署到 docker 不能识别</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//deregister(&quot;mirco-shop-web&quot;)</span></span><br><span class="line">&#125;                        fmt.Sprintf(<span class="string">&quot;http://%s:%d/health&quot;</span>, address, port),</span><br><span class="line">Interval:                       <span class="string">&quot;5s&quot;</span>, <span class="comment">// 定时检查</span></span><br><span class="line">Timeout:                        <span class="string">&quot;5s&quot;</span>, <span class="comment">// 超时时间</span></span><br><span class="line">DeregisterCriticalServiceAfter: <span class="string">&quot;1m&quot;</span>, <span class="comment">// 服务失效多少秒后注销</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">err = client.Agent().ServiceRegister(registation)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;注册成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 不能使用 127.0.0.1 因为 Consul 已经部署到 docker 不能识别</span></span><br><span class="line">    .Register(<span class="string">&quot;mirco-shop-api&quot;</span>, <span class="string">&quot;mirco-shop-api&quot;</span>, <span class="string">&quot;192.168.200.110&quot;</span>, <span class="number">8021</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gRPC-Python"><a href="#gRPC-Python" class="headerlink" title="gRPC Python"></a>gRPC Python</h3><blockquote><p>  Protobuf  <a href="https://github.com/grpc/grpc/blob/master/doc/health-checking.md">https://github.com/grpc/grpc/blob/master/doc/health-checking.md</a></p><p>  Health.py <a href="https://grpc.github.io/grpc/python/_modules/grpc_health/v1/health.html">https://grpc.github.io/grpc/python/_modules/grpc_health/v1/health.html</a></p></blockquote><p><strong>protobuf</strong> health.proto</p><blockquote><p>  不要修改任何内容</p></blockquote><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> grpc.health.v1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HealthCheckRequest</span> &#123;</span><br><span class="line">  <span class="type">string</span> service = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HealthCheckResponse</span> &#123;</span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">ServingStatus</span> &#123;</span><br><span class="line">    UNKNOWN = <span class="number">0</span>;</span><br><span class="line">    SERVING = <span class="number">1</span>;</span><br><span class="line">    NOT_SERVING = <span class="number">2</span>;</span><br><span class="line">    SERVICE_UNKNOWN = <span class="number">3</span>;  <span class="comment">// Used only by the Watch method.</span></span><br><span class="line">  &#125;</span><br><span class="line">  ServingStatus status = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">service </span><span class="title class_">Health</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> Check(HealthCheckRequest) <span class="keyword">returns</span> (HealthCheckResponse)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> Watch(HealthCheckRequest) <span class="keyword">returns</span> (stream HealthCheckResponse)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m grpc_tools.protoc --python_out=. --grpc_python_out=. -I.  health.proto</span><br></pre></td></tr></table></figure><ol><li>  实现Check和Watch方法  health.py  复制进去即可</li></ol><p> <a href="https://grpc.github.io/grpc/python/_modules/grpc_health/v1/health.html">https://grpc.github.io/grpc/python/_modules/grpc_health/v1/health.html</a></p><ol start="2"><li>新建<code>_async.py</code> 复制以下内容<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright 2020 The gRPC Authors</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;Reference implementation for health checking in gRPC Python.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> MutableMapping</span><br><span class="line"><span class="keyword">import</span> grpc</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> common.grpc_health.v1 <span class="keyword">import</span> health_pb2 <span class="keyword">as</span> _health_pb2</span><br><span class="line"><span class="keyword">from</span> common.grpc_health.v1 <span class="keyword">import</span> health_pb2_grpc <span class="keyword">as</span> _health_pb2_grpc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HealthServicer</span>(_health_pb2_grpc.HealthServicer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;An AsyncIO implementation of health checking servicer.&quot;&quot;&quot;</span></span><br><span class="line">    _server_status: MutableMapping[</span><br><span class="line">        <span class="built_in">str</span>, <span class="string">&#x27;_health_pb2.HealthCheckResponse.ServingStatus&#x27;</span>]</span><br><span class="line">    _server_watchers: MutableMapping[<span class="built_in">str</span>, asyncio.Condition]</span><br><span class="line">    _gracefully_shutting_down: <span class="built_in">bool</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self._server_status = &#123;<span class="string">&quot;&quot;</span>: _health_pb2.HealthCheckResponse.SERVING&#125;</span><br><span class="line">        self._server_watchers = collections.defaultdict(asyncio.Condition)</span><br><span class="line">        self._gracefully_shutting_down = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">Check</span>(<span class="params">self, request: _health_pb2.HealthCheckRequest,</span></span><br><span class="line"><span class="params">                    context</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        status = self._server_status.get(request.service)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">await</span> context.abort(grpc.StatusCode.NOT_FOUND)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> _health_pb2.HealthCheckResponse(status=status)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">Watch</span>(<span class="params">self, request: _health_pb2.HealthCheckRequest,</span></span><br><span class="line"><span class="params">                    context</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        condition = self._server_watchers[request.service]</span><br><span class="line">        last_status = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> condition:</span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    status = self._server_status.get(</span><br><span class="line">                        request.service,</span><br><span class="line">                        _health_pb2.HealthCheckResponse.SERVICE_UNKNOWN)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># NOTE(lidiz) If the observed status is the same, it means</span></span><br><span class="line">                    <span class="comment"># there are missing intermediate statuses. It&#x27;s considered</span></span><br><span class="line">                    <span class="comment"># acceptable since peer only interested in eventual status.</span></span><br><span class="line">                    <span class="keyword">if</span> status != last_status:</span><br><span class="line">                        <span class="comment"># Responds with current health state</span></span><br><span class="line">                        <span class="keyword">await</span> context.write(</span><br><span class="line">                            _health_pb2.HealthCheckResponse(status=status))</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># Records the last sent status</span></span><br><span class="line">                    last_status = status</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># Polling on health state changes</span></span><br><span class="line">                    <span class="keyword">await</span> condition.wait()</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">if</span> request.service <span class="keyword">in</span> self._server_watchers:</span><br><span class="line">                <span class="keyword">del</span> self._server_watchers[request.service]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">_set</span>(<span class="params">self, service: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">                   status: _health_pb2.HealthCheckResponse.ServingStatus</span></span><br><span class="line"><span class="params">                  </span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> service <span class="keyword">in</span> self._server_watchers:</span><br><span class="line">            condition = self._server_watchers.get(service)</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> condition:</span><br><span class="line">                self._server_status[service] = status</span><br><span class="line">                condition.notify_all()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._server_status[service] = status</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self, service: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">                  status: _health_pb2.HealthCheckResponse.ServingStatus</span></span><br><span class="line"><span class="params">                 </span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Sets the status of a service.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">          service: string, the name of the service.</span></span><br><span class="line"><span class="string">          status: HealthCheckResponse.status enum value indicating the status of</span></span><br><span class="line"><span class="string">            the service</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self._gracefully_shutting_down:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">await</span> self._<span class="built_in">set</span>(service, status)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">enter_graceful_shutdown</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Permanently sets the status of all services to NOT_SERVING.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        This should be invoked when the server is entering a graceful shutdown</span></span><br><span class="line"><span class="string">        period. After this method is invoked, future attempts to set the status</span></span><br><span class="line"><span class="string">        of a service will be ignored.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self._gracefully_shutting_down:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._gracefully_shutting_down = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> service <span class="keyword">in</span> self._server_status:</span><br><span class="line">                <span class="keyword">await</span> self._<span class="built_in">set</span>(service,</span><br><span class="line">                                _health_pb2.HealthCheckResponse.NOT_SERVING)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>注册健康检查服务</p><p><strong>请确使用Consul能访问的IP，特别是Consul使用Docker部署</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">name, <span class="built_in">id</span>, address, port</span>):</span><br><span class="line">    url = <span class="string">&quot;http://172.17.0.1:8500/v1/agent/service/register&quot;</span></span><br><span class="line">    rsp = requests.put(url, headers=headers, json=&#123;</span><br><span class="line">        <span class="string">&quot;ID&quot;</span>: <span class="built_in">id</span>,  <span class="comment"># ID 如果不设置则和Name保持一致</span></span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: name,</span><br><span class="line">        <span class="string">&quot;Address&quot;</span>: address,</span><br><span class="line">        <span class="string">&quot;Port&quot;</span>: port,</span><br><span class="line">        <span class="string">&quot;Tags&quot;</span>: [<span class="string">&quot;micro-shop&quot;</span>, <span class="string">&quot;lzscxb&quot;</span>, <span class="string">&quot;web&quot;</span>],  <span class="comment"># 标签</span></span><br><span class="line">        <span class="string">&quot;Check&quot;</span>: &#123;  <span class="comment"># 健康检查</span></span><br><span class="line">            <span class="string">&quot;GRPC&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;address&#125;</span>:<span class="subst">&#123;port&#125;</span>&quot;</span>,</span><br><span class="line">            <span class="string">&quot;GRPCUseTLS&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">&quot;Timeout&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Interval&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">            <span class="string">&quot;DeregisterCriticalServiceAfter&quot;</span>: <span class="string">&quot;1m&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> rsp.status_code != <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;注册失败:<span class="subst">&#123;rsp.status_code&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(rsp.text)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;注册成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    register(<span class="string">&quot;micro-shop-srv&quot;</span>, <span class="string">&quot;micro-shop-srv&quot;</span>, <span class="string">&quot;192.168.200.110&quot;</span>, <span class="number">50051</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220220140820786.png" alt="image-20220220140820786"></p><h2 id="注销服务"><a href="#注销服务" class="headerlink" title="注销服务"></a>注销服务</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Deregister</span><span class="params">(id <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 默认配置</span></span><br><span class="line">cfg := api.DefaultConfig()</span><br><span class="line">cfg.Address = <span class="string">&quot;172.17.0.1:8500&quot;</span></span><br><span class="line"></span><br><span class="line">client, err := api.NewClient(cfg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">err = client.Agent().ServiceDeregister(id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;注销服务成功&quot;</span>)</span><br><span class="line">&#125;<span class="comment">// 注销服务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deregister</span><span class="params">(id <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">url := <span class="string">&quot;http://172.17.0.1:8500/v1/agent/service/deregister/&quot;</span> + id</span><br><span class="line">data := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;service_id&quot;</span>: id,</span><br><span class="line">&#125;</span><br><span class="line">dataJson, err := json.Marshal(data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">body := bytes.NewReader(dataJson)</span><br><span class="line">rsq, err := http.NewRequest(<span class="string">&quot;PUT&quot;</span>, url, body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rsq.Body.Close()</span><br><span class="line">rsq.Header.Add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">rsp, err := http.DefaultClient.Do(rsq)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> rsp.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;注销失败&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;注销成功&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取服务"><a href="#获取服务" class="headerlink" title="获取服务"></a>获取服务</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有服务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AllServices</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// 默认配置</span></span><br><span class="line">   cfg := api.DefaultConfig()</span><br><span class="line">   cfg.Address = <span class="string">&quot;172.17.0.1:8500&quot;</span></span><br><span class="line"></span><br><span class="line">   client, err := api.NewClient(cfg)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="built_in">panic</span>(err)</span><br><span class="line">   &#125;</span><br><span class="line">   services, err := client.Agent().Services()</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(services)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤服务名称</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FilterService</span><span class="params">(name <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">   <span class="comment">// 默认配置</span></span><br><span class="line">   cfg := api.DefaultConfig()</span><br><span class="line">   cfg.Address = <span class="string">&quot;172.17.0.1:8500&quot;</span></span><br><span class="line"></span><br><span class="line">   client, err := api.NewClient(cfg)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="built_in">panic</span>(err)</span><br><span class="line">   &#125;</span><br><span class="line">   services, err := client.Agent().ServicesWithFilter(fmt.Sprintf(<span class="string">`Service == &quot;%s&quot;`</span>, name))</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(services)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装 mysql5.7</title>
      <link href="/posts/1456245975.html"/>
      <url>/posts/1456245975.html</url>
      
        <content type="html"><![CDATA[<h1 id="拉取Mysql镜像"><a href="#拉取Mysql镜像" class="headerlink" title="拉取Mysql镜像"></a>拉取Mysql镜像</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:<span class="number">5.7</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images <span class="comment">#查看镜像</span></span><br></pre></td></tr></table></figure><h1 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-p</span> <span class="number">3306</span>:<span class="number">3306</span> <span class="literal">--name</span> mymysql <span class="literal">-v</span> <span class="variable">$PWD</span>/conf:/etc/mysql/conf.d <span class="literal">-v</span> <span class="variable">$PWD</span>/logs:/logs <span class="literal">-v</span> <span class="variable">$PWD</span>/<span class="keyword">data</span>:/var/lib/mysql <span class="literal">-e</span> MYSQL_ROOT_PASSWORD=<span class="number">000</span> <span class="literal">-d</span> mysql:<span class="number">5.7</span></span><br><span class="line"></span><br><span class="line">  (主机):(容器)</span><br><span class="line"><span class="literal">-p</span> <span class="number">3306</span>:<span class="number">3306</span>：将容器的 <span class="number">3306</span> 端口映射到主机的 <span class="number">3306</span> 端口。(如果主机已安装mysql会占用mysql3306)</span><br><span class="line"></span><br><span class="line"><span class="literal">-v</span> <span class="literal">-v</span> <span class="variable">$PWD</span>/conf:/etc/mysql/conf.d：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。</span><br><span class="line"></span><br><span class="line"><span class="literal">-v</span> <span class="variable">$PWD</span>/logs:/logs：将主机当前目录下的 logs 目录挂载到容器的 /logs。</span><br><span class="line"></span><br><span class="line"><span class="literal">-v</span> <span class="variable">$PWD</span>/<span class="keyword">data</span>:/var/lib/mysql ：将主机当前目录下的<span class="keyword">data</span>目录挂载到容器的 /var/lib/mysql 。</span><br><span class="line"></span><br><span class="line"><span class="literal">-e</span> MYSQL_ROOT_PASSWORD=<span class="number">123456</span>：初始化 root 用户的密码。</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211024105041634-190321706.png" alt="image"></p><h1 id="进入容器配置"><a href="#进入容器配置" class="headerlink" title="进入容器配置"></a>进入容器配置</h1><p>由于mysql的安全策略，现在还不能使用root/000来访问数据库</p><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 62349aa31687 /bin/bash</span><br></pre></td></tr></table></figure><h2 id="进入mysql"><a href="#进入mysql" class="headerlink" title="进入mysql"></a>进入mysql</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p000</span><br></pre></td></tr></table></figure><h2 id="建立用户并授权"><a href="#建立用户并授权" class="headerlink" title="建立用户并授权"></a>建立用户并授权</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;root&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;127.0.0.1&#x27;</span> IDENTIFIED BY <span class="string">&#x27;密码&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;密码&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h2 id="1045-错误"><a href="#1045-错误" class="headerlink" title="1045 错误"></a>1045 错误</h2><p>刷新权限后，远程连接时出现了1045错误，可能是用户表没有成功设置。mysql使用mysql数据库中的user表来管理权限，修改user表就可以修改权限（只有root账号可以修改）：</p><blockquote><p>需要注意的是，网上很多资料是用password来访问密码，但新安装的mysql数据库下已经没有password这个字段了，password字段改成了authentication_string，因此查询密码是要用authentication_string。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select host,user,authentication_string from user;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211024113022149-413987488.png" alt="image"></p><p>看看是否成功设置名为“%”的主机名，%表示所有IP均可访问。如果有就检查下对应的密码是否与名为localhost的密码一致，如果不一致，需要做如下修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update user set authentication_string=&quot;*B66FEB4CF5216D971C066EB920EC03B27A5A3F40&quot; where host=&quot;%&quot;;</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-compose 部署 YApi管理平台</title>
      <link href="/posts/2406913127.html"/>
      <url>/posts/2406913127.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>YApi 有多 种安装方式，本文以 Docker-compose 安装</p><p>官方仓库 <a href="https://github.com/ymfe/yapi">https://github.com/ymfe/yapi</a></p><p>基于官方yapi-cli的docker-compose方案 <a href="https://github.com/Ryan-Miao/docker-yapi">https://github.com/Ryan-Miao/docker-yapi</a></p></blockquote><h1 id="Docker-amp-Docker-compose"><a href="#Docker-amp-Docker-compose" class="headerlink" title="Docker &amp; Docker-compose"></a>Docker &amp; Docker-compose</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S docker docker-compose</span><br></pre></td></tr></table></figure><h1 id="YApi"><a href="#YApi" class="headerlink" title="YApi"></a>YApi</h1><h2 id="克隆仓库并安装"><a href="#克隆仓库并安装" class="headerlink" title="克隆仓库并安装"></a>克隆仓库并安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Ryan-Miao/docker-yapi.git</span><br><span class="line">cd docker-yapi</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yapi:</span></span><br><span class="line">   <span class="attr">build:</span></span><br><span class="line">     <span class="attr">context:</span> <span class="string">./</span></span><br><span class="line">     <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">yapi</span></span><br><span class="line">   <span class="comment"># 第一次启动使用</span></span><br><span class="line">   <span class="attr">command:</span> <span class="string">&quot;yapi server&quot;</span></span><br><span class="line">   <span class="comment"># 之后使用下面的命令</span></span><br><span class="line">   <span class="comment"># command: &quot;node /my-yapi/vendors/server/app.js&quot;</span></span><br></pre></td></tr></table></figure><p>安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><h2 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h2><p>打开：<a href="http://localhost:9090/">http://localhost:9090</a></p><ul><li>  默认部署路径为<code>/my-yapi</code>(需要修改docker-compose.yml才可以更改)</li><li>  修改管理员邮箱 <code>ryan.miao@demo.com</code> (随意, 修改为自己的邮箱)</li><li>  修改数据库地址为 <code>mongo</code> 或者修改为自己的mongo实例 (docker-compose配置的mongo服务名称叫mongo)</li><li>  打开数据库认证</li><li>  输入数据库用户名: <code>yapi</code>(mongo配置的用户名, 见mongo-conf/init-mongo.js)</li><li>  输入密码: <code>yapi123456</code>(mongo配置的密码, 见mongo-conf/init-mongo.js)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220204222027302.png" alt="image-20220204222027302"></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220204222001769.png" alt="image-20220204222001769"></p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>部署完毕后, 修改docker-compose.yml 启用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yapi:</span></span><br><span class="line">   <span class="attr">build:</span></span><br><span class="line">     <span class="attr">context:</span> <span class="string">./</span></span><br><span class="line">     <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">yapi</span></span><br><span class="line">   <span class="comment"># 第一次启动使用</span></span><br><span class="line">   <span class="comment"># command: &quot;yapi server&quot;</span></span><br><span class="line">   <span class="comment"># 之后使用下面的命令</span></span><br><span class="line">   <span class="attr">command:</span> <span class="string">&quot;node /my-yapi/vendors/server/app.js&quot;</span></span><br></pre></td></tr></table></figure><p>重新启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p><img src="/home/lzscxb/.config/Typora/typora-user-images/image-20220204222347499.png" alt="image-20220204222347499"></p><p>访问 localhost:3000</p><ul><li>  输入用户名 <a href="mailto:&#108;&#x7a;&#115;&#x63;&#x78;&#x62;&#x40;&#x67;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#108;&#x7a;&#115;&#x63;&#x78;&#x62;&#x40;&#x67;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a> (自己输入的管理员邮箱)</li><li>  输入密码 ymfe.org (默认的初始化密码, 之后可以修改)</li></ul><h1 id="Chrome-插件"><a href="#Chrome-插件" class="headerlink" title="Chrome 插件"></a>Chrome 插件</h1>]]></content>
      
      
      <categories>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos 分布式配置中心配置</title>
      <link href="/posts/4218605846.html"/>
      <url>/posts/4218605846.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-安装-Nacos"><a href="#Docker-安装-Nacos" class="headerlink" title="Docker 安装 Nacos"></a>Docker 安装 Nacos</h1><p><code>JVM_XMS=512m -e JVM_XMX=512m -e JVM_XMN=256m</code> 如果你的内存足够大则不需要设置，使用默认即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nacos-standalone -p 8848:8848 -e MODE=standalone -e JVM_XMS=512m -e JVM_XMX=512m -e JVM_XMN=256m -d nacos/nacos-server:latest</span><br></pre></td></tr></table></figure><h1 id="访问Nacos"><a href="#访问Nacos" class="headerlink" title="访问Nacos"></a>访问Nacos</h1><blockquote><p>  如果访问失败 可尝试重启系统！</p></blockquote><p>http://你的docker ip:8848/nacos</p><p>账号：nacos</p><p>密码：nacos</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220225190826837.png" alt="image-20220225190826837"></p><h1 id="持久化的-Mysql-中"><a href="#持久化的-Mysql-中" class="headerlink" title="持久化的 Mysql 中"></a>持久化的 Mysql 中</h1><blockquote><p>  简单使用不需要配置，在生产环境中需要配置</p></blockquote><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul><li>  Mysql 5.7 以上</li></ul><p><strong>注意，mysql5.6版本会报错：Specified key was too long; max key length is 767 bytes，原因是mysql5.6最长的索引是767，要用Mysql5.7以上版本解决该问题。</strong></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p><a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>目前 docker Nacos 版本为 2.3.0</p><ol><li><p>下载 对应版本的 Nacos 获得配置文件中的 <code>conf/nacos-mysql.sql</code></p><p>  <img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220327172804381.png" alt="image-20220327172804381"></p></li></ol><p>２．创建数据库<code>nacos_config</code> 并到导入<code>nacos-mysql.sql</code></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220327180728038.png" alt="image-20220327180728038"></p><ol start="3"><li>进入容器中修改配置文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker ps -a</span><br><span class="line">sudo docker exec -it 0d8 /bin/bash</span><br><span class="line">vim conf/application.properties</span><br></pre></td></tr></table></figure><p>修改以下内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://lzscxb.cn:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="attr">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220327182744186.png" alt="image-20220327182744186"></p><p>登录 Nacos 新建命名空间查看数据库是否成功！ </p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220327182910811.png" alt="image-20220327182910811"></p><h1 id="Nacos-的使用"><a href="#Nacos-的使用" class="headerlink" title="Nacos 的使用"></a>Nacos 的使用</h1><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>可以隔离配置集，将某些配置集放到某一个命名空间之下。</p><p>命名空间我们一般用来区分 微服务</p><h2 id="组"><a href="#组" class="headerlink" title="组"></a>组</h2><p>抛出一个问题： 你现在确实能够隔离微服务，但是不同的微服务的开发、测试、生产环境如何区别，</p><p>组可以用来区别区别开发、测试、生产环境</p><h2 id="dataid-配置集"><a href="#dataid-配置集" class="headerlink" title="dataid - 配置集"></a>dataid - 配置集</h2><p>一个配置集就是一个配置文件， 实际上可以更灵活</p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><blockquote><p>  <strong><a href="https://github.com/nacos-group/nacos-sdk-python">https://github.com/nacos-group/nacos-sdk-python</a></strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_cfg</span>(<span class="params">args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;配置发生了变化&quot;</span>)</span><br><span class="line">    <span class="keyword">global</span> config</span><br><span class="line">    config = json.dumps(args)</span><br><span class="line">    <span class="built_in">print</span>(config)</span><br><span class="line"> </span><br><span class="line">NACOS = &#123;</span><br><span class="line">    <span class="string">&quot;host&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;port&quot;</span>: <span class="number">8848</span>,</span><br><span class="line">    <span class="string">&quot;user&quot;</span>: <span class="string">&quot;nacos&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name_space&quot;</span>: <span class="string">&quot;7319546d-df6f-4366-b1cc-005c41f3e054&quot;</span>,  <span class="comment"># 命名空间</span></span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;dev&quot;</span>,</span><br><span class="line">    <span class="string">&quot;user_srv_data_id&quot;</span>: <span class="string">&quot;user-srv&quot;</span>, <span class="comment"># 数据集id</span></span><br><span class="line">    <span class="string">&quot;db_data_id&quot;</span>: <span class="string">&quot;db&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nacos_client = nacos.NacosClient(<span class="string">f&#x27;<span class="subst">&#123;NACOS[<span class="string">&quot;host&quot;</span>]&#125;</span>:<span class="subst">&#123;NACOS[<span class="string">&quot;port&quot;</span>]&#125;</span>&#x27;</span>, namespace=NACOS[<span class="string">&quot;name_space&quot;</span>])</span><br><span class="line"><span class="comment"># nacos 返回的是字符串，需要使用json.loads加载</span></span><br><span class="line">config = json.loads(nacos_client.get_config(NACOS[<span class="string">&quot;user_srv_data_id&quot;</span>], NACOS[<span class="string">&quot;group&quot;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(config)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听配置文件修改  PS：如果是Window系统可能会出现错误，需要在 main方法中调用</span></span><br><span class="line">nacos_client.add_config_watcher(NACOS[<span class="string">&quot;user_srv_data_id&quot;</span>], NACOS[<span class="string">&quot;group&quot;</span>], update_cfg)</span><br></pre></td></tr></table></figure><h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><blockquote><p>   <a href="https://github.com/nacos-group/nacos-sdk-go">https://github.com/nacos-group/nacos-sdk-go</a></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 Nacos 中获取配置信息</span></span><br><span class="line"><span class="comment">//create clientConfig</span></span><br><span class="line">clientConfig := constant.ClientConfig&#123;</span><br><span class="line">NamespaceId:        命名空间ID,</span><br><span class="line">TimeoutMs:           <span class="number">5000</span>,</span><br><span class="line">NotLoadCacheAtStart: <span class="literal">true</span>,</span><br><span class="line">LogDir:              <span class="string">&quot;tmp/nacos/log&quot;</span>,</span><br><span class="line">CacheDir:            <span class="string">&quot;tmp/nacos/cache&quot;</span>,</span><br><span class="line">LogLevel:            <span class="string">&quot;debug&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// At least one ServerConfig</span></span><br><span class="line">serverConfigs := []constant.ServerConfig&#123;</span><br><span class="line">&#123;</span><br><span class="line">IpAddr: global.NacosConfig.Host, <span class="comment">// nacos服务地址</span></span><br><span class="line">Port:   global.NacosConfig.Port, <span class="comment">// nacos服务端口</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">configClient, err := clients.CreateConfigClient(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;serverConfigs&quot;</span>: serverConfigs,</span><br><span class="line"><span class="string">&quot;clientConfig&quot;</span>:  clientConfig,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">content, err := configClient.GetConfig(vo.ConfigParam&#123;</span><br><span class="line">DataId: global.NacosConfig.UserApiDataId, <span class="comment">// 数据集ID</span></span><br><span class="line">Group:  global.NacosConfig.Group, <span class="comment">// 组</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">zap.S().Fatalw(<span class="string">&quot;获取 Nacos 配置信息失败&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解析获取到的Json文本</span></span><br><span class="line"><span class="comment">// &amp;global.Config 为配置文件结构体</span></span><br><span class="line">err = json.Unmarshal([]<span class="type">byte</span>(content), &amp;global.Config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">zap.S().Fatalw(<span class="string">&quot;解析 Nacos 配置信息失败&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听配置文件</span></span><br><span class="line">err = configClient.ListenConfig(vo.ConfigParam&#123;</span><br><span class="line">DataId: global.NacosConfig.UserApiDataId,</span><br><span class="line">Group:  global.NacosConfig.Group,</span><br><span class="line">OnChange: <span class="function"><span class="keyword">func</span><span class="params">(namespace, group, dataId, data <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(global.Config.Services.UserSrvName)</span><br><span class="line">err = json.Unmarshal([]<span class="type">byte</span>(data), &amp;global.Config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">zap.S().Fatalw(<span class="string">&quot;文件发生变化，解析 Nacos 配置信息失败&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(global.Config.Services.UserSrvName)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">zap.S().Fatalw(<span class="string">&quot;监听配置文件出现异常&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 的安装 和 docker-compose</title>
      <link href="/posts/684484992.html"/>
      <url>/posts/684484992.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">   --add-repo \</span><br><span class="line">   https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">   </span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><h2 id="设置开机启动docker"><a href="#设置开机启动docker" class="headerlink" title="设置开机启动docker"></a>设置开机启动docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker <span class="comment">#启动docker</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h2 id="配置阿里云镜像-非常重要"><a href="#配置阿里云镜像-非常重要" class="headerlink" title="配置阿里云镜像 - 非常重要"></a>配置阿里云镜像 - 非常重要</h2><p><a href="https://cr.console.aliyun.com/cn-qingdao/instances/mirrors">https://cr.console.aliyun.com/cn-qingdao/instances/mirrors</a></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211023213623412-1591908811.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://s3o4jtfv.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="测试镜像"><a href="#测试镜像" class="headerlink" title="测试镜像"></a>测试镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211023213713366-850731107.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211023213726660-1861181320.png" alt="image"></p><h1 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker-Compose"></a>安装Docker-Compose</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.0/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上可执行权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -v</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 广度优先搜索算法走迷宫</title>
      <link href="/posts/141103848.html"/>
      <url>/posts/141103848.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>从 0 开始按上左下右的顺序一层一层往外探索</p></blockquote><p><img src="https://img2020.cnblogs.com/blog/2354934/202110/2354934-20211017210853569-1430188502.png" alt="image"></p><p><img src="https://img2020.cnblogs.com/blog/2354934/202110/2354934-20211017214123949-2064121623.png" alt="image"></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// ReadMaze 读取迷宫</span><br><span class="line">func ReadMaze(filename string) [][]int &#123;</span><br><span class="line">    var row, col int               // 行，列</span><br><span class="line">    file, err := os.Open(filename) // 打开文件</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        panic(err)</span><br><span class="line">    &#125;</span><br><span class="line">    defer file.Close()</span><br><span class="line">    // 读取文件头部获取行列 6行5列</span><br><span class="line">    fmt.Fscanf(file, &quot;%d %d&quot;, &amp;row, &amp;col)</span><br><span class="line">    //  为每行创建空间</span><br><span class="line">    maze := make([][]int, row)</span><br><span class="line">    for i := range maze &#123;</span><br><span class="line">        // 为列创建空间</span><br><span class="line">        maze[i] = make([]int, col)</span><br><span class="line">        fmt.Fscanf(file, &quot;%v&quot;) // 把每行最后的 \n 读取出来，避免数据错误</span><br><span class="line">        // 将每列的数据读取到 slice中</span><br><span class="line">        for j := range maze[i] &#123;</span><br><span class="line">            fmt.Fscanf(file, &quot;%d&quot;, &amp;maze[i][j])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return maze</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 点结构体 用于存放点为</span><br><span class="line">type point struct &#123;</span><br><span class="line">    // i 行; j 列</span><br><span class="line">    i, j int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var directions = [4]point&#123;</span><br><span class="line">    // 上左下右的顺序</span><br><span class="line">    &#123;-1, 0&#125;,</span><br><span class="line">    &#123;0, -1&#125;,</span><br><span class="line">    &#123;1, 0&#125;,</span><br><span class="line">    &#123;0, 1&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 两个point 相加</span><br><span class="line">func (p point) add(r point) point &#123;</span><br><span class="line">    return point&#123;p.i + r.i, p.j + r.j&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 向某个地方探索新点是否合法</span><br><span class="line">// 返回探索到的元素值，是否有值</span><br><span class="line">func (p point) at(grid [][]int) (int, bool) &#123;</span><br><span class="line">    // 判断 point 点是否越界，是否走出了 grid 之外</span><br><span class="line">    // 判断 行是否越界</span><br><span class="line">    if p.i &lt; 0 || p.i &gt;= len(grid) &#123;</span><br><span class="line">        return 0, false</span><br><span class="line">    &#125;</span><br><span class="line">    // 判断列是否越界</span><br><span class="line">    if p.j &lt; 0 || p.j &gt;= len(grid[p.i]) &#123;</span><br><span class="line">        return 0, false</span><br><span class="line">    &#125;</span><br><span class="line">    return grid[p.i][p.j], true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Walk</span><br><span class="line">// start 从那个点开始</span><br><span class="line">// end 到那个点结束</span><br><span class="line">func Walk(maze [][]int, start, end point) [][]int &#123;</span><br><span class="line">    // 维护一个和 maze 一样大小的 slice 存放走过的路径</span><br><span class="line">    steps := make([][]int, len(maze))</span><br><span class="line">    for i := range steps &#123;</span><br><span class="line">        steps[i] = make([]int, len(maze[i]))</span><br><span class="line">    &#125;</span><br><span class="line">    queue := []point&#123;start&#125; // 将起点放入队列里</span><br><span class="line">    // 当队列为空时退出</span><br><span class="line">    for len(queue) &gt; 0 &#123;</span><br><span class="line">        // pop 队列中第一个元素</span><br><span class="line">        current := queue[0]</span><br><span class="line">        queue = queue[1:]</span><br><span class="line">        if current == end &#123; // 发现终点-结束</span><br><span class="line">            break</span><br><span class="line">        &#125;</span><br><span class="line">        for _, dir := range directions &#123; // 按上左下右的顺序查找</span><br><span class="line">            next := dir.add(current) // 新点的点位</span><br><span class="line">            // 走迷宫 越界的，或者遇到 1 (撞墙)</span><br><span class="line">            at, ok := next.at(maze)</span><br><span class="line">            if !ok || at == 1 &#123;</span><br><span class="line">                continue</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 如果 steps 不等于 0 则说明走过了</span><br><span class="line">            at, ok = next.at(steps)</span><br><span class="line">            if !ok || at != 0 &#123;</span><br><span class="line">                continue</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 新的点不能是start(回到原点)</span><br><span class="line">            if next == start &#123;</span><br><span class="line">                continue</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 使用新点去探索 steps 获取走的步骤数</span><br><span class="line">            curStep, _ := current.at(steps)</span><br><span class="line">            steps[next.i][next.j] = curStep + 1</span><br><span class="line">            // 将当前探索到的点 加入队列中</span><br><span class="line">            queue = append(queue, next)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return steps</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">    // 读取迷宫文本</span><br><span class="line">    maze := ReadMaze(&quot;maze/maze.in&quot;)</span><br><span class="line"></span><br><span class="line">    // 设置迷宫开始位置和结束位置</span><br><span class="line">    steps := Walk(maze, point&#123;0, 0&#125;, point&#123;len(maze) - 1, len(maze[0]) - 1&#125;)</span><br><span class="line">    for _, row := range steps &#123;</span><br><span class="line">        for _, col := range row &#123;</span><br><span class="line">            fmt.Printf(&quot;%3d&quot;, col)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang/Java 实现无重复字符的最长子串 - LeetCode 算法</title>
      <link href="/posts/1582355105.html"/>
      <url>/posts/1582355105.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。<br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a></p></blockquote><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>示例 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcacadabcd&quot;</span><br><span class="line">输出: 4 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;dabc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><p>示例 4:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;&quot;</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><blockquote><p>原始字符串：abcacadabcd</p></blockquote><p><img src="https://img2020.cnblogs.com/blog/2354934/202110/2354934-20211016134821713-395407765.jpg" alt="image"></p><h1 id="Golang-代码实现"><a href="#Golang-代码实现" class="headerlink" title="Golang 代码实现"></a>Golang 代码实现</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">func lengthOfLongestSubstring(s string) int &#123;</span><br><span class="line">    lastOccurred := make(map[byte]int)</span><br><span class="line">    start := 0     // 子串开始的下标</span><br><span class="line">    maxLength := 0 // 最大子串长度</span><br><span class="line">    for index, ch := range []byte(s) &#123;</span><br><span class="line">        // 如果当前字符存在 map 中</span><br><span class="line">        //且当前字符的下标在start子串开始位置之后的，如果成立则为发生重复</span><br><span class="line">        // 发生重复 start 则当前字符所在的子串下标(map中的下标)后移一位</span><br><span class="line">        lastI, ok := lastOccurred[ch]</span><br><span class="line">        if ok &amp;&amp; lastI &gt;= start &#123;</span><br><span class="line">            start = lastI + 1</span><br><span class="line">        &#125;</span><br><span class="line">        // 计算当前字符下标(index)与 start 下标的距离</span><br><span class="line">        distance := index - start + 1</span><br><span class="line">        if distance &gt; maxLength &#123;</span><br><span class="line">            maxLength = distance</span><br><span class="line">        &#125;</span><br><span class="line">        // key:当前字符 Ascii 码，value:当前字符下标</span><br><span class="line">        lastOccurred[ch] = index</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return maxLength</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Golang-单元测试"><a href="#Golang-单元测试" class="headerlink" title="Golang 单元测试"></a>Golang 单元测试</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 单元测试</span><br><span class="line">func TestSubStr(t *testing.T) &#123;</span><br><span class="line">    tests := []struct &#123;</span><br><span class="line">        s   string // 传入的字符串</span><br><span class="line">        ans int    // 答案</span><br><span class="line">    &#125;&#123;</span><br><span class="line">        // 定义测试数据</span><br><span class="line">        &#123;&quot;acbbbb&quot;, 3&#125;,</span><br><span class="line">        &#123;&quot;bbb&quot;, 1&#125;,</span><br><span class="line">        &#123;&quot;&quot;, 0&#125;,</span><br><span class="line">        &#123;&quot;a&quot;, 1&#125;,</span><br><span class="line">        &#123;&quot;abcde123abcde&quot;, 8&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for _, tt := range tests &#123;</span><br><span class="line">        actual := LongNotReplace(tt.s)</span><br><span class="line">        // 结果不等于设定的答案</span><br><span class="line">        if actual != tt.ans &#123;</span><br><span class="line">            t.Errorf(&quot;got %d for input %q, expected %d&quot;, actual, tt.s, tt.ans)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 性能测试</span><br><span class="line">func BenchmarkSubstr(b *testing.B) &#123;</span><br><span class="line">    s := &quot;acbsafaswwqabcdedg123adadwdcs&quot;</span><br><span class="line">    ans := 7; // 答案</span><br><span class="line">    for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">        s += s</span><br><span class="line">    &#125;</span><br><span class="line">    b.Logf(&quot;strlen:%d&quot;, len(s))</span><br><span class="line">    b.ResetTimer() // 重置当前执行时间，不计算上面拼接字符串</span><br><span class="line">    for i := 0; i &lt; b.N; i++ &#123;</span><br><span class="line">        actual := LongNotReplace(s)</span><br><span class="line">        if actual != ans &#123;</span><br><span class="line">            b.Errorf(&quot;got %d for input %q, expected %d&quot;, actual, s, ans)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java-代码实现"><a href="#Java-代码实现" class="headerlink" title="Java 代码实现"></a>Java 代码实现</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int lengthOfLongestSubstring(String s) &#123;</span><br><span class="line">        int maxLen = 0;</span><br><span class="line">        int start = 0;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; lastOccurred = new HashMap&lt;&gt;();</span><br><span class="line">        char[] chars = s.toCharArray();</span><br><span class="line">        int charsLen = chars.length;</span><br><span class="line">        for (int i = 0; i &lt; charsLen; i++) &#123;</span><br><span class="line">            // 从 map 中获取元素，元素存在且元素出现在start开始的子串中则为重复</span><br><span class="line">            Integer lastI = lastOccurred.get(chars[i]);</span><br><span class="line">            if (null != lastI &amp;&amp; lastI &gt;= start) &#123;</span><br><span class="line">                start = lastI + 1;</span><br><span class="line">            &#125;</span><br><span class="line">            // 计算距离</span><br><span class="line">            int distance = i - start + 1;</span><br><span class="line">            if (distance &gt; maxLen) &#123;</span><br><span class="line">                maxLen = distance;</span><br><span class="line">            &#125;</span><br><span class="line">            lastOccurred.put(chars[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        return maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化版本</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 这里使用空间换速度,使用 slice 替换 map 不涉及处理中文</span><br><span class="line">// 因为使用的是byte所以 byte的空间是0~255</span><br><span class="line">var lastOccurred = make([]int, 255)</span><br><span class="line"></span><br><span class="line">func lengthOfLongestSubstring(s string) int &#123;</span><br><span class="line">    //lastOccurred := make(map[byte]int)</span><br><span class="line">    start := 0     // 子串开始的下标</span><br><span class="line">    maxLength := 0 // 最大子串长度</span><br><span class="line">    // 将默认值修改为-1</span><br><span class="line">    for item := range lastOccurred &#123;</span><br><span class="line">        lastOccurred[item] = -1</span><br><span class="line">    &#125;</span><br><span class="line">    for index, ch := range []byte(s) &#123;</span><br><span class="line">        //且当前字符的下标在start子串开始位置之后的，如果成立则为发生重复</span><br><span class="line">        // 发生重复 start 则当前字符所在的子串下标(map中的下标)后移一位</span><br><span class="line">        if lastI := lastOccurred[ch]; lastI != -1 &amp;&amp; lastI &gt;= start &#123;</span><br><span class="line">            start = lastI + 1</span><br><span class="line">        &#125;</span><br><span class="line">        // 计算当前字符下标(index)与 start 下标的距离</span><br><span class="line">        distance := index - start + 1</span><br><span class="line">        if distance &gt; maxLength &#123;</span><br><span class="line">            maxLength = distance</span><br><span class="line">        &#125;</span><br><span class="line">        // key:当前字符 Ascii 码，value:当前字符下标</span><br><span class="line">        lastOccurred[ch] = index</span><br><span class="line">    &#125;</span><br><span class="line">    return maxLength</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 实现二进制转换</title>
      <link href="/posts/690518952.html"/>
      <url>/posts/690518952.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用除二取余法对整数进行二进制转换</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">二进制转换</span><br><span class="line">*/</span><br><span class="line">func convert2binary(n int) &#123;</span><br><span class="line">    result := &quot;&quot;</span><br><span class="line">    for ; n &gt; 0; n /= 2 &#123; // 每次除于二</span><br><span class="line">        // 求余数</span><br><span class="line">        lsb := n % 2</span><br><span class="line">        // 每次求到的余数添加到结果的前面</span><br><span class="line">        result = strconv.Itoa(lsb) + result</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    convert2binary(100)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MapReduce 案例-统计每台智能音箱设备内容播放时长</title>
      <link href="/posts/2581864689.html"/>
      <url>/posts/2581864689.html</url>
      
        <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><blockquote><p>统计每台智能音箱设备内容播放时长</p></blockquote><p>原始日志格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">日志id设备idappkey(合作硬件厂商)  IP      自有内容时长(s)    第三方内容时长(s) 网络状态码</span><br><span class="line">001001577c3   kar890809   120.111.222.99  1116           865          200</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设备id    自有内容时长(s)  第三方内容时长(s) 总时长</span><br><span class="line">001577c3    11160           9540        20700</span><br></pre></td></tr></table></figure><p>整体思路分析<br>Map 阶段：</p><ol><li>读取一行文本数据，按照制表符切分</li><li>抽取出自有内容时长，第三方内容时长，设备 id</li><li>输出：key -&gt; 设备 id,value:封装一个 bean 对象，bean 对象携带自有内容时长，第三方内容、设备id</li><li>自定义bean对象作为 value 输出，需要实现 writable序列化接口<br>Reduce阶段</li><li>在 reduce 方法中直接遍历迭代器，累加时长然后输出即可</li></ol><h1 id="生成测试数据"><a href="#生成测试数据" class="headerlink" title="生成测试数据"></a>生成测试数据</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void generateData() throws IOException &#123;</span><br><span class="line">    String path = &quot;D:\\Code\\Hadoop\\wordCount\\datalog.txt&quot;;</span><br><span class="line">    File file = new File(path);</span><br><span class="line">    if (file.exists()) &#123; // 如果存在则删除</span><br><span class="line">        file.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BufferedWriter bos = new BufferedWriter(new FileWriter(&quot;D:\\Code\\Hadoop\\wordCount\\datalog.txt&quot;));</span><br><span class="line">    Random random = new Random();</span><br><span class="line">    for (int i = 1; i &lt;= 3000000; i++) &#123;</span><br><span class="line">        String driverId = generateWord(4);</span><br><span class="line">        String appKey = generateWord(5);</span><br><span class="line">        String ip = getRandomIp();</span><br><span class="line">        int selfDuration = random.nextInt(1000); // 自有内容时长</span><br><span class="line">        int thirdPartDuration = random.nextInt(1000); // 第三方内容时长</span><br><span class="line">        int status = 200;</span><br><span class="line">        String line = i + &quot;\t&quot; + driverId + &quot;\t&quot; + appKey + &quot;\t&quot; + ip + &quot;\t&quot; + selfDuration + &quot;\t&quot; + thirdPartDuration + &quot;\t&quot; + status + &quot;\n&quot;;</span><br><span class="line">        bos.write(line);</span><br><span class="line">    &#125;</span><br><span class="line">    bos.close();</span><br><span class="line">    System.out.println(&quot;生成数据文件成功！&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 生成随机用户名</span><br><span class="line"> */</span><br><span class="line">public static String generateWord(Integer count) &#123;</span><br><span class="line">    StringBuffer str = new StringBuffer();</span><br><span class="line">    for (int i = 1; i &lt;= count; i++) &#123;</span><br><span class="line">        str.append((char) (Math.random() * 5 + &#x27;a&#x27;));</span><br><span class="line">    &#125;</span><br><span class="line">    return str.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取一个随机IP</span><br><span class="line"> */</span><br><span class="line">public static String getRandomIp() &#123;</span><br><span class="line"></span><br><span class="line">    // 指定 IP 范围</span><br><span class="line">    int[][] range = &#123;</span><br><span class="line">            &#123;607649792, 608174079&#125;, // 36.56.0.0-36.63.255.255</span><br><span class="line">            &#123;1038614528, 1039007743&#125;, // 61.232.0.0-61.237.255.255</span><br><span class="line">            &#123;1783627776, 1784676351&#125;, // 106.80.0.0-106.95.255.255</span><br><span class="line">            &#123;2035023872, 2035154943&#125;, // 121.76.0.0-121.77.255.255</span><br><span class="line">            &#123;2078801920, 2079064063&#125;, // 123.232.0.0-123.235.255.255</span><br><span class="line">            &#123;-1950089216, -1948778497&#125;, // 139.196.0.0-139.215.255.255</span><br><span class="line">            &#123;-1425539072, -1425014785&#125;, // 171.8.0.0-171.15.255.255</span><br><span class="line">            &#123;-1236271104, -1235419137&#125;, // 182.80.0.0-182.92.255.255</span><br><span class="line">            &#123;-770113536, -768606209&#125;, // 210.25.0.0-210.47.255.255</span><br><span class="line">            &#123;-569376768, -564133889&#125;, // 222.16.0.0-222.95.255.255</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Random random = new Random();</span><br><span class="line">    int index = random.nextInt(10);</span><br><span class="line">    String ip = num2ip(range[index][0] + random.nextInt(range[index][1] - range[index][0]));</span><br><span class="line">    return ip;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 将十进制转换成IP地址</span><br><span class="line"> */</span><br><span class="line">public static String num2ip(int ip) &#123;</span><br><span class="line">    int[] b = new int[4];</span><br><span class="line">    b[0] = (ip &gt;&gt; 24) &amp; 0xff;</span><br><span class="line">    b[1] = (ip &gt;&gt; 16) &amp; 0xff;</span><br><span class="line">    b[2] = (ip &gt;&gt; 8) &amp; 0xff;</span><br><span class="line">    b[3] = ip &amp; 0xff;</span><br><span class="line">    // 拼接 IP</span><br><span class="line">    String x = b[0] + &quot;.&quot; + b[1] + &quot;.&quot; + b[2] + &quot;.&quot; + b[3];</span><br><span class="line">    return x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SpeakBean-实体"><a href="#SpeakBean-实体" class="headerlink" title="SpeakBean 实体"></a>SpeakBean 实体</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package com.orginly.mapreduce.speak;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.io.Writable;</span><br><span class="line"></span><br><span class="line">import java.io.DataInput;</span><br><span class="line">import java.io.DataOutput;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * map输出kv的value类型 需要实现 Writable 序列化接口</span><br><span class="line"> */</span><br><span class="line">public class SpeakBean implements Writable &#123;</span><br><span class="line"></span><br><span class="line">    private String driverId; // 设备ID</span><br><span class="line">    private Long selfDuration; // 自有内容时长</span><br><span class="line">    private Long thirdPartDuration; // 第三方内容时长</span><br><span class="line">    private Long totalDuration; // 总时长</span><br><span class="line">    </span><br><span class="line">    // 空参(必须)</span><br><span class="line">    public SpeakBean() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 有参构造</span><br><span class="line">    public SpeakBean(String driverId, Long selfDuration, Long thirdPartDuration) &#123;</span><br><span class="line">        this.driverId = driverId;</span><br><span class="line">        this.selfDuration = selfDuration;</span><br><span class="line">        this.thirdPartDuration = thirdPartDuration;</span><br><span class="line">        this.totalDuration = selfDuration + thirdPartDuration; // 总时长 = 自有时长 + 第三方时长</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 序列化方法：将内容输出到网络或写入文本中</span><br><span class="line">    @Override</span><br><span class="line">    public void write(DataOutput dataOutput) throws IOException &#123;</span><br><span class="line">        dataOutput.writeUTF(driverId);</span><br><span class="line">        dataOutput.writeLong(selfDuration);</span><br><span class="line">        dataOutput.writeLong(thirdPartDuration);</span><br><span class="line">        dataOutput.writeLong(totalDuration);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 反序列化方法</span><br><span class="line">    @Override</span><br><span class="line">    public void readFields(DataInput dataInput) throws IOException &#123;</span><br><span class="line">        driverId = dataInput.readUTF();</span><br><span class="line">        selfDuration = dataInput.readLong();</span><br><span class="line">        thirdPartDuration = dataInput.readLong();</span><br><span class="line">        totalDuration = dataInput.readLong();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;selfDuration:&quot; + selfDuration + &quot;\t&quot; + &quot;thirdPartDuration:&quot; + thirdPartDuration + &quot;\t&quot; + &quot;totalDuration:&quot; + totalDuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Long getSelfDuration() &#123;</span><br><span class="line">        return selfDuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Long getThirdPartDuration() &#123;</span><br><span class="line">        return thirdPartDuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.orginly.mapreduce.speak;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.io.LongWritable;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Mapper的泛型四个参数，两对kv</span><br><span class="line"> * 第一对kv：输入参数   key=&gt;一行文本的偏移量 value=&gt;一行文本内容</span><br><span class="line"> * 第二对kv：输出参数   key=&gt;map输出的key类型  v:map输出的value类型</span><br><span class="line"> */</span><br><span class="line">public class SpeakMapper extends Mapper&lt;LongWritable, Text, Text, SpeakBean&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private Text device_id = new Text();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void map(LongWritable key, Text value, Mapper&lt;LongWritable, Text, Text, SpeakBean&gt;.Context context) throws IOException, InterruptedException &#123;</span><br><span class="line">        // 接收到一行数据转为 String 类型</span><br><span class="line">        String str = value.toString();</span><br><span class="line">        // 按照 \t 进行分隔得到设备id、自有时长、第三方时长</span><br><span class="line">        String[] fields = str.split(&quot;\t&quot;);</span><br><span class="line">        String selfDuration = fields[fields.length - 3];</span><br><span class="line">        String thIrdPartDuration = fields[fields.length - 2];</span><br><span class="line">        String driverId = fields[1];</span><br><span class="line">        // 输出 &lt;设备id,bean对象&gt;</span><br><span class="line">        SpeakBean speakBean = new SpeakBean(driverId, Long.parseLong(selfDuration), Long.parseLong(thIrdPartDuration));</span><br><span class="line">        device_id.set(driverId);</span><br><span class="line">        context.write(device_id, speakBean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.orginly.mapreduce.speak;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 继承 Reducer 类</span><br><span class="line"> * 有四个泛型，两对 kv</span><br><span class="line"> * 第一对kv要与 Mapper 输出类型一致 (Text,IntWritable)</span><br><span class="line"> * 第二对kv自己设计决定输出结果数据是什么类型</span><br><span class="line"> */</span><br><span class="line">public class SpeakReduce extends Reducer&lt;Text, SpeakBean, Text, SpeakBean&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param key     map输出的某一个key, driverId</span><br><span class="line">     * @param values  map输出的kv对中相同key的value的一个集合</span><br><span class="line">     * @param context</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    protected void reduce(Text key, Iterable&lt;SpeakBean&gt; values, Reducer&lt;Text, SpeakBean, Text, SpeakBean&gt;.Context context) throws IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        // 每一次调用reduce 方法都是 key 相同的一个集合</span><br><span class="line">        Long selfDuration = 0L;</span><br><span class="line">        Long thirdPartDuration = 0L;</span><br><span class="line">        for (SpeakBean speak : values) &#123; // 累加</span><br><span class="line">            selfDuration += speak.getSelfDuration();</span><br><span class="line">            thirdPartDuration += speak.getThirdPartDuration();</span><br><span class="line">        &#125;</span><br><span class="line">        // 封装为一个 bean 数据</span><br><span class="line">        SpeakBean speakBean = new SpeakBean(key.toString(), selfDuration, thirdPartDuration);</span><br><span class="line">        // 输出</span><br><span class="line">        context.write(key, speakBean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.orginly.mapreduce.speak;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.conf.Configuration;</span><br><span class="line">import org.apache.hadoop.fs.Path;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.Job;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class SpeakDriver &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, InterruptedException, ClassNotFoundException &#123;</span><br><span class="line">        // 1. 获取配置文件对象,获取 job 对象实例</span><br><span class="line">        Configuration entries = new Configuration();</span><br><span class="line">        Job job = Job.getInstance(entries, &quot;speakDriver&quot;);</span><br><span class="line">        // 2. 指定程序 jar 的本地路径</span><br><span class="line">        job.setJarByClass(SpeakDriver.class);</span><br><span class="line">        // 3. 指定 Mapper / Reduce类</span><br><span class="line">        job.setMapperClass(SpeakMapper.class);</span><br><span class="line">        job.setReducerClass(SpeakReduce.class);</span><br><span class="line">        // 4. 指定 Mapper 输出的 kv 数据类型</span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(SpeakBean.class);</span><br><span class="line">        // 5. 指定最终输出的 kv 数据类型</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(SpeakBean.class);</span><br><span class="line">        // 6. 指定 job 处理的原始数据路径</span><br><span class="line">        FileInputFormat.setInputPaths(job, new Path(args[0]));</span><br><span class="line">        // 7. 指定 job 输出结果路径</span><br><span class="line">        FileOutputFormat.setOutputPath(job, new Path(args[1]));</span><br><span class="line">        // 8. 提交 job 作业</span><br><span class="line">        long start_time = System.currentTimeMillis();</span><br><span class="line">        boolean flag = job.waitForCompletion(true);</span><br><span class="line">        long end_time = System.currentTimeMillis();</span><br><span class="line">        System.out.println(&quot;运行时间&quot; + (end_time - start_time) + &quot;ms&quot;);</span><br><span class="line">        System.exit(flag ? 0 : 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="验证程序"><a href="#验证程序" class="headerlink" title="验证程序"></a>验证程序</h1><h2 id="本地验证"><a href="#本地验证" class="headerlink" title="本地验证"></a>本地验证</h2><blockquote><p>使用 IDEA 运行 Drive 中的 main() 方法<br>如果出现其他异常请查看 <a href="https://www.cnblogs.com/orginly/p/15392871.html">https://www.cnblogs.com/orginly/p/15392871.html</a></p></blockquote><ol><li>先自动运行一次，此时会 args 下标异常<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211010213127611-110795656.png" alt="image"></li><li>编辑运行配置添加参数<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211010212836575-1267325819.png" alt="image"></li><li>重新运行<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211011124522797-265493622.png" alt="image"><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211011124647875-1440434621.png" alt="image"></li></ol><h2 id="Yarn-集群验证"><a href="#Yarn-集群验证" class="headerlink" title="Yarn 集群验证"></a>Yarn 集群验证</h2><ol><li>把程序打成 jar 包,改名为 wordCount.jar 上传到 Hadoop 集群</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211011130544801-1530945115.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 上传到服务器</span><br><span class="line">rz</span><br><span class="line"># 重命名</span><br><span class="line">mv wordCount-1.0-SNAPSHOT.jar wordCount.jar</span><br></pre></td></tr></table></figure><ol start="2"><li>启动 Hadoop 集群(Hdfs,Yarn)</li><li>使用 Hadoop 命令提交任务运行</li></ol><p><strong>因为是集群，源文件不能存放在本地目录，需要上传至 HFDS 进行处理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar wordCount.jar com.orginly.mapreduce.speak.SpeakDriver /mapReduce/datalog.txt /speakoutput</span><br></pre></td></tr></table></figure><p><strong>执行成功</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211013144203122-1419482663.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211013144254507-380439751.png" alt="image"></p><p>如果执行命令时出现版本过低提示，请安装服务器所使用的 jdk 版本进行 jar 的打包<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211011133011253-1811689462.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211011133129493-532720704.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 生成随机 IP 地址</title>
      <link href="/posts/1356001027.html"/>
      <url>/posts/1356001027.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>生成 100 个随机 IP 地址</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取一个随机IP</span><br><span class="line"> */</span><br><span class="line">public static String getRandomIp() &#123;</span><br><span class="line"></span><br><span class="line">    // 指定 IP 范围</span><br><span class="line">    int[][] range = &#123;</span><br><span class="line">            &#123;607649792, 608174079&#125;, // 36.56.0.0-36.63.255.255</span><br><span class="line">            &#123;1038614528, 1039007743&#125;, // 61.232.0.0-61.237.255.255</span><br><span class="line">            &#123;1783627776, 1784676351&#125;, // 106.80.0.0-106.95.255.255</span><br><span class="line">            &#123;2035023872, 2035154943&#125;, // 121.76.0.0-121.77.255.255</span><br><span class="line">            &#123;2078801920, 2079064063&#125;, // 123.232.0.0-123.235.255.255</span><br><span class="line">            &#123;-1950089216, -1948778497&#125;, // 139.196.0.0-139.215.255.255</span><br><span class="line">            &#123;-1425539072, -1425014785&#125;, // 171.8.0.0-171.15.255.255</span><br><span class="line">            &#123;-1236271104, -1235419137&#125;, // 182.80.0.0-182.92.255.255</span><br><span class="line">            &#123;-770113536, -768606209&#125;, // 210.25.0.0-210.47.255.255</span><br><span class="line">            &#123;-569376768, -564133889&#125;, // 222.16.0.0-222.95.255.255</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Random random = new Random();</span><br><span class="line">    int index = random.nextInt(10);</span><br><span class="line">    String ip = num2ip(range[index][0] + random.nextInt(range[index][1] - range[index][0]));</span><br><span class="line">    return ip;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 将十进制转换成IP地址</span><br><span class="line"> */</span><br><span class="line">public static String num2ip(int ip) &#123;</span><br><span class="line">    int[] b = new int[4];</span><br><span class="line">    b[0] = (ip &gt;&gt; 24) &amp; 0xff;</span><br><span class="line">    b[1] = (ip &gt;&gt; 16) &amp; 0xff;</span><br><span class="line">    b[2] = (ip &gt;&gt; 8) &amp; 0xff;</span><br><span class="line">    b[3] = ip &amp; 0xff;</span><br><span class="line">    // 拼接 IP</span><br><span class="line">    String x = b[0] + &quot;.&quot; + b[1] + &quot;.&quot; + b[2] + &quot;.&quot; + b[3];</span><br><span class="line">    return x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>主方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    int count = 100;</span><br><span class="line">    for (int i = 0; i &lt; count; i++) &#123;</span><br><span class="line">        String randomIp = getRandomIp();</span><br><span class="line">        System.out.println(randomIp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MapReduce 实现统计单数出现次数</title>
      <link href="/posts/3003309118.html"/>
      <url>/posts/3003309118.html</url>
      
        <content type="html"><![CDATA[<h1 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h1><ol><li><p>在 windows 中配置 hadoop 及环境变量 HADOOP_<br>下载 winutils.exe 放入 bin目录中<br><a href="https://github.com/cdarlint/winutils">https://github.com/cdarlint/winutils</a></p></li><li><p>创建 maven 工程 引入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hadoop-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.10.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.14.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写 log4j 配置文件<br>参考：<a href="https://www.cnblogs.com/orginly/p/14847470.html">https://www.cnblogs.com/orginly/p/14847470.html</a></p></li></ol><h1 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h1><blockquote><p>仿照源码</p></blockquote><h2 id="Map-阶段"><a href="#Map-阶段" class="headerlink" title="Map 阶段"></a>Map 阶段</h2><ol><li>map()方法中把传入的数据转为 String 类型</li><li>根据空格切分出单词</li><li>输出&lt;单词,1&gt;</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.orginly.mapreduce.wc;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.io.IntWritable;</span><br><span class="line">import org.apache.hadoop.io.LongWritable;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 单词记数</span><br><span class="line"> * 继承 Mapper 类</span><br><span class="line"> * Mapper 类的泛型参数共4个 两个key value</span><br><span class="line"> * 第一对kv：map输入参数类型 (LongWritable, Text 文本偏移量,一行文本内容)</span><br><span class="line"> * 第二对kv：map输出参数类型 (Text, IntWritable 单词,1)</span><br><span class="line"> */</span><br><span class="line">public class WordCountMapper extends Mapper&lt;LongWritable, Text, Text, IntWritable&gt; &#123;</span><br><span class="line"></span><br><span class="line">    // 提升为成员变量避免每次执行 map 方法时都创建一次对象</span><br><span class="line">    private final Text word = new Text();</span><br><span class="line">    private final IntWritable intWritable = new IntWritable(1);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * map 方法的输入参数，一行文本就调用一次 map 方法</span><br><span class="line">     *</span><br><span class="line">     * @param key     文本偏移量</span><br><span class="line">     * @param value   一行文本内容</span><br><span class="line">     * @param context</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    protected void map(LongWritable key, Text value, Mapper&lt;LongWritable, Text, Text, IntWritable&gt;.Context context) throws IOException, InterruptedException &#123;</span><br><span class="line">        // 1. 接收到文本内容，转为String 类型</span><br><span class="line">        String str = value.toString();</span><br><span class="line">        // 2. 按照空格进行拆分单词</span><br><span class="line">        String[] words = str.split(&quot; &quot;);</span><br><span class="line">        // 3. 输出&lt;单词,1&gt;</span><br><span class="line">        for (String s : words) &#123;</span><br><span class="line">            word.set(s);</span><br><span class="line">            context.write(word, intWritable);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reduce-阶段"><a href="#Reduce-阶段" class="headerlink" title="Reduce 阶段"></a>Reduce 阶段</h2><ol><li>总各个key(单词)的个数，遍历 value 数据进行累加</li><li>输出 key 的总数</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package com.orginly.mapreduce.wc;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.io.IntWritable;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 继承 Reducer 类</span><br><span class="line"> * 有四个泛型，两对 kv</span><br><span class="line"> * 第一对kv要与 Mapper 输出类型一致 (Text,IntWritable)</span><br><span class="line"> * 第二对kv自己设计决定输出结果数据是什么类型</span><br><span class="line"> */</span><br><span class="line">public class WordCountReduce extends Reducer&lt;Text, IntWritable, Text, IntWritable&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private IntWritable total = new IntWritable();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 假设 map 方法 执行三次得到：hello,1 hello,1 hello,1</span><br><span class="line">     * reduce 的 key =&gt; hello, values =&gt; &lt;1,1,1&gt;</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * 假设 map 方法得到 hello,1 hello,1 hello,1 hadoop,1 reduce,1 hadoop,1</span><br><span class="line">     * reduce 方法何时调用：一组 key 相同的 kv 中 value 组成然后调用一次 reduce</span><br><span class="line">     * 第一次：key =&gt; hello, values =&gt; &lt;1,1,1&gt;</span><br><span class="line">     * 第一次：key =&gt; hadoop, values =&gt; &lt;1,1&gt;</span><br><span class="line">     * 第三次：key =&gt; reduce, values =&gt; &lt;1&gt;</span><br><span class="line">     *</span><br><span class="line">     * @param key     方法输出的key本案例中就是单词</span><br><span class="line">     * @param values  一组key相同的kv的value组成的集合</span><br><span class="line">     * @param context</span><br><span class="line">     * @throws IOException</span><br><span class="line">     * @throws InterruptedException</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    protected void reduce(Text key, Iterable&lt;IntWritable&gt; values, Reducer&lt;Text, IntWritable, Text, IntWritable&gt;.Context context) throws IOException, InterruptedException &#123;</span><br><span class="line">        // 遍历 key 对应的 values 进行累加</span><br><span class="line">        int sum = 0;</span><br><span class="line">        for (IntWritable value : values) &#123;</span><br><span class="line">            sum += value.get();</span><br><span class="line">        &#125;</span><br><span class="line">        // 直接输出当前 key 对应的 sum 值，结果就是单词出现的总次数</span><br><span class="line">        total.set(sum);</span><br><span class="line">        context.write(key,total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h2><ol><li>获取配置文件对象,获取 job 对象实例</li><li>指定程序 jar 的本地路径</li><li>指定 Mapper / Reduce类</li><li>指定 Mapper 输出的 kv 数据类型</li><li>指定 最终输出的 kv 数据类型 </li><li>指定 job 处理的原始数据路径</li><li>指定 job 输出结果路径</li><li>提交作业</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.orginly.mapreduce.wc;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.conf.Configuration;</span><br><span class="line">import org.apache.hadoop.fs.Path;</span><br><span class="line">import org.apache.hadoop.io.IntWritable;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.Job;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 封装任务并提交运行</span><br><span class="line"> */</span><br><span class="line">public class WordCountDriver &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, InterruptedException, ClassNotFoundException &#123;</span><br><span class="line">        // 1. 获取配置文件对象,获取 job 对象实例</span><br><span class="line">        Configuration conf = new Configuration();</span><br><span class="line">        Job job = Job.getInstance(conf, &quot;WordCountDriver&quot;);</span><br><span class="line">        // 2. 指定程序 jar 的本地路径</span><br><span class="line">        job.setJarByClass(WordCountDriver.class);</span><br><span class="line">        // 3. 指定 Mapper / Reduce类</span><br><span class="line">        job.setMapperClass(WordCountMapper.class);</span><br><span class="line">        job.setReducerClass(WordCountReduce.class);</span><br><span class="line">        // 4. 指定 Mapper 输出的 kv 数据类型</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        // 5. 指定最终输出的 kv 数据类型</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        // 6. 指定 job 处理的原始数据路径</span><br><span class="line">        FileInputFormat.setInputPaths(job, new Path(args[0]));</span><br><span class="line">        // 7. 指定 job 输出结果路径</span><br><span class="line">        FileOutputFormat.setOutputPath(job, new Path(args[1]));</span><br><span class="line">        // 8. 提交作业</span><br><span class="line">        boolean flag = job.waitForCompletion(true);// 等待完成 true为完成</span><br><span class="line">        System.exit(flag ? 0 : 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="验证程序"><a href="#验证程序" class="headerlink" title="验证程序"></a>验证程序</h1><h2 id="本地验证"><a href="#本地验证" class="headerlink" title="本地验证"></a>本地验证</h2><blockquote><p>使用 IDEA 运行 Drive 中的 main() 方法<br>如果出现其他异常请查看 <a href="https://www.cnblogs.com/orginly/p/15392871.html">https://www.cnblogs.com/orginly/p/15392871.html</a></p></blockquote><ol><li>先自动运行一次，此时会 args 下标异常<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220115230234610.png" alt="image-20220115230234610"></li><li>编辑运行配置添加参数<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220115230215524.png"></li><li>重新运行<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220115230211476.png" alt="image-20220115230211476"><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220115230200218.png" alt="image-20220115230200218"></li></ol><h2 id="Yarn-集群验证"><a href="#Yarn-集群验证" class="headerlink" title="Yarn 集群验证"></a>Yarn 集群验证</h2><ol><li>把程序打成 jar 包,改名为 wordCount.jar 上传到 Hadoop 集群</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220115230137091.png" alt="image-20220115230137091"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 上传到服务器</span><br><span class="line">rz</span><br><span class="line"># 重命名</span><br><span class="line">mv wordCount-1.0-SNAPSHOT.jar wordCount.jar</span><br></pre></td></tr></table></figure><ol start="2"><li>启动 Hadoop 集群(Hdfs,Yarn)</li><li>使用 Hadoop 命令提交任务运行</li></ol><p><strong>因为是集群，源文件不能存放在本地目录，需要上传至 HFDS 进行处理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar wordCount.jar com.orginly.mapreduce.wc.WordCountDriver /mapReduce/wc.txt /wcoutput</span><br></pre></td></tr></table></figure><p><strong>执行成功</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211011133323695-604630425.png" alt="image"><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211011133424468-687559127.png" alt="image"></p><p>如果执行命令时出现版本过低提示，请安装服务器所使用的 jdk 版本进行 jar 的打包<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220115230100843.png" alt="image-20220115230100843"></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220115230111324.png" alt="image-20220115230111324"></p>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>win11启动hadoop NativeIO$Windows.access0(Ljava/lang/String;I)Z报异常解决方案</title>
      <link href="/posts/1628982490.html"/>
      <url>/posts/1628982490.html</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>操作系统: Windows 11<br>Hadoop版本: 2.10.1</p><h1 id="hadoop-dll-不存在"><a href="#hadoop-dll-不存在" class="headerlink" title="hadoop.dll 不存在"></a>hadoop.dll 不存在</h1><blockquote><p>org.apache.hadoop.io.nativeio.NativeIO$Windows.access0(Ljava/lang/String;I)Z</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211011123730976-1624823700.png" alt="image"></p><p><strong>解决方案</strong><br>下载对应版本的 winutils.exe 和 hadoop.dll 放到 ./bin 目录下<br>如果没有对应版本可以尝试使用相近的版本<br>例如我是使用的 hadoop-2.8.1版本的 hadoop.dll</p><p>如果通过以上步骤仍然解决不了问题，那么可能是系统问题，这时可以将 hadoop.dll 拷贝到 C:/Windows/System32 目录下</p><p>下载地址 <a href="https://github.com/steveloughran/winutils">https://github.com/steveloughran/winutils</a></p>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Apache Hadoop 完全分布式集群搭建</title>
      <link href="/posts/2966744516.html"/>
      <url>/posts/2966744516.html</url>
      
        <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><blockquote><p>Hadoop 框架是采用 Java 语言编写，需要 Java 环境(jvm) </p></blockquote><ol><li>JDK版本：JDK8 版本</li><li>集群：使用 vmware 虚拟机虚拟三台 linux节点，linux操作系统: Centos7</li><li>虚拟机环境准备三台虛拟机(静态iP、关闭防火墙、修改主机名、配置兔密登录、集群时间同步)</li></ol><blockquote><p>首先创建一台虚拟机配置好 hadoop环境变量后分别克隆出 slave1、slave2节点</p></blockquote><p>创建目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/software  -- 软件安装包</span><br><span class="line">mkdir /opt/servers    -- 软件安装目录</span><br></pre></td></tr></table></figure><h1 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h1><table><thead><tr><th>框架</th><th>master</th><th>slave1</th><th>slave2</th></tr></thead><tbody><tr><td>HDFS</td><td>NameNode、DataNode</td><td>DataNode</td><td>SecondaryNameNode、DataNode</td></tr><tr><td>YARN</td><td>NodeManager</td><td>NodeManager</td><td>ResourceManager、NodeManager</td></tr></tbody></table><h1 id="安装-JKD8"><a href="#安装-JKD8" class="headerlink" title="安装 JKD8"></a>安装 JKD8</h1><p>下载 <code>jdk-8u202-linux-x64.tar.gz</code> 至 <code>/usr/java</code> 目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 解压</span><br><span class="line">cd /usr/java</span><br><span class="line">tar -zxvf jdk-8u202-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>配置环境变量<br><code>vim /etc/profile</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># JAVA</span><br><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_202</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line"># 验证是否成功</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><ol start="4"><li>关闭防火墙<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure></li></ol><h1 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h1><h2 id="下载-Hadoop"><a href="#下载-Hadoop" class="headerlink" title="下载 Hadoop"></a>下载 Hadoop</h2><p>下载 Hadoop 到 <code>/opt/software</code> 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -P /opt/software http://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-2.10.1/hadoop-2.10.1.tar.gz</span><br></pre></td></tr></table></figure><p>解压 Hadoop 到 <code>/opt/servers</code> 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf /opt/software/hadoop-2.10.1.tar.gz -C /opt/servers</span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><ol><li><p>添加环境变量到<code>vim /etc/profile</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># HADOOP</span><br><span class="line">export HADOOP_HOME=/opt/servers/hadoop-2.10.1</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure></li><li><p>使环境变量生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>hadoop version</code> 检查配置是否正常</p></li><li><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220720183235033.png" alt="image"></p></li></ol><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x bin -- 对 hadoop 操作相关命令(.cmd为windows用)</span><br><span class="line">drwxr-xr-x etc -- 配置文件目录</span><br><span class="line">drwxr-xr-x include -- jar包和lib一样 </span><br><span class="line">drwxr-xr-x lib -- hadoop本地库，存放jar包</span><br><span class="line">drwxr-xr-x libexec -- 本地系统依赖库 </span><br><span class="line">-rw-r--r-- LICENSE.txt</span><br><span class="line">-rw-r--r-- NOTICE.txt </span><br><span class="line">-rw-r--r-- README.txt -- 描述文件 </span><br><span class="line">drwxr-xr-x sbin -- 命令(hadoop停止启动等)</span><br><span class="line">drwxr-xr-x share -- 一些hadoop相关jar包及官方案例</span><br></pre></td></tr></table></figure><h1 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h1><blockquote><p>配置好以上环境后克隆出两台节点 slave1、slave2 并分配静态 IP。修改主机名<br>PS：需要在关机状态下克隆</p></blockquote><ol><li><p>修改本机静态 IP</p></li><li><p>修改本机 Hostname 并配置 SSH 免密登录</p><blockquote><p>请查看：<a href="https://www.cnblogs.com/lzscxb/p/15381178.html">https://www.cnblogs.com/lzscxb/p/15381178.html</a></p></blockquote></li><li><p>多台设备时间同步</p><blockquote><p><a href="https://www.cnblogs.com/LzsCxb/p/15387613.html">https://www.cnblogs.com/LzsCxb/p/15387613.html</a></p></blockquote></li></ol><h1 id="集群规划实施"><a href="#集群规划实施" class="headerlink" title="集群规划实施"></a>集群规划实施</h1><blockquote><p>以下内容直到 <strong>集群分发配置</strong> 都是在 master 节点中配置</p></blockquote><h2 id="HDFS-集群配置"><a href="#HDFS-集群配置" class="headerlink" title="HDFS 集群配置"></a>HDFS 集群配置</h2><p>配置文件目录在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/servers/hadoop-2.10.1/etc/hadoop</span><br></pre></td></tr></table></figure><h3 id="HDFS配置JDK环境"><a href="#HDFS配置JDK环境" class="headerlink" title="HDFS配置JDK环境"></a>HDFS配置JDK环境</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hadoop-env.sh</span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220720183251420.png" alt="image-20220720183251420"></p><h3 id="NameNode节点及数据存储目录"><a href="#NameNode节点及数据存储目录" class="headerlink" title="NameNode节点及数据存储目录"></a>NameNode节点及数据存储目录</h3><blockquote><p>master 节点<br>PS：配置信息一定要放在 configuration标签中！</p></blockquote><p>core-site.xml 默认配置在：<br><a href="https://hadoop.apache.org/docs/r2.10.1/hadoop-project-dist/hadoop-common/core-default.xml">https://hadoop.apache.org/docs/r2.10.1/hadoop-project-dist/hadoop-common/core-default.xml</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim core-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定 HDFS 中的 NameNode 的地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://master:9000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 指定 Hadoop 运行时产生文件的存储目录 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/opt/servers/hadoop-2.10.1/data/tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h3 id="SecondaryNameNode"><a href="#SecondaryNameNode" class="headerlink" title="SecondaryNameNode"></a>SecondaryNameNode</h3><p>hdfs-site.xml 默认配置<br><a href="https://hadoop.apache.org/docs/r2.10.1/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml">https://hadoop.apache.org/docs/r2.10.1/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hdfs-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定Hadoop辅助名称节点主机配置 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;slave2:50090&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 指定副本数量 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h3 id="DataNode从节点"><a href="#DataNode从节点" class="headerlink" title="DataNode从节点"></a>DataNode从节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/servers/hadoop-2.10.1/etc/hadoop</span><br><span class="line">vim slaves</span><br></pre></td></tr></table></figure><p>将原来内容删除然后将需要启动DatanNode的节点主机名写入</p><p>PS：不要加主机名后面加空格，也不要多起一行</p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220720183304034.png" alt="image-20220720183304034"></p><h2 id="MapReduce-集群配置"><a href="#MapReduce-集群配置" class="headerlink" title="MapReduce 集群配置"></a>MapReduce 集群配置</h2><h3 id="配置-MapReduce-JDK路径"><a href="#配置-MapReduce-JDK路径" class="headerlink" title="配置 MapReduce JDK路径"></a>配置 MapReduce JDK路径</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim mapred-env.sh</span><br></pre></td></tr></table></figure><p>解开 JAVA_HOME 注释并配置正确的JAVA_HOME路径<br><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220720183328373.png" alt="image-20220720183328373"></p><h3 id="指定-MapReduce-计算框架运行-YARN-资源调度框架"><a href="#指定-MapReduce-计算框架运行-YARN-资源调度框架" class="headerlink" title="指定 MapReduce 计算框架运行 YARN 资源调度框架"></a>指定 MapReduce 计算框架运行 YARN 资源调度框架</h3><p>因为只有模版文件<code>mapred-site.xml.template</code>所以需要复制一份出来改名为<code>mapred-site.xml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp mapred-site.xml.template mapred-site.xml</span><br><span class="line">vim mapred-site.xml</span><br></pre></td></tr></table></figure><p>默认配置：<a href="https://hadoop.apache.org/docs/r2.10.1/hadoop-mapreduce-client/hadoop-mapreduce-client-core/mapred-default.xml">https://hadoop.apache.org/docs/r2.10.1/hadoop-mapreduce-client/hadoop-mapreduce-client-core/mapred-default.xml</a>    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定 MapReduce 运行在 Yarn 上 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h2 id="Yarn-集群配置"><a href="#Yarn-集群配置" class="headerlink" title="Yarn 集群配置"></a>Yarn 集群配置</h2><h3 id="配置-Yarn-JDK路径"><a href="#配置-Yarn-JDK路径" class="headerlink" title="配置 Yarn JDK路径"></a>配置 Yarn JDK路径</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim yarn-env.sh </span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_202</span><br></pre></td></tr></table></figure><h3 id="配置-ResourceManager"><a href="#配置-ResourceManager" class="headerlink" title="配置 ResourceManager"></a>配置 ResourceManager</h3><blockquote><p>指定 ResourceManager 老大节点所在的计算机节点<br>slave2</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim yarn-site.xml </span><br></pre></td></tr></table></figure><p>默认配置：<a href="https://hadoop.apache.org/docs/r2.10.1/hadoop-yarn/hadoop-yarn-common/yarn-default.xml">https://hadoop.apache.org/docs/r2.10.1/hadoop-yarn/hadoop-yarn-common/yarn-default.xml</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定 YARN 的 ResourceManager 的地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;slave2&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- reduce 获取数据的方式 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="指定-NodeManager-从节点"><a href="#指定-NodeManager-从节点" class="headerlink" title="指定 NodeManager 从节点"></a>指定 NodeManager 从节点</h2><blockquote><p>如果已经配置 HDFS 的 DataNode 从节点 slave配置文件 则不需要在修改了<br>这两个信息是一样的，共用同一个文件</p></blockquote><h2 id="权限注意"><a href="#权限注意" class="headerlink" title="权限注意"></a>权限注意</h2><p>Hadoop安装目录所属用户和所属用户组信息，默认是1000 1000，而我们操作 Hadoop集群的用户使用的是虚拟机的root用户，所以为了避免出现信息混乱，修改 Hadoop安装目录所属用户和用户组！！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R root:root /opt/servers/hadoop-2.10.1</span><br><span class="line">ll /opt/servers/hadoop-2.10.1</span><br></pre></td></tr></table></figure><h2 id="分发配置"><a href="#分发配置" class="headerlink" title="分发配置"></a>分发配置</h2><blockquote><p><strong>编写集群分发脚本rsync-script</strong></p></blockquote><h3 id="rsync-远程同步工具"><a href="#rsync-远程同步工具" class="headerlink" title="rsync 远程同步工具"></a>rsync 远程同步工具</h3><blockquote><p>rsync 主要用于备份和镜像。具有速度快、避免复制相同内容和支持符号链接的优点。<br>rsync 和 scp 区别：用 rsync做文件的复制要比scp的速度快， rsync只对差异文件做更新。scp是把所有文件都复制</p></blockquote><p>如果系统没有这个命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install rsync</span><br><span class="line">rsync --version</span><br></pre></td></tr></table></figure><ol><li>基本语法<br>命令   选项参数   要拷贝的文件路径/名称目的用户  @主机:目的路径/名称<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -rvl $pdir/$fname $user@$host:$pdir/$fname</span><br></pre></td></tr></table></figure></li><li>选项参数说明<table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>递归</td></tr><tr><td>-v</td><td>显示过程</td></tr><tr><td>-l</td><td>拷贝符号连接</td></tr></tbody></table></li></ol><h2 id="集群分发脚本"><a href="#集群分发脚本" class="headerlink" title="集群分发脚本"></a>集群分发脚本</h2><blockquote><p>期望：脚本+要同步的文件名称<br>说明：/usr/local/bin 中存在脚本，root 用户可以在任意地方执行</p></blockquote><ol><li><p>编写脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/bin/rsync-script</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 说明：循环复制文件到集群所有节点的相同目录下</span><br><span class="line"># 1. 获取传入脚本的参数，参数个数</span><br><span class="line">paramNum=$#</span><br><span class="line">if ((paramNum == 0)); then</span><br><span class="line">  echo No Parameters!</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 2. 获取到文件名称</span><br><span class="line">param1=$1 # 第一个参数</span><br><span class="line"></span><br><span class="line">fileName=$(basename $param1) # 获取最后一个路径</span><br><span class="line"></span><br><span class="line"># 3. 获取到文件的绝对路径</span><br><span class="line"># 获取到上级目录，并以绝对路径方式进入，然后获取路径信息（解决传入相对路径问题）</span><br><span class="line">$(cd -P $(dirname $param1))</span><br><span class="line">dirName=$(pwd)</span><br><span class="line"></span><br><span class="line">path=$dirName/$fileName # 文件路径</span><br><span class="line"></span><br><span class="line"># 判断路径是否有效</span><br><span class="line">if [ ! -f $fileName ] &amp;&amp; [ ! -d $fileName ]; then</span><br><span class="line">  echo &quot;$path&quot; failed: No such file or directory</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 4. 获取到当前用户信息</span><br><span class="line">username=$(whoami)</span><br><span class="line"></span><br><span class="line">orginHost=slave # 主机名称前缀</span><br><span class="line"></span><br><span class="line"># 由于主机名为master 所以需要在外面配置,如果你的linux主机名是有循序的，则不需要这一步</span><br><span class="line">rsync -rvl $path $&#123;username&#125;@master:$&#123;dirName&#125;</span><br><span class="line"></span><br><span class="line"># 5. 执行 rsync 命令，循环执行同步到其他节点</span><br><span class="line">for ((i = 1; i &lt;= 2; i++)); do</span><br><span class="line">  echo ---- target host $&#123;orginHost&#125;$&#123;i&#125;</span><br><span class="line">  echo ---- sync $path</span><br><span class="line">  rsync -rvl $path $&#123;username&#125;@$&#123;orginHost&#125;$&#123;i&#125;:$&#123;dirName&#125;</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>设置执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 /usr/local/bin/rsync-script</span><br></pre></td></tr></table></figure></li><li><p>执行同步<br>PS：同步 hadoop 时如果 master 已经格式化 NameNode 请不要将 data 目录同步过去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/servers</span><br><span class="line">rsync-script hadoop-2.10.1</span><br></pre></td></tr></table></figure></li></ol><h1 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h1><blockquote><p><strong>注意：如果集群是第一次启动，需要在 NameNode 所在节点格式化 NameNode，非第一次不用执行格式化 NameNode 操作！如果多次格式化会造成无法启动!</strong></p></blockquote><p><strong>格式化NameNode  不能执行多次格式化</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># master节点执行命令</span><br><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220720183342087.png" alt="image-20220720183342087"></p><p>格式化成功后会在  /opt/servers/hadoop-2.10.1/data/tmp 目录创建文件<br><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220720183348332.png" alt="image-20220720183348332"></p><h2 id="配置-Window-主机-Host"><a href="#配置-Window-主机-Host" class="headerlink" title="配置 Window 主机 Host"></a>配置 Window 主机 Host</h2><p>在我的window中打开 <code>C:\Windows\System32\drivers\etc</code><br>将对应ip和主机名添加进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.139.121 master</span><br><span class="line">192.168.139.122 slave1</span><br><span class="line">192.168.139.123 slave2</span><br></pre></td></tr></table></figure><h2 id="单节点启动"><a href="#单节点启动" class="headerlink" title="单节点启动"></a>单节点启动</h2><blockquote><p><strong>建议使用集群群起!!!</strong></p></blockquote><ol><li><p>启动 master 的 NameNode 和 DataName</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hadoop-daemon.sh start namenode</span><br><span class="line">jps</span><br><span class="line">hadoop-daemon.sh start datanode</span><br><span class="line">jps</span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220720183355174.png" alt="image-20220720183355174"></p></li><li><p>启动 slave1 和 slave2 的 DateName</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop-daemon.sh start datanode</span><br><span class="line">jps</span><br></pre></td></tr></table></figure></li></ol><p>PS：启动 NameNode 后可以在浏览器打开控制台 <a href="http://master:50070/">http://master:50070/</a>  主节点:50070</p><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220720183359244.png" alt="image-20220720183359244"></p><h2 id="Yarn-集群单节点启动"><a href="#Yarn-集群单节点启动" class="headerlink" title="Yarn 集群单节点启动"></a>Yarn 集群单节点启动</h2><blockquote><p>建议使用集群群起</p></blockquote><h3 id="启动-Yarn-主节点"><a href="#启动-Yarn-主节点" class="headerlink" title="启动 Yarn 主节点"></a>启动 Yarn 主节点</h3><blockquote><p>Yarn集群放在了 slave2 上。所以需要在 slave2 进行操作</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn-daemon.sh start resourcemanager</span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220720183410140.png" alt="image-20220720183410140"></p><h3 id="启动-NodeManager-从节点"><a href="#启动-NodeManager-从节点" class="headerlink" title="启动 NodeManager 从节点"></a>启动 NodeManager 从节点</h3><blockquote><p>master 、slave1、slave2 都启用从节点</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn-daemon.sh start nodemanager</span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220720183417880.png" alt="image-20220720183417880"></p><h2 id="集群群起"><a href="#集群群起" class="headerlink" title="集群群起"></a>集群群起</h2><p>** 如果已经单节点方式启动了 Hadoop，可以先停止之前的启动的 NameNode 与 DataNode 进程。如果之前 NameNode 没有执行格式化这里需要执行格式化，千万不要重复执行！！**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure><h3 id="启动-HDFS-集群"><a href="#启动-HDFS-集群" class="headerlink" title="启动 HDFS 集群"></a>启动 HDFS 集群</h3><p><strong>master 节点上执行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure><blockquote><p>执行完毕后检查 master、slave1、slave2的 NameNode、DataName、SecondaryNameNode是否启动成功！<br><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220720183427415.png"></p></blockquote><h3 id="启动-Yarn-集群"><a href="#启动-Yarn-集群" class="headerlink" title="启动 Yarn 集群"></a>启动 Yarn 集群</h3><p><strong>ResourceManager主节点在 slave2 节点，所以要上 slave2 节点执行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure><blockquote><p>执行完毕后检查 master、slave1、slave2的  ResourceManager、NodeManager 是否启动成功！<br><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220720183440319.png" alt="image-20220720183440319"></p></blockquote><h1 id="集群测试"><a href="#集群测试" class="headerlink" title="集群测试"></a>集群测试</h1><h2 id="HDFS-分部式存储"><a href="#HDFS-分部式存储" class="headerlink" title="HDFS 分部式存储"></a>HDFS 分部式存储</h2><blockquote><p>从 Linux 本地文件系统上传下载文件验证 HDFS 集群工作正常</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">date &gt; test.txt</span><br><span class="line"># 创建目录</span><br><span class="line">hadoop fs -mkdir -p /test/input</span><br><span class="line"># 上传文件</span><br><span class="line">hadoop fs -put test.txt /test/input</span><br><span class="line"># 下载文件</span><br><span class="line">hadoop fs -get /test/input/test.txt t1.txt</span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220720183505175.png" alt="image-20220720183505175"></p><h2 id="MapReduce-分布式计算"><a href="#MapReduce-分布式计算" class="headerlink" title="MapReduce 分布式计算"></a>MapReduce 分布式计算</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /root/wc.txt </span><br><span class="line"></span><br><span class="line">hadoop mapreduce yarn</span><br><span class="line">hdfs hadoop mapreduce</span><br><span class="line">mapreduce yarn orginly</span><br><span class="line">orginly</span><br><span class="line">orginly</span><br><span class="line">feng li feng li</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mkdir /mapReduce</span><br><span class="line">hadoop fs -put /root/wc.txt /mapReduce</span><br></pre></td></tr></table></figure><ul><li>回到 Hadoop 目录<code>/opt/servers/hadoop-2.10.1</code></li><li>执行官方示例程序 wordcount 单词统计</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.10.1.jar wordcount /mapReduce /wcoutput</span><br></pre></td></tr></table></figure><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220720183513975.png" alt="image-20220720183513975"></p><p>也可以登录 Yarn 集群控制面板查看<br>控制面板安装在 resourceManager 的节点 <a href="http://slave2:8088/cluster">http://slave2:8088/cluster</a></p><h1 id="历史日志服务器"><a href="#历史日志服务器" class="headerlink" title="历史日志服务器"></a>历史日志服务器</h1><p>在 Yarn 中运行的任务产生的日志数据不能查看，为了查看程序的历史运行情况，需要配置一下历史日志服务器。</p><h2 id="配置日志服务器"><a href="#配置日志服务器" class="headerlink" title="配置日志服务器"></a>配置日志服务器</h2><p><strong>master节点</strong></p><ol><li>配置 mapred-site.xml<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 历史服务器地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">&lt;value&gt;master:10020&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 历史服务器web地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">&lt;value&gt;master:19888&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li>分发 mapred-site.xml 到其他节点<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync-script mapred-site.xml</span><br></pre></td></tr></table></figure></li><li>master 启动历史服务器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> mr-jobhistory-daemon.sh start historyserver</span><br><span class="line">jps</span><br></pre></td></tr></table></figure></li><li>访问历史服务器<br><a href="http://master:19889/">http://master:19889</a></li></ol><p><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220720183530147.png" alt="image-20220720183530147"></p><h2 id="配置日志的聚集"><a href="#配置日志的聚集" class="headerlink" title="配置日志的聚集"></a>配置日志的聚集</h2><p>日志聚集：应用（job）运行完成以后，将应用运行日志信息从各个 task 汇总上传到 HDFS 系统上。<br>日志聚集功能好处：可以方便的查看到程序运行详情，方便开发调试。<br><strong>注意：开启日志聚集功能，需要重新启动 NodeManager、 ResourceManager和 HistoryManager</strong></p><ol><li>配置 yarn-site.xml<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/servers/hadoop-2.10.1/etc/hadoop/yarn-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 日志聚集功能使能 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt;</span><br><span class="line">&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 日志保留时间设置 7 天 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.log-aggregation.retain-seconds&lt;/name&gt;</span><br><span class="line">&lt;value&gt;604800&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li>分发  yarn-site.xml  到其他节点<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync-script yarn-site.xml</span><br></pre></td></tr></table></figure></li><li>停止 yarn 集群</li></ol><p><strong>slave2 节点</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stop-yarn.sh</span><br><span class="line">jps</span><br></pre></td></tr></table></figure><ol start="4"><li>重启 JobHistoryServer</li></ol><p><strong>master</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mr-jobhistory-daemon.sh stop historyserver</span><br><span class="line">mr-jobhistory-daemon.sh start historyserver</span><br><span class="line">jps</span><br></pre></td></tr></table></figure><ol start="5"><li>启动 yarn 集群</li></ol><p><strong>slave2 节点</strong></p><h2 id="执行官方测试案例"><a href="#执行官方测试案例" class="headerlink" title="执行官方测试案例"></a>执行官方测试案例</h2><ol><li>删除之前执行生成的文件 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -rm -r /wcoutput</span><br></pre></td></tr></table></figure></li><li>执行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/opt/servers/hadoop-2.10.1</span><br><span class="line"></span><br><span class="line">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.10.1.jar wordcount /mapReduce /wcoutput</span><br></pre></td></tr></table></figure></li><li>查看日志<br><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220720183542931.png" alt="image-20220720183542931"><br><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220720183556222.png" alt="image-20220720183556222"><br><img src="https://minio.lzscxb.cn/picture/images/typora/image-20220720183627378.png" alt="image-20220720183627378"></li></ol>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 下配置多台服务器时间同步</title>
      <link href="/posts/2458075637.html"/>
      <url>/posts/2458075637.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>现有三台虚拟机，如果虚拟机之间实间差距太大就会导致一些服务异常</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.139.121 master</span><br><span class="line">192.168.139.122 slave1</span><br><span class="line">192.168.139.123 slave2</span><br></pre></td></tr></table></figure><h1 id="安装-NTP"><a href="#安装-NTP" class="headerlink" title="安装 NTP"></a>安装 NTP</h1><p>先查看ntp是否已经安装：<code>rpm -qa | grep ntp</code><br>如果没有 <code>yum -y install ntp</code></p><p>安装完成后设置 ntp 开机启动并启动 ntp，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable ntpd</span><br><span class="line"></span><br><span class="line">systemctl start ntpd</span><br></pre></td></tr></table></figure><h1 id="主服务器均能连接外网"><a href="#主服务器均能连接外网" class="headerlink" title="主服务器均能连接外网"></a>主服务器均能连接外网</h1><blockquote><p>所有机器都能够访问外网的话，我们可以使用 ntpdate 来进行时间同步<br>前提是我们服务器上面有 ntp ，如果没有的话可以使用 yum 安装</p></blockquote><h2 id="同步网络时间"><a href="#同步网络时间" class="headerlink" title="同步网络时间"></a>同步网络时间</h2><blockquote><p>其中 ntp 一种网络时间协议，ntpdate 是时间同步软件的命令， ntp.api.bz 是个稳定的ntp时间同步服务器集群。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ntpdate -u ntp.api.bz</span><br><span class="line"># 或</span><br><span class="line">ntpdate -u us.pool.ntp.org</span><br></pre></td></tr></table></figure><h2 id="编辑定时任务"><a href="#编辑定时任务" class="headerlink" title="编辑定时任务"></a>编辑定时任务</h2><blockquote><p>当然你可以使用linux系统的定时任务来设置每隔多长时间同步一次，使用 linux 系统下使用crontab -e 可以编辑任务。<br>这里我是用 crontab -e 添加了一个定时每分钟同步时间的任务 ，然后将执行日志写到了 /tmp/dateSync.log下面</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line"># 将以下内容写入 &gt;&gt; 将日志写入到 /tmp/dateSync.log</span><br><span class="line">*/1 * * * * /usr/sbin/ntpdate -u us.pool.ntp.org</span><br></pre></td></tr></table></figure><p>crontab 规则在线生成：<a href="https://www.bejson.com/othertools/cron/">https://www.bejson.com/othertools/cron/</a><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211009181102094-2071744300.png" alt="image"></p><h1 id="NTP-服务器"><a href="#NTP-服务器" class="headerlink" title="NTP 服务器"></a>NTP 服务器</h1><blockquote><p>我们把这台能连接外网的服务器当作时间服务器，整个集群服务器向该时间服务器同步时间,然后咱们内网的这台时间服务器向公网时间服务器同步时间，然后内网时间服务器不能联网，则自己设置时间，所有的集群服务器以它的时间为准。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211009192159028-1293487193.png" alt="image"></p><h2 id="配置-NTP-服务器"><a href="#配置-NTP-服务器" class="headerlink" title="配置 NTP 服务器"></a>配置 NTP 服务器</h2><blockquote><p>使用 master 作为 NTP 服务器</p></blockquote><ol><li>修改 NTP 配置文件 <code>vim /etc/ntp.conf</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># For more information about this file, see the man pages</span><br><span class="line"># ntp.conf(5), ntp_acc(5), ntp_auth(5), ntp_clock(5), ntp_misc(5), ntp_mon(5).</span><br><span class="line"></span><br><span class="line">driftfile /var/lib/ntp/drift</span><br><span class="line"></span><br><span class="line"># Permit time synchronization with our time source, but do not</span><br><span class="line"># permit the source to query or modify the service on this system.</span><br><span class="line">restrict default nomodify notrap nopeer noquery</span><br><span class="line"></span><br><span class="line"># Permit all access over the loopback interface.  This could</span><br><span class="line"># be tightened as well, but to do so would effect some of</span><br><span class="line"># the administrative functions.</span><br><span class="line">restrict 127.0.0.1 </span><br><span class="line">restrict ::1</span><br><span class="line"></span><br><span class="line"># Hosts on local network are less restricted.</span><br><span class="line">#restrict 192.168.139.2 mask 255.255.255.0 nomodify notrap</span><br><span class="line"></span><br><span class="line"># Use public servers from the pool.ntp.org project.</span><br><span class="line"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span><br><span class="line">#server 0.centos.pool.ntp.org iburst</span><br><span class="line">#server 1.centos.pool.ntp.org iburst</span><br><span class="line">#server 2.centos.pool.ntp.org iburst</span><br><span class="line">#server 3.centos.pool.ntp.org iburst</span><br><span class="line"></span><br><span class="line">server 0.cn.pool.ntp.org</span><br><span class="line">server 1.cn.pool.ntp.org</span><br><span class="line">server 2.cn.pool.ntp.org</span><br><span class="line">server 3.cn.pool.ntp.org</span><br><span class="line"></span><br><span class="line">restrict 0.cn.pool.ntp.org nomodify notrap noquery</span><br><span class="line">restrict 1.cn.pool.ntp.org nomodify notrap noquery</span><br><span class="line">restrict 2.cn.pool.ntp.org nomodify notrap noquery</span><br><span class="line">restrict 3.cn.pool.ntp.org nomodify notrap noquery</span><br><span class="line"></span><br><span class="line">server 127.0.0.1 # local clock</span><br><span class="line">Fudge 127.0.0.1 stratum 10</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>重启 NTP 服务器 </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart ntpd</span><br><span class="line">systemctl enable ntpd</span><br><span class="line"># 检查是否启动成功</span><br><span class="line">systemctl status ntpd</span><br></pre></td></tr></table></figure><h2 id="配置-NTP-客户端"><a href="#配置-NTP-客户端" class="headerlink" title="配置 NTP 客户端"></a>配置 NTP 客户端</h2><ol><li>安装 NTP </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ntp</span><br></pre></td></tr></table></figure><ol start="2"><li>修改 <code>/etc/ntp.conf</code> 配置文件<br>注释以下内容<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># server 0.centos.pool.ntp.org iburst</span><br><span class="line"># server 1.centos.pool.ntp.org iburst</span><br><span class="line"># server 2.centos.pool.ntp.org iburst</span><br><span class="line"># server 3.centos.pool.ntp.org iburst</span><br></pre></td></tr></table></figure>新增以下内容<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server 192.168.139.121</span><br><span class="line">restrict 192.168.139.121 nomodify notrap noquery</span><br><span class="line"></span><br><span class="line">server 127.127.1.0 # local clock</span><br><span class="line">Fudge 127.127.1.0 stratum 10</span><br></pre></td></tr></table></figure></li></ol><p>修改后重启 ntpd 服务 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart ntpd</span><br><span class="line">systemctl enable ntpd</span><br><span class="line"># 检查是否启动成功</span><br><span class="line">systemctl status ntpd</span><br></pre></td></tr></table></figure><p>使用<code>ntpq -p</code> 查看网络中的NTP服务器，同时显示客户端和每个服务器的关系</p><p>使用ntpstat 命令查看时间同步状态，这个一般需要5-10分钟后才能成功连接和同步。所以，服务器启动后需要稍等下：<br>刚启动的时候，执行<code>ntpstat</code>一般会提示以下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unsynchronised</span><br><span class="line">time server re-starting</span><br><span class="line">polling server every 64 s</span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol><li>防火墙是否关闭</li><li>123 端口是否开发(如果防火墙已关闭请忽略)</li><li>关闭 Selinux</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 安装 Mysql8 并配置远程登录</title>
      <link href="/posts/2471320589.html"/>
      <url>/posts/2471320589.html</url>
      
        <content type="html"><![CDATA[<h1 id="检查系统环境"><a href="#检查系统环境" class="headerlink" title="检查系统环境"></a>检查系统环境</h1><blockquote><p>以下五步完成之后，这样mysql就全部删除干净了，若没安装过mysql可忽略以上步骤</p></blockquote><ol><li>查找是否安装 mysql<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep mysql</span><br></pre></td></tr></table></figure></li><li>如果已安装需卸载 mysql<blockquote><p>一般用rpm -e 的命令删除mysql,这样表面上删除了mysql,可是mysql的一些残余程序仍然存在,并且通过第一步的方式也查找不到残余,而yum命令比较强大,可以完全删除mysql.(ps:用rpm删除后再次安装的时候会提示已经安装了,这就是rpm没删除干净的原因)</p></blockquote></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove mysql-*</span><br></pre></td></tr></table></figure><ol start="3"><li>把所有出现的目录全部删除<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure></li><li>删除配置文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/my.cnf</span><br></pre></td></tr></table></figure></li><li>删除 mysql 的默认密码<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /root/.mysql_sercret</span><br></pre></td></tr></table></figure></li></ol><h1 id="下载安装官网-yum-源"><a href="#下载安装官网-yum-源" class="headerlink" title="下载安装官网 yum 源"></a>下载安装官网 yum 源</h1><blockquote><p><a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a></p></blockquote><ol><li>将 mysql rpm 源文件下载<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -P /opt/software https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure></li><li>安装下载好的 rpm 文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/software</span><br><span class="line">rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure></li><li>导入密钥</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211003222928732-85629909.png" alt="image"></p><ol start="4"><li>查看是否安装成功</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll /etc/yum.repos.d</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211003223030595-860605659.png" alt="image"></p><h1 id="安装-mysql-服务器"><a href="#安装-mysql-服务器" class="headerlink" title="安装 mysql 服务器"></a>安装 mysql 服务器</h1><blockquote><p>安装过程比较久，请耐心等待</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><p><strong>测试 mysql 是否安装成功</strong></p><h1 id="启动-mysql-服务器"><a href="#启动-mysql-服务器" class="headerlink" title="启动 mysql 服务器"></a>启动 mysql 服务器</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><h1 id="查看并使用临时密码登录"><a href="#查看并使用临时密码登录" class="headerlink" title="查看并使用临时密码登录"></a>查看并使用临时密码登录</h1><ol><li>查看临时密码<blockquote><p>安装完mysql之后，会生成一个临时的密码让root用户登录</p></blockquote></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;A temporary password&quot; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211003224439983-2100785603.png" alt="image"></p><ol start="2"><li>使用临时密码登录 mysql<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>在Enter password：后面输入临时密码<br>登录成功</li></ol><h1 id="更改临时密码"><a href="#更改临时密码" class="headerlink" title="更改临时密码"></a>更改临时密码</h1> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;aB12345678@&#x27;;</span><br></pre></td></tr></table></figure><p><strong>无论如何都要先修改一次密码，否则查询修改都执行不了</strong></p><p><strong>如果密码太简单则会出现此提示为密码不符合当前策略，需要设置复杂的密码或者修改密码验证策略！</strong><br>设置必须符合策略的密码(大小写字母 + 数据 + 符号)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br></pre></td></tr></table></figure><h1 id="修改密码验证策略"><a href="#修改密码验证策略" class="headerlink" title="修改密码验证策略"></a>修改密码验证策略</h1><blockquote><p>如果觉得密码过于复杂可以修改密码策略</p></blockquote><ol><li><p>先看看当前的密码验证策略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;validate_password.%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211003230458716-1462046423.png" alt="image"></p></li><li><p>策略说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 是密码的最小长度，默认是8，我们把它改成4（好像最小就是4位密码）</span><br><span class="line">set global validate_password.length=4;</span><br><span class="line"># 验证密码的复杂程度，我们把它改成0</span><br><span class="line">set global validate_password.policy=0;</span><br><span class="line"># 用户名检查，用户名和密码不能相同，我们也把它关掉</span><br><span class="line">set global validate_password.check_user_name=off;</span><br></pre></td></tr></table></figure></li><li><p>再执行修改密码的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;0000&#x27;;</span><br></pre></td></tr></table></figure></li></ol><h1 id="mysql-远程连接数据库"><a href="#mysql-远程连接数据库" class="headerlink" title="mysql 远程连接数据库"></a>mysql 远程连接数据库</h1><blockquote><p>默认情况下 mysql 是不允许用户远程连接数据库的</p></blockquote><ol><li>查看 Mysql 默认用户<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">select host,user,authentication_string,plugin from user;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211004122731625-695936474.png" alt="image"></li></ol><p>发现 root 的 host 是 localhost，不是%，可以加个 host 是%的 root 账号：<br>2. 创建远程账号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create user &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;0000&#x27;;</span><br><span class="line"># 查看 mysql 用户</span><br><span class="line">select host,user,authentication_string,plugin from user;</span><br></pre></td></tr></table></figure><p>重新执行查看 mysql 用户命令<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211004123013824-1584384638.png" alt="image"></p><ol start="3"><li>授权用户<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all on *.* to &#x27;root&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure></li><li>尝试远程连接<br>主机：安装在服务器IP<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211004123502884-374753603.png" alt="image"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 安装 JDK11</title>
      <link href="/posts/2537014801.html"/>
      <url>/posts/2537014801.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>切换到 root 用户并进入 <code>/usr</code>目录</p></li><li><p>创建 java 文件夹</p></li><li><p>将 <code>jdk-11.0.12_linux-x64_bin.tar.gz</code> 复制到java目录中</p></li><li><p>解压 <code>tar -zxvf jdk-11.0.12_linux-x64_bin.tar.gz</code></p></li><li><p>配置环境变量，在 <code>/etc/profile</code>文件末尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/java/jdk-11.0.12</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211003220111396-876264646.png" alt="image"></p></li></ol><ol start="6"><li>输入<code>java -version</code>测试是否安装成功</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211003215649878-786679310.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 源码安装 zsh 及 配置 Oh my zsh</title>
      <link href="/posts/1534139386.html"/>
      <url>/posts/1534139386.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>因为一些国内不能访问 github，所以本教程使用的 gitee 下载源文件。</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p><strong>Centos7 最小化安装环境</strong> </p><h1 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h1><p><strong>如果需要安装 powerlevel10k 则需要源码安装最新版本，yum源中的5.0.2版本是不支持的</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget git gcc ncurses-devel</span><br><span class="line">wget http://ftp.funet.fi/pub/unix/shells/zsh/zsh-5.8.tar.xz /opt/software</span><br><span class="line">tar -xvf zsh-5.8.tar.xz</span><br><span class="line"></span><br><span class="line">cd zsh-5.8</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"># 将zsh加入/etc/shells</span><br><span class="line">vim /etc/shells</span><br><span class="line"># 添加：</span><br><span class="line">/usr/local/bin/zsh</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="更改默认终端"><a href="#更改默认终端" class="headerlink" title="更改默认终端"></a>更改默认终端</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /usr/local/bin/zsh</span><br></pre></td></tr></table></figure><blockquote><p>这时候打开终端软件，应该就会默认进入 zsh 了。</p><p>如果 shell 连接进入 bash 则需要重启一下系统</p></blockquote><h1 id="配置-oh-my-zsh"><a href="#配置-oh-my-zsh" class="headerlink" title="配置 oh-my-zsh"></a>配置 oh-my-zsh</h1><ol><li>从 gitee 拉取 oh-my-zsh<blockquote><p>国内镜像源(每日更新一次)</p></blockquote></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/mirrors/oh-my-zsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure><ol start="2"><li>默认配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure></li></ol><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><h2 id="zsh-syntax-highlighting-命令高亮插件"><a href="#zsh-syntax-highlighting-命令高亮插件" class="headerlink" title="zsh-syntax-highlighting 命令高亮插件"></a>zsh-syntax-highlighting 命令高亮插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/dawnwords/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><h2 id="zsh-autosuggestions-自动建议补全"><a href="#zsh-autosuggestions-自动建议补全" class="headerlink" title="zsh-autosuggestions 自动建议补全"></a>zsh-autosuggestions 自动建议补全</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/lhaisu/zsh-autosuggestions.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><h2 id="安装-autojump-目录跳转"><a href="#安装-autojump-目录跳转" class="headerlink" title="安装 autojump 目录跳转"></a>安装 autojump 目录跳转</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/gentlecp/autojump.git</span><br><span class="line">cd autojump</span><br><span class="line">./install.py</span><br></pre></td></tr></table></figure><blockquote><p>执行成功后将出现的代码复制到 .zshrc 末尾处，可能有少许差异，不生效则需要以下面模版进行修改。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line">[[ -s /root/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; . /root/.autojump/etc/profile.d/autojump.sh</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>同样是打开.zshrc文件，找到plugins=(git)，在这里增加自己想要的插件即可，多个插件名称之间使用空格或者换行分开（不能使用逗号）。<br><code>vim ~/.zshrc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">        git</span><br><span class="line">        sudo</span><br><span class="line">        zsh-autosuggestions</span><br><span class="line">        zsh-syntax-highlighting</span><br><span class="line">        autojump</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>每次修改完 .zshrc 都需要</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="Powerlevel10k-配置"><a href="#Powerlevel10k-配置" class="headerlink" title="Powerlevel10k 配置"></a>Powerlevel10k 配置</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/themes/powerlevel10k</span><br></pre></td></tr></table></figure><p>修改zsh主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</span><br><span class="line"></span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>重启终端即可进入配置p10k<br><strong>p10k configure 以直接从终端访问内置配置向导</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 配置静态 IP 地址</title>
      <link href="/posts/2773929148.html"/>
      <url>/posts/2773929148.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>配置网络的目的主要是为了固定虚拟机的内网IP，方便我们在真实的操作系统中使用 SSH 连接工具软件进行远程连接。</p></blockquote><h1 id="配置虚拟网络编辑器"><a href="#配置虚拟网络编辑器" class="headerlink" title="配置虚拟网络编辑器"></a>配置虚拟网络编辑器</h1><ol><li>关闭虚拟机</li><li>点击编辑，选择选项 “虚拟网络编辑器” ；岀现下面的 “虛拟网络编辑器器” 窗口。选择 NAT 模式，注意子网 IP 前三位与 NAT 设置的网关 DHCP 网段一致</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211003134800980-378120738.png" alt="image"></p><h1 id="编辑操作系统网卡信息"><a href="#编辑操作系统网卡信息" class="headerlink" title="编辑操作系统网卡信息"></a>编辑操作系统网卡信息</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211003143942280-683059668.png" alt="image"></p><h1 id="重启网卡"><a href="#重启网卡" class="headerlink" title="重启网卡"></a>重启网卡</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network.service</span><br></pre></td></tr></table></figure><p><strong>测试是否配置成功</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping baidu.com</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211003144404191-580516857.png" alt="image"></p><p>PS：如果提示找不到服务器，则仔细检查是否配置错误</p><p><strong>使用 XShell 等连接工具进行连接查看是否连接成功</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot Intellij IDEA 2021热部署</title>
      <link href="/posts/591297948.html"/>
      <url>/posts/591297948.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>Intellij IDEA 2021版本 不适用于2021之前的版本</strong></p></blockquote><p>在开发过程中，通常会对一段业务代码不断地修改测试，在修改之后往往需要重启服务，有些服务需要加载很久才能启动成功，这种不必要的重复操作极大的降低了程序开发效率为此， Spring Boot框架专门提供了进行热部署的依赖启动器，用于进行项目热部署，而无需手动重启项目</p><h2 id="热部署依赖启动器依赖"><a href="#热部署依赖启动器依赖" class="headerlink" title="热部署依赖启动器依赖"></a>热部署依赖启动器依赖</h2><p>在 Spring Boot 项目进行热部署测试之前，需要先在项目的 <code>pom.xm</code> 件中添加 <code>spring-boot-devtools</code> 热部署依赖启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 热部署依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">&lt;/dependency</span><br></pre></td></tr></table></figure><h2 id="IDEA-热部署设置"><a href="#IDEA-热部署设置" class="headerlink" title="IDEA 热部署设置"></a>IDEA 热部署设置</h2><p>选择 IDEA 工具界面的【File &gt; Settings】选项，打开 Build下的Compiler面板设置页面</p><p>在右侧勾选 Build project automatically 选项将项目设置为自动编译，单击【 Apply 】→【 OK 】按钮保存设置</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211002223804218-1824060294.png" alt="image"></p><p>允许运行时重新自动构建</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211002225543168-1049637772.png" alt="image"></p><p>最后重启 IDEA，应该就可以了。</p><blockquote><p>从体验上来说，Spring Boot 的热部署并不好，反应太慢，我的笔记本 win11 大约需要 4 - 5 秒才能更新，真还没有我用 ctrl + F9 快呢，而且要手动刷新浏览器，和 vue 开发那种改动即所得差的不少。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring 声明式事务详解</title>
      <link href="/posts/874241232.html"/>
      <url>/posts/874241232.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>!! 观看本篇文章需要配合 [JdbcTemplate基本使用] <a href="https://www.cnblogs.com/orginly/p/15349219.html">https://www.cnblogs.com/orginly/p/15349219.html</a> </p></blockquote><h1 id="Spring-中的事务控制方式"><a href="#Spring-中的事务控制方式" class="headerlink" title="Spring 中的事务控制方式"></a>Spring 中的事务控制方式</h1><p>Spring 的事务控制可以分为<strong>编程式事务控制</strong>和<strong>声明式事务控制</strong><br><strong>编程式</strong><br>开发者直接把事务的代码和业务代码耦合到一起，在实际开发中不用。<br><strong>声明式</strong><br>开发者采用配置的方式来实现的事务控制，业务代码与事务代码实现解耦合，使用的API思想。</p><h1 id="基于XML的声明式事务控制【重点】"><a href="#基于XML的声明式事务控制【重点】" class="headerlink" title="基于XML的声明式事务控制【重点】"></a>基于XML的声明式事务控制【重点】</h1><blockquote><p>在 Spring配置文件中声明式的处理事来代替代码式的处理事务。底层采用 AOP 思想来实现的。</p></blockquote><p><strong>声明式事务控制明确事项：</strong></p><ul><li>核心业务代码(目标对象)</li><li>事务增强代码{ Spring已提供事务管理器)</li><li>切面配置</li></ul><h1 id="步骤分析"><a href="#步骤分析" class="headerlink" title="步骤分析"></a>步骤分析</h1><p>1.引入tx 命名空间<br>2.事务管理器通知配置<br>3.事务管理器AOP配置</p><h1 id="引入依赖坐标"><a href="#引入依赖坐标" class="headerlink" title="引入依赖坐标"></a>引入依赖坐标</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="基于-XML-的声明式事务的控制"><a href="#基于-XML-的声明式事务的控制" class="headerlink" title="基于 XML 的声明式事务的控制"></a>基于 XML 的声明式事务的控制</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启 IOC 注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.orginly&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入 properties 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;datasource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 绑定数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据源对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通知增强 transaction-manager: 配置的事务管理器对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义一些事务属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- *  表示当前任意名称的方法都走默认的配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- AOP 配置切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置声明式式务 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.orginly.service.impl.UserServiceImpl.updateUser(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Service 层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.find(<span class="number">2</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;li3&quot;</span>);</span><br><span class="line">    userDao.updateUser(user);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    user.setAge(<span class="number">13</span>);</span><br><span class="line">    userDao.updateUser(user);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务参数的配置详解"><a href="#事务参数的配置详解" class="headerlink" title="事务参数的配置详解"></a>事务参数的配置详解</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transfer&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>name：切点方法等</li><li>isolation：事务的隔离级别</li><li>propogation：事务的传播行为</li><li>timeout：超时时间</li><li>read-only：是否只读</li></ul><p><strong>常用 CURD 配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义一些事务属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- CRUD 常用配置 表示以update开头的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;-1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;save*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;-1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;-1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- *  表示当前任意名称的方法都走默认的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="基于注解的声明式事务控制"><a href="#基于注解的声明式事务控制" class="headerlink" title="基于注解的声明式事务控制"></a>基于注解的声明式事务控制</h1><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><p><strong>步骤分析</strong></p><ol><li><p>修改 Service 层，增加事务注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ,readOnly = false,timeout = -1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.find(<span class="number">2</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;li3&quot;</span>);</span><br><span class="line">    userDao.updateUser(user);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    user.setAge(<span class="number">13</span>);</span><br><span class="line">    userDao.updateUser(user);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 Spring 核心配置文件，开启事务注解支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring JdbcTemplate基本使用</title>
      <link href="/posts/1879150145.html"/>
      <url>/posts/1879150145.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>JDBTemplate是 Spring框架中提供的—个模板对象，是对原始繁琐 JDBC API对象的简单封装。</p></blockquote><p><strong>核心对象</strong></p><h1 id="导入依赖坐标"><a href="#导入依赖坐标" class="headerlink" title="导入依赖坐标"></a>导入依赖坐标</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jdbcTemplate 注意要和spring版本一致 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 事务相关 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- aspect织入（切点表达式需要用到该jar包） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="创建-Dao-和-Service-层"><a href="#创建-Dao-和-Service-层" class="headerlink" title="创建 Dao 和 Service 层"></a>创建 Dao 和 Service 层</h1><p><strong>实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.orginly.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Dao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">find</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找一条用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">find</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class), id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set name = ?,age = ? where id = ?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, user.getName(), user.getAge(), user.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Service</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findALl</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findALl</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        System.out.println(users.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.find(<span class="number">2</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;li1&quot;</span>);</span><br><span class="line">        userDao.updateUser(user);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="整合-JdbcTemplate-至-Spring"><a href="#整合-JdbcTemplate-至-Spring" class="headerlink" title="整合 JdbcTemplate 至 Spring"></a>整合 JdbcTemplate 至 Spring</h1><ol><li><p>新建 <code>jdbc.properties</code> 配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driverClassName</span> = <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span> = <span class="string">jdbc:mysql://localhost/demo?characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">jdbc.username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span> = <span class="string">000</span></span><br></pre></td></tr></table></figure></li><li><p>配置 JdbcTemplate 数据源 并将对象创建权交给 IOC 容器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启 IOC 注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.orginly&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入 properties 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;datasource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 绑定数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="整合-Junit4-单元测试"><a href="#整合-Junit4-单元测试" class="headerlink" title="整合 Junit4 单元测试"></a>整合 Junit4 单元测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.findALl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP 面向切面编程</title>
      <link href="/posts/2275423072.html"/>
      <url>/posts/2275423072.html</url>
      
        <content type="html"><![CDATA[<h1 id="初识-AOP"><a href="#初识-AOP" class="headerlink" title="初识 AOP"></a>初识 AOP</h1><h2 id="什么是AoP"><a href="#什么是AoP" class="headerlink" title="什么是AoP"></a>什么是AoP</h2><p>AOP 为 Aspect Oriented Programming 的缩写，意思为<strong>面向切面编程</strong><br>AOP 是 OOP (面向对象编程) 的延，是软件开发中的一个热点，也是 Spring 框架中的一个重要内容，利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合降低，提高程序的可重用性，同时提高了开发的效率。<br><strong>这样做的好处是：</strong></p><ol><li>在程序运行期间，在不修改源码的情况下对方法进行功能增强</li><li>逻辑清晰，开发核心业务的时候，不必关注增强业务的代码</li><li>减少重复代码，提高开发效率，便于后期维护</li></ol><h2 id="AOP底层实现"><a href="#AOP底层实现" class="headerlink" title="AOP底层实现"></a>AOP底层实现</h2><p>实际上，AOP的底层是通过 Spring 提供的的<strong>动态代理技术</strong>实现的。在运行期间， Spring 通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能的增强。</p><h2 id="AOP-相关概念"><a href="#AOP-相关概念" class="headerlink" title="AOP 相关概念"></a>AOP 相关概念</h2><p>Spring 的 AOP 实现底层就是对上面的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法增强。<br><strong>AOP 常用的术语如下：</strong></p><ul><li>Target(目标对象)：代理的目标对象。</li><li>Proxy(代理)：一个类被AOP织入增强后，就产生一个结果代理类。</li><li>Joinpoint(连接点)：所谓连接点是指那些可以被拦截到的点。在 Spring中，这些点指的是方法，因为 Spring 只支持方法类型的连接点。</li><li>PoIntcut(切入点)：所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义。</li><li>Advice(通知/增强)：所谓通知是指拦馘到 Joinpoint之后所要做的事情就是通知<br>  分类：前置通知、后置通知、异常通知、最终通知、环绕通知。</li><li>Aspect(切面)：是切入点和通知(引介)的结合。</li><li>Weaving(织入)：是指把增强应用到目标对象来创建新的代理对象的过程。 Spring 采用动态代理织入，而  Aspect 采用编译期织入和类装载期织入。</li></ul><h1 id="基于-XML-的-AOP-开发"><a href="#基于-XML-的-AOP-开发" class="headerlink" title="基于 XML 的 AOP 开发"></a>基于 XML 的 AOP 开发</h1><h2 id="Maven-相关依赖"><a href="#Maven-相关依赖" class="headerlink" title="Maven 相关依赖"></a>Maven 相关依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- aspect织入（切点表达式需要用到该jar包） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建主体方法和接口"><a href="#创建主体方法和接口" class="headerlink" title="创建主体方法和接口"></a>创建主体方法和接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始转账&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建通知类及方法"><a href="#创建通知类及方法" class="headerlink" title="创建通知类及方法"></a>创建通知类及方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.orginly.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransferAdvice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将目标类和通知类的创建权交给-Spring"><a href="#将目标类和通知类的创建权交给-Spring" class="headerlink" title="将目标类和通知类的创建权交给 Spring"></a>将目标类和通知类的创建权交给 Spring</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将目标类交给 IOC 容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.orginly.service.impl.AccountServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将通知类交给 IOC 容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transferAdvice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.orginly.advice.TransferAdvice&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置-AOP-前置增强"><a href="#配置-AOP-前置增强" class="headerlink" title="配置 AOP 前置增强"></a>配置 AOP 前置增强</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将目标类交给 IOC 容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.orginly.service.impl.AccountServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将通知类交给 IOC 容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transferAdvice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.orginly.advice.TransferAdvice&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- AOP 配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切面：切入点 + 通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;transferAdvice&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前置通知 pointcut:切点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public void com.orginly.service.impl.AccountServiceImpl.transfer())&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后置通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturning&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public void com.orginly.service.impl.AccountServiceImpl.transfer())&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="XML-配置-AOP-详解"><a href="#XML-配置-AOP-详解" class="headerlink" title="XML 配置 AOP 详解"></a>XML 配置 AOP 详解</h1><h2 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h2><p>表达式语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution([修饰符]返回值类型 包名.类名.方法名(参数))</span><br></pre></td></tr></table></figure><ul><li>访问修饰符可以省略</li><li>返回值类型、包名、类名、方法名可以使用星号 * 代替，代表任意</li><li>包名与类名之间一个点,代表当前包下的类，两个点 <code>..</code> 表示当的包及其子包下的类</li><li>参数列表可以使用两个点<code>..</code>表示任意个数，任意类型的参数列表</li></ul><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">execution(public void com.orginly.service.impl.AccountServiceImpl.transfer());</span><br><span class="line"></span><br><span class="line">execution(public void com.orginly.service.impl.AccountServiceImpl.transfer(java.lang.String));</span><br><span class="line"></span><br><span class="line">execution(void com.orginly.service.impl.AccountServiceImpl.*(..));</span><br><span class="line"></span><br><span class="line">execution(* com.orginly.service.impl.*.*(..));</span><br><span class="line"></span><br><span class="line">execution(* com.orginly.service..*.*(..));</span><br></pre></td></tr></table></figure><h3 id="切点表达式抽取"><a href="#切点表达式抽取" class="headerlink" title="切点表达式抽取"></a>切点表达式抽取</h3><p>当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用 pointcut-ref 属性代替 pointcut 属性来引用抽取后的切点表达式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- AOP 配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切面：切入点 + 通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;transferAdvice&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;acService&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public void com.orginly.service.impl.AccountServiceImpl.*())&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前置通知 pointcut:切点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;acService&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后置通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturning&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;acService&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="通知类型详解"><a href="#通知类型详解" class="headerlink" title="通知类型详解"></a>通知类型详解</h2><p>通知的配置语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:通知类型 method=&quot;通知类中方法名&quot; pointcut=“切点表达式&quot;&gt;&lt;/aop:通知类型&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>前置通知</td><td>&lt; aop:before &gt;</td><td>用于配置前置通知。指定增强的方法在切入点方法之前执行</td></tr><tr><td>后置通知</td><td>&lt; aop:afterReturning &gt;</td><td>用于配置后置通知。指定增强的方法在切入点方法之后执行</td></tr><tr><td>异常通知</td><td>&lt; aop:afterThrowing &gt;</td><td>用于配置异常通知。指定增强的方法出现异常后执行</td></tr><tr><td>最终通知</td><td>&lt; aop:after &gt;</td><td>用于配置最终通知。无论切入点方法执行时是否有异常,都会执行</td></tr><tr><td>环绕通知</td><td>&lt; aop:around &gt;</td><td>用于配置环绕通知。开发者可以手动控制增强代码在什么时候执行</td></tr></tbody></table><p><strong>注意：通常情况下，环绕通知都是独立使用的</strong></p><h2 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切面：切入点 + 通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;transferAdvice&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;acService&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public void com.orginly.service.impl.AccountServiceImpl.*())&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;around&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;acService&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：如果只配置 XML 是不生效的，需要在环绕通知方法中进行调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ProceedingJoinPoint 正在执行的连接点：切点</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知...&quot;</span>);</span><br><span class="line">        <span class="comment">// 切点方法执行</span></span><br><span class="line">        proceed = pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知...&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知...&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终通知...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> proceed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基于注解-AOP-开发"><a href="#基于注解-AOP-开发" class="headerlink" title="基于注解 AOP 开发"></a>基于注解 AOP 开发</h1><h2 id="创建主体方法和接口-1"><a href="#创建主体方法和接口-1" class="headerlink" title="创建主体方法和接口"></a>创建主体方法和接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始转账&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通知类升级为切面类"><a href="#通知类升级为切面类" class="headerlink" title="通知类升级为切面类"></a>通知类升级为切面类</h2><p>**在通知类中添加 <code>@Aspect</code> 升级为切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 升级为切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransferAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置切入点和通知的关系</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.orginly.service.impl.AccountServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="开启-AOP-自动代理"><a href="#开启-AOP-自动代理" class="headerlink" title="开启 AOP 自动代理"></a>开启 AOP 自动代理</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启 IOC 注解扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.orginly&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启 AOP 自动代理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>如果是纯注解模式可以在核心配置类增加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableAspectJAutoProxy  // 开启 AOP 自动代理</span><br></pre></td></tr></table></figure><h2 id="抽取切点表达式"><a href="#抽取切点表达式" class="headerlink" title="抽取切点表达式"></a>抽取切点表达式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽取切点表达式</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.orginly.service.impl.AccountServiceImpl.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">myPointcut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置切入点和通知的关系</span></span><br><span class="line"><span class="meta">@Before(&quot;myPointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;前置通知执行了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h2><p>通知的配置语法：<code>@诵知注解(&quot;切点表达式&quot;)</code></p><table><thead><tr><th>名称</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>前置通知</td><td>@Before</td><td>用于配置前置通知。指定增强的方法在切入点方法之前执行</td></tr><tr><td>后置通知</td><td>@AfterReturning</td><td>用于配置后置通知。指定增强的方法在切入点方法之后执行</td></tr><tr><td>异常通知</td><td>@AfterThrowing</td><td>用于配置异常通知。指定增强的方法出现异常后执行</td></tr><tr><td>最终通知</td><td>@After</td><td>用于配置最终通知。无论切入点方法执行时是否有异常,都会执行</td></tr><tr><td>环绕通知</td><td>@Around</td><td>用于配置环绕通知。开发者可以手动控制增强代码在什么时候执行</td></tr><tr><td><strong>注意：</strong></td><td></td><td></td></tr><tr><td>当前四个通知组合在一起时，执行顺序如下：</td><td></td><td></td></tr></tbody></table><blockquote><p>@Before → @Ater → @After → Returning(如果有异常：@AfterThrowing)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring 整合 Junit 单元测试类</title>
      <link href="/posts/665251904.html"/>
      <url>/posts/665251904.html</url>
      
        <content type="html"><![CDATA[<h1 id="普通-Junit-测试问题"><a href="#普通-Junit-测试问题" class="headerlink" title="普通 Junit 测试问题"></a>普通 Junit 测试问题</h1><p>在普通的测试类中,需要开发者手动加载配置文件并创建 Spring 容器,然后通过 Spring 相关 API 获得Bean实例；如果不这么做，那么无法从容器中获得对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取到 spring 上下文对象，借助上下文对象可以获取到 IOC 容器中的 bean 对象</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">// 使用上下文对象从容器中获取    到 bean 对象</span></span><br><span class="line"><span class="type">IUserService</span> <span class="variable">userService</span> <span class="operator">=</span> (IUserService) applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br></pre></td></tr></table></figure><p>我们可以 SpringJunit 负责创建 Spring 容器来简化这个操作，开发者可以直接在测试类注入Bean实例；但是需要将配置文件的名称告诉它。</p><h1 id="Spring-整合-Junit"><a href="#Spring-整合-Junit" class="headerlink" title="Spring 整合 Junit"></a>Spring 整合 Junit</h1><p><strong>步骤分析</strong></p><ol><li>导入 Spring 集成 Junit的坐标</li></ol><p><strong>此处需要注意的是, spring5 及上版本要求 Junit 的版本必须是 4.12 及以上</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>使用 @RunWith 注解替换原来的运行器 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span>`</span><br></pre></td></tr></table></figure><p> @RunWith 指定 Junit 的运行环境<br> SpringJUnit4ClassRunner 是 Spring 提供的做为 Junit 运行环境的类 </p></li><li><p>使用 @ContextConfiguration 指定配置文件或配置类</p></li></ol><p><strong>xml 开发</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration(&#123;&quot;classpath:applicationContext.xml&quot;&#125;)</span></span><br></pre></td></tr></table></figure><p><strong>纯注解开发</strong><br>@ContextConfiguration(classes = {核心配置类的class})</p><ol start="4"><li>使用 @Autowired 注入需要测试的对象</li><li>创建测试方法进行测试</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring基础及IOC控制反转</title>
      <link href="/posts/3129137717.html"/>
      <url>/posts/3129137717.html</url>
      
        <content type="html"><![CDATA[<h1 id="初识-Spring"><a href="#初识-Spring" class="headerlink" title="初识 Spring"></a>初识 Spring</h1><h2 id="Spring优势"><a href="#Spring优势" class="headerlink" title="Spring优势"></a>Spring优势</h2><ol><li>方便解耦，简化开发<br>Spring就是一个容器，可以将所有对象创建和关系维护交给 Spring 管理<br>什么是耦合度？对象之间的关系，通常说当一个模块(对象)更改时也需要更改其他模块(对象)，这就昰耦合，耦合度过高会使代码的维护成本增加。要尽量解耦。</li><li>AOP 编程的支持<br>Spring 提供面向切面编程，方便实现程序进行权限拦截，运行监控等功能。</li><li>声明式事务的支持<br>通过配置完成事务的管理，无需手动编程。</li><li>方便测试，降低 JavaEE API 的使用<br>Spring 对 Junit4 支持，可以使用注解测试。</li><li>方便集成各种优秀框架<br>不排除各种优秀的开源框架，内提供了对各种优秀框架的直接支持。<h2 id="Spring-体系结构"><a href="#Spring-体系结构" class="headerlink" title="Spring 体系结构"></a>Spring 体系结构</h2><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210925194752920-203871772.png" alt="image"></li></ol><h1 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC 控制反转"></a>IOC 控制反转</h1><h2 id="初识oc"><a href="#初识oc" class="headerlink" title="初识oc"></a>初识oc</h2><p>**控制反转(Inverse Of Control)**不是什么技术，而是一种设计思想。它的目的是指导我们设计出更加松耦合的程序。</p><blockquote><p>控制：在 Java 中指的是对象的控制权限(创建、销毁)<br>反转：指的是对象控制权由原来<strong>由开发者在类中手动控制</strong>反转到由 Spring 容器控制</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210925204744856-561947114.png" alt="image"></p><p><strong>举个栗子</strong></p><ul><li>传统方式<br>之前我们需要一个 userDao 实例，需要开发者自己手动创建 new UserDao();</li><li>IOC 方式<br>现在我们需要一个 userDao实例，直接从 Spring 的 IOC 容器获得，对象的创建权交给了 Spring 控制。</li></ul><h1 id="Spring快速入门"><a href="#Spring快速入门" class="headerlink" title="Spring快速入门"></a>Spring快速入门</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>需求：借助 Spring的 IOC 实现 service 层与 dao 层代码解耦合。</p><p>步骤分析</p><ol><li>创建 java 项目，导入 spring开发基本坐标</li><li>编写Dao 接口和实现类</li><li>创建 spring 核心配置文件</li><li>在 spring 配置文件中配置 UserDaoImpl</li><li>使用 spring 相关 API 获得 Bean 实例</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li>创建 java 项目，导入 Spring 开发依赖坐标<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写 Dao 接口及实现类</li></ol><ul><li>接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.orginly.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>实现类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.orginly.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.orginly.dao.IUserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao 被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>配置 Spring 核心配置文件</li></ol><p><strong>一般命名为applicationContext.xml</strong></p><blockquote><p>beans 约束文件地址：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#xsd-schemas-beans">https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#xsd-schemas-beans</a></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置 UserDaoImpl</span></span><br><span class="line"><span class="comment">     id：唯一标识</span></span><br><span class="line"><span class="comment">     class：类全路径</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.orginly.dao.impl.UserDaoImpl&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>使用 Spring 相关 api 获取 Bean 实例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取到 spring 上下文对象，借助上下文对象可以获取到 IOC 容器中的 bean 对象</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="comment">// 使用上下文对象从容器中获取到 bean 对象</span></span><br><span class="line">    <span class="type">IUserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (IUserDao) applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line"></span><br><span class="line">    userDao.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Spring-常用-Api"><a href="#Spring-常用-Api" class="headerlink" title="Spring 常用 Api"></a>Spring 常用 Api</h1><h2 id="API-继承体系介绍"><a href="#API-继承体系介绍" class="headerlink" title="API 继承体系介绍"></a>API 继承体系介绍</h2><p>Spring 的 API 体系异常庞大，我们现在只关注两个 BeanFactory 和 ApplicationContext</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210926085328111-611375392.png" alt="image"></p><h2 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> ClassPathXmlApplicationContext</span><br><span class="line">它是从类的根路径下加载配置文件推荐使用这种。</span><br><span class="line"><span class="number">2.</span> FileSystemXmlApplicationContext</span><br><span class="line">它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</span><br><span class="line"><span class="number">3.</span> AnnotationConfigApplicationContext</span><br><span class="line">当使用注解配置容器对象时，需要使用此类来创建 spring容器。它用来读取注解。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 获取到 spring 上下文对象，借助上下文对象可以获取到 IOC 容器中的 bean 对象</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><strong>常用方法</strong><br>| 方法声明                                              | 说明                                                         |<br>| —————————————————– | ———————————————————— |<br>| Object getBean (String name)                          | 根据Bean的id从容器中获得Bean实例，返回是 Object，需要强转。  |<br>| &lt; T &gt; T getBean(Class&lt; T &gt; requiredType)              | 根据类型从容器中匹配Bean实例，当容器中相同类型的Bean有多个时，则此方法会报错。 |<br>| &lt; T &gt;T getBean(String name， Class&lt; T &gt; requiredType) | 根据Bean的id和类型获得Bean实例，解决容器中相同类型Bean有多个情况。 |</p><h1 id="Spring-Bean-配置文件"><a href="#Spring-Bean-配置文件" class="headerlink" title="Spring Bean 配置文件"></a>Spring Bean 配置文件</h1><h2 id="Bean-标签基本配置"><a href="#Bean-标签基本配置" class="headerlink" title="Bean 标签基本配置"></a>Bean 标签基本配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">用于配置对象交由 Spring 来创建。</span><br><span class="line"></span><br><span class="line">基本属性：</span><br><span class="line">id：Bean实例在 Spring容器中的唯一标识</span><br><span class="line">c1ass：Bean的全限定</span><br><span class="line"></span><br><span class="line">默认情况下它调用的是类中的无参构造函数，如果没有无参构造函数则不能创建成功。</span><br></pre></td></tr></table></figure><h2 id="Bean-标签范围配置"><a href="#Bean-标签范围配置" class="headerlink" title="Bean 标签范围配置"></a>Bean 标签范围配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>scope 属性指对象的作用范围，取值如下：<br>| 取值范围       | 说明                                                         |<br>| ————– | ———————————————————— |<br>| <strong>singleton</strong>  | 默认值，单例的                                               |<br>| <strong>prototype</strong>  | 多例的                                                       |<br>| request        | WEB项目中， Spring创建一个Bean的对象，将对象存入到 request 域中 |<br>| session        | WEB项目中， Spring创建一个Bean的对象，将对象存入到 session域中 |<br>| global session | WEB项目中，应用在 Portlet 环境，如果没有 Portlet 环境那么globalSession相当于 session |</p><ol><li>当 scope的取值为 singleton 时<br> Bean 的实例化个数：1 个<br> Bean 的实例化时机：当 Spring 核心文件被加载时，实例化配置的 Bean 实例。<br> Bean 的生命周期：<pre><code> 对象创建：当应用加载，创建容器时，对象就被创建 对象运行：只要容器在，对象一直活看 对象销毀：当应用卸戟，销毁容器时，对象就被销毀了</code></pre></li><li>当 scope 的取值为 prototype<br> Bean 的实例化个数：多个<br> Bean 的实例化时机：当调用 getBean() 方法时实例化 Bean<br> Bean 的生命周期：<pre><code> 对象创建：当使用对象时，创建新的对象实例 对象运行：只要对象在使用中，就一直活着 对象销毀：当对象长时间不用时，被Java的垃圾回收器回收了</code></pre></li></ol><h2 id="Bean-生命周期配置"><a href="#Bean-生命周期配置" class="headerlink" title="Bean 生命周期配置"></a>Bean 生命周期配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">init-method：指定类中的初始化方法名称</span><br><span class="line">destroy-method：指定类中销方法名称</span><br></pre></td></tr></table></figure><h2 id="Bean-实例化三种方式"><a href="#Bean-实例化三种方式" class="headerlink" title="Bean 实例化三种方式"></a>Bean 实例化三种方式</h2><ol><li>无参<strong>构造</strong>方法实例化</li><li>工厂<strong>静态</strong>方法实例化</li><li>工厂<strong>普通</strong>方法实例化<h3 id="无参构造方法实例化"><a href="#无参构造方法实例化" class="headerlink" title="无参构造方法实例化"></a>无参构造方法实例化</h3>它会根据默认无参构造方法来创建类对象，如果 bean 中没有默认无参构造函数，将会创建失败。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.orginly.UserDaoImp1&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="工厂静态方法实例化"><a href="#工厂静态方法实例化" class="headerlink" title="工厂静态方法实例化"></a>工厂静态方法实例化</h3><p><strong>应用场景</strong><br>依赖的 jar 包中有个 A 类，A 类中有个静态方法m1，m1方法的返回值是一个 B 对象。如果我们频繁使用 B 对象，此时我们可以将 B 对象的创建交给 spring 的 IOC 容器，以后我们在使用 B 对象时，无需调用 A 类中的 m1 方法，直接从 IOC 容器获得。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticFactoryBean</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IUserDao <span class="title function_">createUserDao</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.orginly.factory.StaticFactoryBean&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createUserDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="工厂普通方法实例化"><a href="#工厂普通方法实例化" class="headerlink" title="工厂普通方法实例化"></a>工厂普通方法实例化</h3><p><strong>应用场景</strong><br>依赖的jar包中有个 A 类，A 类中有个普通方法 m1，m1 方法的返回值是一个B对象。如果我们频繁使用B对象，此时我们可以将B对象的创建权交给 spring 的 IOC 容器，以后我们在使用 B 对象时，无需调用 A 类中的 m1 方法，直接从 IOC 容器获得。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicFactoryBean</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> IUserDao <span class="title function_">createUserDao</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 工厂普通方法实例化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dynamicFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.orginly.factory.DynamicFactoryBean&quot;</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;dynamicFactoryBean&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createUserDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bean-依赖注入概述"><a href="#Bean-依赖注入概述" class="headerlink" title="Bean 依赖注入概述"></a>Bean 依赖注入概述</h2><p>**依赖注入 Dl( Dependency Injection)**：它是 Spring 框架核心 IOC 的具体实现。</p><p>在编写程序时，通过控制反转，把对象的创建交给了 Spring，但是代码中不可能出现没有依赖的情况。IOC 解耦只是降低他们的依赖关系，但不会消除。例如业务层仍会调用持久层的方法。</p><p>那这种业务层和持久层的依赖关系，在使用 Sping 之后，就让 Spring 来维护了。简单的说，就是通过框架把持久层对象传入业务层，而不用我们自己去获取。</p><h2 id="Bean-依赖注入方式"><a href="#Bean-依赖注入方式" class="headerlink" title="Bean 依赖注入方式"></a>Bean 依赖注入方式</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p><strong>service实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储注入对象</span></span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有参构造用于有参构造依赖注入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDao</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(IUserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.orginly.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 userService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.orginly.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 有参构造完成依赖注入</span></span><br><span class="line"><span class="comment">     index：参数的位置</span></span><br><span class="line"><span class="comment">     type：类型</span></span><br><span class="line"><span class="comment">     ref：对应的bean标签</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;constructor-arg index=&quot;0&quot; type=&quot;com.orginly.dao.IUserDao&quot; ref=&quot;userDao&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 简化写法</span></span><br><span class="line"><span class="comment">     name：构造方法的参数名称</span></span><br><span class="line"><span class="comment">     ref：对应的bean标签</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Setter-方法完成注入"><a href="#Setter-方法完成注入" class="headerlink" title="Setter 方法完成注入"></a>Setter 方法完成注入</h3><p><strong>实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储注入对象</span></span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(IUserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.orginly.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 userService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.orginly.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- setter 完成方法注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bean-依赖注入的数据类型"><a href="#Bean-依赖注入的数据类型" class="headerlink" title="Bean 依赖注入的数据类型"></a>Bean 依赖注入的数据类型</h2><h3 id="依赖注入普通数据类型"><a href="#依赖注入普通数据类型" class="headerlink" title="依赖注入普通数据类型"></a>依赖注入普通数据类型</h3><p>上面操作，都是注入 Bean 对象，除了对象的可以注入，普通数据类型和集合都可以在容器中进行注入。</p><p><strong>注入数据的三种数据类型</strong></p><ol><li>普通数据类型</li><li>引用数据类型</li><li>集合数据类型 其中引用数据类型，此处就不再述了，之前的操作都是对 UserDao 对象的引用进行注入的。下面将以 Setter 方法注入为例，演示普通数据类型和集合数据类型的注入。</li></ol><p><strong>实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">        System.out.printf(<span class="string">&quot;name = %s,age = %d\n&quot;</span>,name,age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 userService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.orginly.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- setter 完成方法注入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref：用于注入引用类型，value：用于注入普通数据类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;feng&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="依赖注入集合数据类型"><a href="#依赖注入集合数据类型" class="headerlink" title="依赖注入集合数据类型"></a>依赖注入集合数据类型</h3><ol><li><p>List 集合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.orginly.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 进行 List 集合进行依赖注入 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span> <span class="attr">value-type</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>feng<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>li<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 可以用 ref 进行对象的引用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Set 集合</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.orginly.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 进行 Set 集合进行依赖注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>feng<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>li<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">&lt;/bean</span><br></pre></td></tr></table></figure><ol start="3"><li><p>Array 集合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.orginly.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 进行 Set 集合进行依赖注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;arr&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>feng<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>li<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Map 集合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.orginly.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 进行 Set 集合进行依赖注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;feng&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;li&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p> Properties 配置注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(properties.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.orginly.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k1&quot;</span>&gt;</span>v1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k2&quot;</span>&gt;</span>v2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="spring-配置文件模块化"><a href="#spring-配置文件模块化" class="headerlink" title="spring 配置文件模块化"></a>spring 配置文件模块化</h1><p>实际开发中， Spring 的配置内容非常多，这就导致 Spring 配置很繁杂且体积很大，所以，可以将部分配置拆解到其他配置文件中，也就是所调的配置文件模块化。</p><ol><li>并列的多个配置文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Applicationcontext</span> <span class="variable">act</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXml</span> Applicationcontext(<span class="string">&quot;beans1.xml&quot;</span>,<span class="string">&quot;beans2.xml&quot;</span>,<span class="string">&quot;...&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>主从配置文件</li></ol><p><strong>PS：开发环境中如果配置后运行找不到文件，那么需要重新 IDEA 让编辑器重新编译</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:applicationContext-dao.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:applicationContext-service.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:applicationContext-user.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>同一个 XML 中不能出现相同名称的 bean 如果出现会报错</li><li>多个 XML 如果出现相同名称的 bean，不会报错，但是后加载的会盖前加载的 bean</li></ul><h1 id="Spring-注解开发"><a href="#Spring-注解开发" class="headerlink" title="Spring 注解开发"></a>Spring 注解开发</h1><p>Spring 是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解代替xm配置文件可以简化配置，提高开发效率。</p><h2 id="Spring-常用注解"><a href="#Spring-常用注解" class="headerlink" title="Spring 常用注解"></a>Spring 常用注解</h2><p>Spring常用注解主要是替代<code>&lt;bean&gt;</code>的配置<br>| 注解            | 说明                                            |<br>| ————— | ———————————————– |<br>| <strong>@Component</strong>  | 使用在类上用于实例化Bean                        |<br>| <strong>@Controller</strong> | 使用在Web层类上用于实例化Bean                   |<br>| <strong>@Service</strong>    | 使用在 service 层类上用于实例化Bean             |<br>| <strong>@Repository</strong> | 使用在 dao 层类上用于实例化Bean                 |<br>| <strong>@Autowired</strong>  | 使用在字段上用于根据类型依赖注入                |<br>| <strong>@Qualifier</strong>  | 结合@Autowired 一起使用根据名称进行依赖注入     |<br>| <strong>@Resource</strong>   | 相当于@Autowired + @Qualifier，按照名称进行注入 |<br>| <strong>@value</strong>      | 注入普通属性                                    |<br>| <strong>@Scope</strong>      | 标注Bean的作用范围                              |<br>| @PostConstruct  | 使用在方法上标注该方法是Bean的初始化方法        |<br>| @PreDestroy     | 使用在方法上标注该方法是Bean的销毁方法          |</p><ol><li><code>@Component @Controller @Service @Repository</code><br>相当于配置<code>&lt;bean&gt;</code>生成类实例对象到 IOC容器中</li><li><code>@Autowired @Qualifier @Resource @value</code><br>相当与配置了<code>&lt;property&gt;</code>,进行依赖注入</li></ol><p><strong>PS：JDK11 以后完全移除了 javax 扩展导致不能使用 @resource 注解</strong><br>如果要使用@resource 需要引入 Mevan 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意<br>使用注解进行开发时，需要在 applicationContext.xml 中配置组件扫描，作用是指定哪个包及其子包下的 Bean 需要进行扫描以便识别使用注解配置的类、字段和方法</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注解的组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.orginly&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-新注解"><a href="#Spring-新注解" class="headerlink" title="Spring 新注解"></a>Spring 新注解</h3><p>使用上面的注解还不能全部替代 xml 配置文件,还需要使用注解替代的配置如下</p><ol><li>非自定义的Bean的配置（如外部引入的Jar包）：<code>&lt;bean&gt;</code></li><li>加载 properties文件的配置：<code>&lt;context:property-placeholder&gt;</code></li><li>组件扫描的配置：<code>&lt;context:component-scan&gt;</code></li><li>引入其他文件:<code>&lt;import&gt;</code><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Configuration</td><td>用于指定当前类是一个 Spring 配置类,当创建容器时会从该类上加载注解</td></tr><tr><td>@Bean</td><td>使用在方法上，标注将该方法的返回值存储到 Spring 容器中</td></tr><tr><td>@PropertySource</td><td>加载 properties文件中的配置</td></tr><tr><td>ComponentScan</td><td>用于指定 Spring在初始化容器时要扫描的包</td></tr><tr><td>@Import</td><td>用于导入其他配置类</td></tr></tbody></table></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis 加载策略及注解开发</title>
      <link href="/posts/1236402924.html"/>
      <url>/posts/1236402924.html</url>
      
        <content type="html"><![CDATA[<h1 id="加载策略"><a href="#加载策略" class="headerlink" title="加载策略"></a>加载策略</h1><h2 id="什么是延迟加载"><a href="#什么是延迟加载" class="headerlink" title="什么是延迟加载"></a>什么是延迟加载</h2><blockquote><p>延迟加载就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载。</p></blockquote><p>举个栗子</p><ul><li>在一对多中，当我们有一个用户，它有个100个订单<br>  在查询用户的时候，要不要把关联的订单查出来?<br>  在查询订单的时候，要不要把关联的用户查出来?</li><li>回答：<br>  在查询用户时，用户下的订单应该是，什么时候用，什么时候查询。<br>  在查询订单时，订单所属的用户信息应该是随着订单一起查询出来。</li></ul><h2 id="延迟加载的优缺点"><a href="#延迟加载的优缺点" class="headerlink" title="延迟加载的优缺点"></a>延迟加载的优缺点</h2><ul><li><p>优点：<br>  先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。</p></li><li><p>缺点：<br>  因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗时间，所以可能造成用户等待时间变长，造成用户体验下降</p></li><li><p>在多表中：<br>一对多，多对多：通常情况下采用延迟加载<br>一对一(多对一)：通常情况下采用立即加载</p></li><li><p>注意<br>延迟加载是基于嵌套查询来实现的</p></li></ul><h2 id="局部延迟加载"><a href="#局部延迟加载" class="headerlink" title="局部延迟加载"></a>局部延迟加载</h2><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210925171133428-1970102745.png" alt="image"></p><h2 id="设置延迟加载"><a href="#设置延迟加载" class="headerlink" title="设置延迟加载"></a>设置延迟加载</h2><p>大家在配置了延迟加载策略后，发现即使没有调用关联对象的任何方法，但是在你调用当前对象的 <code>equals、clone、 hashCode、 toString</code>方法时也会触发关联对象的查询。<br>我们可以在配置文件中使用 <code>lazyLoadTriggerMethods</code>配置项覆盖掉上面四个方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 下面所有方法都会进行延迟加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;toString()&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="全局延迟加载"><a href="#全局延迟加载" class="headerlink" title="全局延迟加载"></a>全局延迟加载</h2><blockquote><p>在  mybatis 的核心配置文件中可以使用 setting标签修改全局的加载策略。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开启全局延迟加载 --&gt;</span><br><span class="line">&lt;setting name=<span class="string">&quot;lazyLoadTriggerMethod&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>注意：<br>局部的加载策略优先级高于全局的加载策略。</li></ul><h1 id="Mybatis缓存"><a href="#Mybatis缓存" class="headerlink" title="Mybatis缓存"></a>Mybatis缓存</h1><h2 id="为什么使用缓存"><a href="#为什么使用缓存" class="headerlink" title="为什么使用缓存?"></a>为什么使用缓存?</h2><p>当用户频繁查询某些固定的数据时第一次将这些数据从数据库中查询岀来保存在缓存中。当用户再次查询这些数据时不用再通过数据库查询而是去缓存里面查询。减少网络连接和数据库查询带来的损耗，从而提高我们的查询效率减少高并发访问带来的系统性能问题。</p><p><strong>一句话概括：</strong>经常查询一些不经常发生变化的数据，使用缓存来提高查询效率。<br>像大多数的持久化框架—样， Mybatis也提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提高性能。 Mybatis中缓存分为一级缓存，二级缓存。</p><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>一级缓存是 Sqlsession 级别的缓存，是默认开启的。<br>所以在参数和SQL完全一样的情况下,我们使用同一个 SqlSession对象调用个 Mapper方法,往往只执行一次SQL,因为使用 Selsession第一次查询后MyBatis会将其放在缓存中,以后再查词的时候,如果没有声明需要刷新，并且缓存没有超时的情况下, SqlSession都会取出当前缓存的数据，而不会再次发送SQL到数据库。<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210925181222855-2002829241.png" alt="image"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>一级缓存是 SqlSession 范围的缓存，执行 SqlSession 的C(增加)、U(更新)、D(删除)操作，或者调用 clearCache()、 commit()、close()方法，都会清空缓存。</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210925182152939-2010448385.png" alt="image"></p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p><strong>不建议使用 Mybatis 的二级缓存，容易出现严重的脏读问题。实际使用中弊大于利，比较鸡肋。开发中我们一般会使用 Redis 来做第三方缓存。</strong></p><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>二级缓存是 namespace 级别(跨 sqlSession)的缓存，是默认不开启的。</p><p>二级缓存的开启需要进行配置，实现二级缓存的时候， MyBatis要求返回的POJO必须是可序列化的。也就是要求实现 Serializable 接口,配置方法很简单，只需要在映射 XML 文件配置<code>&lt;cache /&gt;</code> 就可以开启二级缓存了。</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210925182707819-438784202.png" alt="image"></p><h3 id="开启二级缓存"><a href="#开启二级缓存" class="headerlink" title="开启二级缓存"></a>开启二级缓存</h3><ol><li>配置核心配置文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启二级缓存 cacheEnabled 的默认值为 true,可以忽略配置，为了规范性所以写上。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li>在 UserMapper.xml 中添加 <code>&lt;cache/&gt;</code>标签 即开启二级缓存。</li><li>可以给某个 sql 增加 <code>useCache=false</code> 不使用二级缓存。</li></ol><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>二级缓存是 mapper 映射级别的缓存,多个 SqlSession 去操作同一个 Mappe r映射的 sql 语句，多个 SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的。</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210925184634953-390183816.png" alt="image"></p><p>1.映射语句文件中的所有 select 语句将会被缓存。<br>2.映射语句文件中的所有 Insert、 update 和 delete 语句会刷新缓存。</p><h1 id="MyBatis注解"><a href="#MyBatis注解" class="headerlink" title="MyBatis注解"></a>MyBatis注解</h1><h2 id="Mybatis常用注解"><a href="#Mybatis常用注解" class="headerlink" title="Mybatis常用注解"></a>Mybatis常用注解</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Insert:实现新增,代替了<span class="tag">&lt;<span class="name">insert</span>&gt;</span><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@Delete:实现刪除,代替了<span class="tag">&lt;<span class="name">delete</span>&gt;</span><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@Update:实现更新,代替了<span class="tag">&lt;<span class="name">update</span>&gt;</span><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@Select:实现查询,代了&lt; select&gt;<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Result:实现结果集封装,代了<span class="tag">&lt;<span class="name">result</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@Results:可以与@Result一起使用,封装多个结果集,代替了<span class="tag">&lt;<span class="name">resultMap</span>&gt;</span><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@one:实现一对一结果集封装,代替了<span class="tag">&lt;<span class="name">association</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@Many:实现一对多结果集封装,代替了<span class="tag">&lt;<span class="name">collection</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Mybatis注解的增删改查"><a href="#Mybatis注解的增删改查" class="headerlink" title="Mybatis注解的增删改查"></a>Mybatis注解的增删改查</h2><p>创建 UserMapper接口<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210925185941294-51563647.png" alt="image"></p><h2 id="使用注解实现复杂映射开发"><a href="#使用注解实现复杂映射开发" class="headerlink" title="使用注解实现复杂映射开发"></a>使用注解实现复杂映射开发</h2><p>之前我们在映射文件中通过配置<code>&lt;resultMap&gt;、&lt;association&gt;、&lt;collection&gt;</code>来实现复杂关系映射。使用注解开发后，我们可以使用<code>@Reu1ts、@Result、@one、@Many</code>注解组合完成复杂关系的配置</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210925190358257-1365402906.png" alt="image"></p><h2 id="注解延迟加载"><a href="#注解延迟加载" class="headerlink" title="注解延迟加载"></a>注解延迟加载</h2><p>不管是一对一还是一对多,在注解配置中都有 fetchTypel的属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">fetchType = FetchType.LAZY# Mybatis 加载策略及注解开发</span><br><span class="line"># 加载策略</span><br><span class="line">## 什么是延迟加载</span><br><span class="line">&gt; 延迟加载就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载。</span><br><span class="line"></span><br><span class="line">举个栗子</span><br><span class="line">- 在一对多中，当我们有一个用户，它有个100个订单</span><br><span class="line">在查询用户的时候，要不要把关联的订单查出来?</span><br><span class="line">在查询订单的时候，要不要把关联的用户查出来?</span><br><span class="line">- 回答：</span><br><span class="line">在查询用户时，用户下的订单应该是，什么时候用，什么时候查询。</span><br><span class="line">在查询订单时，订单所属的用户信息应该是随着订单一起查询出来。</span><br><span class="line"></span><br><span class="line">## 延迟加载的优缺点</span><br><span class="line">- 优点：</span><br><span class="line">先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。</span><br><span class="line">- 缺点：</span><br><span class="line">因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗时间，所以可能造成用户等待时间变长，造成用户体验下降</span><br><span class="line"></span><br><span class="line">- 在多表中：</span><br><span class="line">一对多，多对多：通常情况下采用延迟加载</span><br><span class="line">一对一(多对一)：通常情况下采用立即加载</span><br><span class="line"></span><br><span class="line">- 注意</span><br><span class="line">延迟加载是基于嵌套查询来实现的</span><br><span class="line"></span><br><span class="line">## 局部延迟加载</span><br><span class="line">![image](https://img2020.cnblogs.com/blog/2354934/202109/2354934-20210925171133428-1970102745.png)</span><br><span class="line"></span><br><span class="line">## 设置延迟加载</span><br><span class="line">大家在配置了延迟加载策略后，发现即使没有调用关联对象的任何方法，但是在你调用当前对象的 `equals、clone、 hashCode、 toString`方法时也会触发关联对象的查询。</span><br><span class="line">我们可以在配置文件中使用 `lazyLoadTriggerMethods`配置项覆盖掉上面四个方法。</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;!-- 下面所有方法都会进行延迟加载 --&gt;</span><br><span class="line">    &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;toString()&quot;/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><h2 id="全局延迟加载-1"><a href="#全局延迟加载-1" class="headerlink" title="全局延迟加载"></a>全局延迟加载</h2><blockquote><p>在  mybatis 的核心配置文件中可以使用 setting标签修改全局的加载策略。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开启全局延迟加载 --&gt;</span><br><span class="line">&lt;setting name=<span class="string">&quot;lazyLoadTriggerMethod&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>注意：<br>局部的加载策略优先级高于全局的加载策略。</li></ul><h1 id="Mybatis缓存-1"><a href="#Mybatis缓存-1" class="headerlink" title="Mybatis缓存"></a>Mybatis缓存</h1><h2 id="为什么使用缓存-1"><a href="#为什么使用缓存-1" class="headerlink" title="为什么使用缓存?"></a>为什么使用缓存?</h2><p>当用户频繁查询某些固定的数据时第一次将这些数据从数据库中查询岀来保存在缓存中。当用户再次查询这些数据时不用再通过数据库查询而是去缓存里面查询。减少网络连接和数据库查询带来的损耗，从而提高我们的查询效率减少高并发访问带来的系统性能问题。</p><p><strong>一句话概括：</strong>经常查询一些不经常发生变化的数据，使用缓存来提高查询效率。<br>像大多数的持久化框架—样， Mybatis也提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提高性能。 Mybatis中缓存分为一级缓存，二级缓存。</p><h2 id="一级缓存-1"><a href="#一级缓存-1" class="headerlink" title="一级缓存"></a>一级缓存</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>一级缓存是 Sqlsession 级别的缓存，是默认开启的。<br>所以在参数和SQL完全一样的情况下,我们使用同一个 SqlSession对象调用个 Mapper方法,往往只执行一次SQL,因为使用 Selsession第一次查询后MyBatis会将其放在缓存中,以后再查词的时候,如果没有声明需要刷新，并且缓存没有超时的情况下, SqlSession都会取出当前缓存的数据，而不会再次发送SQL到数据库。<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210925181222855-2002829241.png" alt="image"></p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>一级缓存是 SqlSession 范围的缓存，执行 SqlSession 的C(增加)、U(更新)、D(删除)操作，或者调用 clearCache()、 commit()、close()方法，都会清空缓存。</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210925182152939-2010448385.png" alt="image"></p><h2 id="二级缓存-1"><a href="#二级缓存-1" class="headerlink" title="二级缓存"></a>二级缓存</h2><p><strong>不建议使用 Mybatis 的二级缓存，容易出现严重的脏读问题。实际使用中弊大于利，比较鸡肋。开发中我们一般会使用 Redis 来做第三方缓存。</strong></p><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>二级缓存是 namespace 级别(跨 sqlSession)的缓存，是默认不开启的。</p><p>二级缓存的开启需要进行配置，实现二级缓存的时候， MyBatis要求返回的POJO必须是可序列化的。也就是要求实现 Serializable 接口,配置方法很简单，只需要在映射 XML 文件配置<code>&lt;cache /&gt;</code> 就可以开启二级缓存了。</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210925182707819-438784202.png" alt="image"></p><h3 id="开启二级缓存-1"><a href="#开启二级缓存-1" class="headerlink" title="开启二级缓存"></a>开启二级缓存</h3><ol><li>配置核心配置文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启二级缓存 cacheEnabled 的默认值为 true,可以忽略配置，为了规范性所以写上。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li>在 UserMapper.xml 中添加 <code>&lt;cache/&gt;</code>标签 即开启二级缓存。</li><li>可以给某个 sql 增加 <code>useCache=false</code> 不使用二级缓存。</li></ol><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>二级缓存是 mapper 映射级别的缓存,多个 SqlSession 去操作同一个 Mappe r映射的 sql 语句，多个 SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的。</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210925184634953-390183816.png" alt="image"></p><p>1.映射语句文件中的所有 select 语句将会被缓存。<br>2.映射语句文件中的所有 Insert、 update 和 delete 语句会刷新缓存。</p><h1 id="MyBatis注解-1"><a href="#MyBatis注解-1" class="headerlink" title="MyBatis注解"></a>MyBatis注解</h1><h2 id="Mybatis常用注解-1"><a href="#Mybatis常用注解-1" class="headerlink" title="Mybatis常用注解"></a>Mybatis常用注解</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Insert:实现新增,代替了<span class="tag">&lt;<span class="name">insert</span>&gt;</span><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@Delete:实现刪除,代替了<span class="tag">&lt;<span class="name">delete</span>&gt;</span><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@Update:实现更新,代替了<span class="tag">&lt;<span class="name">update</span>&gt;</span><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@Select:实现查询,代了&lt; select&gt;<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Result:实现结果集封装,代了<span class="tag">&lt;<span class="name">result</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@Results:可以与@Result一起使用,封装多个结果集,代替了<span class="tag">&lt;<span class="name">resultMap</span>&gt;</span><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@one:实现一对一结果集封装,代替了<span class="tag">&lt;<span class="name">association</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@Many:实现一对多结果集封装,代替了<span class="tag">&lt;<span class="name">collection</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Mybatis注解的增删改查-1"><a href="#Mybatis注解的增删改查-1" class="headerlink" title="Mybatis注解的增删改查"></a>Mybatis注解的增删改查</h2><p>创建 UserMapper接口<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210925185941294-51563647.png" alt="image"></p><h2 id="使用注解实现复杂映射开发-1"><a href="#使用注解实现复杂映射开发-1" class="headerlink" title="使用注解实现复杂映射开发"></a>使用注解实现复杂映射开发</h2><p>之前我们在映射文件中通过配置<code>&lt;resultMap&gt;、&lt;association&gt;、&lt;collection&gt;</code>来实现复杂关系映射。使用注解开发后，我们可以使用<code>@Reu1ts、@Result、@one、@Many</code>注解组合完成复杂关系的配置</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210925190358257-1365402906.png" alt="image"></p><h2 id="注解延迟加载-1"><a href="#注解延迟加载-1" class="headerlink" title="注解延迟加载"></a>注解延迟加载</h2><p>不管是一对一还是一对多,在注解配置中都有 fetchTypel的属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetchType = FetchType.LAZY 表示懒加载</span><br><span class="line">fetchType = FetchType.EAGER 表示立即加载</span><br><span class="line">fetchType = FetchType.DEFAULT 表示使用全局配置</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>注解开发和 xml 配置优劣分析</p><ol><li>注解开发和xm配置相比，从开发效率来说,注解编写更简单，效率更高。</li><li>从可维护性来说，注解如果要修改，必须修改源码，会导致维护成本增加。xml维护性更强。<br>表示懒加载<br>fetchType = FetchType.EAGER 表示立即加载<br>fetchType = FetchType.DEFAULT 表示使用全局配置<br>```<br>注解开发和 xml 配置优劣分析</li><li>注解开发和xm配置相比，从开发效率来说,注解编写更简单，效率更高。</li><li>从可维护性来说，注解如果要修改，必须修改源码，会导致维护成本增加。xml维护性更强。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis 快速入门</title>
      <link href="/posts/2987488722.html"/>
      <url>/posts/2987488722.html</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-简介"><a href="#Mybatis-简介" class="headerlink" title="Mybatis 简介"></a>Mybatis 简介</h1><p>MyBatis是一个优秀的基于 ORM 的半自动轻量级持久层框架，它对db的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建 connection、创建 statement 手动设置参数、结果集检索等 jdbc 繁杂的过程代码。    </p><h1 id="Mybatis-快速入门"><a href="#Mybatis-快速入门" class="headerlink" title="Mybatis 快速入门"></a>Mybatis 快速入门</h1><p>1.创建数据库及 user 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_general_ci;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.创建 maven工程，导入依赖( MySQL驱动、 mybatis、 Junit)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.编写 User 实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.orginly;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Demo&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.编写 UserMapper.xm映射配置文件(ORM思想)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType: 返回的结果类型（自动映射封装） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.orginly.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user </span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.编写 SqIMapConfig.xml 核心配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- environments：运行环境 default：默认环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 当前的事务管理器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据源信息 POOLED：使用 mybatis 的连接池 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost/demo?characterEnCoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;000&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>映射关系配置的引入(引入映射配置文件的路径)<br>SqIMapConfig.xml 中添加<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写测试代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickStart</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 加载核心配置文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;sqlMapConfig.xml&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 获取 sqlSessionFactory 工厂对象</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line">    <span class="comment">// 3. 获取 sqlSession 会话对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 4. 执行 sql 参数：namespace + . + id</span></span><br><span class="line">    List&lt;User&gt; users = sqlSession.selectList(<span class="string">&quot;user.findAll&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (User item : users) &#123;</span><br><span class="line">        System.out.println(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5. 关闭资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven 基本配置和阿里云镜像配置</title>
      <link href="/posts/2184264509.html"/>
      <url>/posts/2184264509.html</url>
      
        <content type="html"><![CDATA[<h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><ol><li><p>新建 <code>MAVEN_HOME</code> 系统变量<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210923165336304-965202521.png" alt="image"></p></li><li><p>在 path 中添加 <code>%MAVEN_HOME%\bin</code><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210923165613296-565137145.png" alt="image"></p></li><li><p>检查配置是否成功 CMD 中输入 <code>MVN --version</code><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210923165902178-1075481311.png" alt="image"></p></li></ol><h1 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h1><blockquote><p>maven本地仓库也可以不配置，如果不配置，默认本地仓库地址为<code>C:\Users\Administrator\.m2\repository</code></p></blockquote><ol><li>maven 目录中创建一个文件夹 repository。</li><li>maven/conf/setting.xml 的 <code>&lt;setting&gt;&lt;/setting&gt;</code> 标签中添加本地仓库路径。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Code\App\apache-maven-3.8.2\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210923164959892-778930520.png" alt="image"></p><h1 id="配置国内镜像"><a href="#配置国内镜像" class="headerlink" title="配置国内镜像"></a>配置国内镜像</h1><blockquote><p>接下来我们需要配置maven镜像，如果我们不配置，我们下载jar包是从国外下载的，下载速度很慢，所以我们配置一下国内的阿里云镜像</p></blockquote><ol><li>maven/conf/setting.xml 的 <code>&lt;mirrors&gt;&lt;/mirrors&gt;</code> 标签中增加<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210923170720608-1455441100.png" alt="image"></li></ol><h1 id="Idea-配置"><a href="#Idea-配置" class="headerlink" title="Idea 配置"></a>Idea 配置</h1><p>手动配置 Maven 安装目录和配置文件。</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210923185415444-666155817.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-交换排序算法之快速排序</title>
      <link href="/posts/965695180.html"/>
      <url>/posts/965695180.html</url>
      
        <content type="html"><![CDATA[<h1 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h1><ul><li>交换排序算法描述：比较相邻两个元素大小，如果反序，则交换。</li><li>交换排序算法有两种：冒泡排序和快速排序</li></ul><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>快速排序在数据序列中选择一个元素做为基准值（一般会选择第一个元素或最后一个元素），每趟从数据序列的两端开始交替进行，将小于基准值的元素交换到序列前端，将大于基准值的元素交换到序列的后端，介于两者之间的位置则成为基准值的最终位置。同时，序列被划为两个子序列，在分别对了个子序列进行快速排序，直到子序列的长度为1，则完成排序。</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210923142338592-1415282068.png" alt="image"></p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> begin, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="comment">// 序列有效</span></span><br><span class="line">    <span class="keyword">if</span> (begin &gt;= <span class="number">0</span> &amp;&amp; begin &lt; end &amp;&amp; end &lt; arr.length) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> begin, j = end;  <span class="comment">// begin 为左边最开始的元素的下标;end 为最后一个元素的下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> arr[i]; <span class="comment">// 以第一个的元素为基准</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i != j) &#123; <span class="comment">// 当交叉比较时 左边和右边下标发生重合子运行结束</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= x) &#123; <span class="comment">// 从右边向前寻找较小的值移动，不移动与基准值相等的元素</span></span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                arr[i++] = arr[j];  <span class="comment">// 子序列的后端较小元素向前移动</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= x) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                arr[j--] = arr[i]; <span class="comment">// 子序列前端较大的元素向后移动</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] = x; <span class="comment">// 将基准值放入最终位置</span></span><br><span class="line">        quickSort(arr, begin, j - <span class="number">1</span>); <span class="comment">// 前端子序列再排序，递归调用</span></span><br><span class="line">        quickSort(arr, i + <span class="number">1</span>, end); <span class="comment">// 后端子序列在排序，递归调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java-使用散列映射统计字符出现次数</title>
      <link href="/posts/3075811822.html"/>
      <url>/posts/3075811822.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>要求：需要对一个字符串中字符出现次数进行统计，这里分别使用顺序存储和散列映射存储两种方式统计字符出现次数</p></blockquote><h1 id="散列映射存储（HashMap）"><a href="#散列映射存储（HashMap）" class="headerlink" title="散列映射存储（HashMap）"></a>散列映射存储（HashMap）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String, Integer&gt; <span class="title function_">statisticStrCountMap</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="comment">// 每次截取一个字符 做为关键字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> str.substring(i, i + <span class="number">1</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> map.get(c);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> value != <span class="literal">null</span> ? value : <span class="number">0</span>;</span><br><span class="line">        map.put(c, ++count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="顺序存储（ArrayList）"><a href="#顺序存储（ArrayList）" class="headerlink" title="顺序存储（ArrayList）"></a>顺序存储（ArrayList）</h1><p>查找效率低不推荐使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计字符串出线次数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回一个顺序表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">statisticStrCount</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="comment">// 从第一个字符开始获取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> str.substring(i, i + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 查询是否存在该元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; list.size(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list.get(j).substring(<span class="number">0</span>,<span class="number">1</span>).equals(c)) &#123;</span><br><span class="line">                index = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果存在则 + 1</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> Integer.parseInt(list.get(index).split(<span class="string">&quot;-&gt;&quot;</span>)[<span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">            list.set(index, c + <span class="string">&quot;-&gt;&quot;</span> + number);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 不存在则 添加元素</span></span><br><span class="line">            list.add(c + <span class="string">&quot;-&gt;1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-插入排序算法之希尔排序</title>
      <link href="/posts/927191638.html"/>
      <url>/posts/927191638.html</url>
      
        <content type="html"><![CDATA[<h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><blockquote><p>希尔排序（shell sort）这个排序方法又称为缩小增量排序，是1959年D·L·Shell提出来的。该方法的基本思想是：先将整个待排元素序列分割成若干个子序列（由相隔某个“增量”的元素组成的）分别进行直接插入排序，然后依次缩减增量再进行排序，待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序。因为直接插入排序在元素基本有序的情况下（接近最好情况），效率是很高的。</p></blockquote><p> <img src="https://img2018.cnblogs.com/blog/1469176/201903/1469176-20190325113805282-73705243.png">    </p><p><img src="https://img2018.cnblogs.com/blog/1469176/201903/1469176-20190325113816174-1720842994.gif"></p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>希尔排序算法是有三重循环：</p><ol><li>最外层循环 for 语句以增量 delta 变化控制，进行若干趟排序，delta 初值为序列长度 n / 2，以后每趟减半，直至为1。</li><li>中间 for 语句进行一趟排序，序列分为 delta 组，每组由相距 delta 远的 n / delta 个元素组成，每组元素分别进行直接插入排序。</li><li>最内层循环 for 语句进行一组直接插入排序，将一个元素 keys[i] 插入其中所在的组前面的排序子序列。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 希尔排序排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orderBy [asc 升序，desc降序]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr, String orderBy)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">delta</span> <span class="operator">=</span> arr.length / <span class="number">2</span>; delta &gt; <span class="number">0</span>; delta /= <span class="number">2</span>) &#123; <span class="comment">// 若干趟，控制增量每趟减半</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> delta; i &lt; arr.length; i++) &#123; <span class="comment">// 一趟分若干组，每组进行插入排序</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> arr[i], j; <span class="comment">// x 为当前待插入元素</span></span><br><span class="line">            <span class="comment">// 循环组内直接插入排序，寻找插入位置</span></span><br><span class="line">            <span class="keyword">for</span> (j = i - delta; j &gt;= <span class="number">0</span> &amp;&amp; (orderBy.equals(<span class="string">&quot;asc&quot;</span>) ? x &lt; arr[j] : x &gt; arr[j]); j -= delta) &#123;</span><br><span class="line">                arr[j + delta] = arr[j]; <span class="comment">// 每组元素相距 delta 远</span></span><br><span class="line">            &#125;</span><br><span class="line">            arr[j + delta] = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-交换排序之冒泡排序</title>
      <link href="/posts/98858273.html"/>
      <url>/posts/98858273.html</url>
      
        <content type="html"><![CDATA[<h1 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h1><ul><li>交换排序算法描述：比较相邻两个元素大小，如果反序，则交换。</li><li>交换排序算法有两种：冒泡排序和快速排序</li></ul><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>冒泡排序比较相邻两个元素的大小，如果反序，则交换，若按升序排序，每趟将数据序列中的最大元素交换到最后位置，就像气泡从水里冒出来一样。</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211017213454513-1727704676.gif" alt="image"></p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p><strong>Java实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orderBy [asc 升序，desc降序]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr, String orderBy)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">exchange</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length &amp;&amp; exchange; i++) &#123;</span><br><span class="line">        exchange = <span class="literal">false</span>; <span class="comment">// 是否有交换的信号量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length; j++) &#123;  <span class="comment">// 有交换时再进行下一趟在进行下一趟 最多 n 趟</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            <span class="keyword">if</span> (x &lt; arr[j] &amp;&amp; orderBy.equals(<span class="string">&quot;asc&quot;</span>)) &#123; <span class="comment">// 相临的两个元素进行比较 若反序则交换</span></span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = x;</span><br><span class="line">                exchange = <span class="literal">true</span>; <span class="comment">// 有交换</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; arr[j] &amp;&amp; orderBy.equals(<span class="string">&quot;desc&quot;</span>)) &#123;</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = x;</span><br><span class="line">                exchange = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-插入排序算法之直接插入排序</title>
      <link href="/posts/2192840776.html"/>
      <url>/posts/2192840776.html</url>
      
        <content type="html"><![CDATA[<h1 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h1><p>直接插入排序算法描述如下: 设线性序列是{a<sub>0</sub>,a<sub>1</sub>,…a<sub>i-1</sub>,a<sub>i</sub>,…,a<sub>n-1</sub>}。</p><ol><li>第 <code>i (1 &lt;= i &lt; n)</code>趟，设前 i 个元素构成的{a<sub>0</sub>,a<sub>1</sub>,…,a<sub>i-1</sub>}子序列是排序的，将元素 a<sub>i</sub> 插入 {a<sub>0</sub>,a<sub>1</sub>,…,a<sub>i-1</sub>} 的适当位置，使插入后的子序仍然是排序的，a<sub>i</sub> 的插入位置由关键字比较大小确定的。</li><li>重复执行 1，n个元素共需进行 <code>n - 1</code> 趟排序，每趟将一个元素 a<sub>i</sub> 插入前面的子序列。区别两个关键字相同元素，其中 {} 表示已排序子列。</li></ol><p>时间复杂度 平均情况：<code>O(n^2)</code> 最坏情况：<code>O(n^2)</code>,该情况出现在原序列为逆序情况<br>最好情况：<code>O(n)</code>，出现在已经为升序排列的情况，每次之比较一次即可，共 n - 1 次循环，故为 n - 1<br>稳定性：稳定 </p><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orderBy [asc 升序，desc降序]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr, String orderBy)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123; <span class="comment">// n - 1 趟，依次向前插入 n - 1 个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> arr[i], j; <span class="comment">// 每趟将arr[i]插入到前面的子序列中</span></span><br><span class="line">        <span class="comment">// asc  如果 x 小于前一个元素 执行循环中的代码否则结束循环</span></span><br><span class="line">        <span class="comment">// desc 如果 x 大于前一个元素 执行循环中的代码否则结束循环</span></span><br><span class="line">        <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; (orderBy.equals(<span class="string">&quot;asc&quot;</span>) ? x &lt; arr[j] : x &gt; arr[j]); j--) &#123;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j]; <span class="comment">// 将前面较大/较小的元素向后移动</span></span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + <span class="number">1</span>] = x; <span class="comment">// x 值到达插入位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-二分法查找 (Java 实现)</title>
      <link href="/posts/3949372488.html"/>
      <url>/posts/3949372488.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是二分法查找"><a href="#什么是二分法查找" class="headerlink" title="什么是二分法查找"></a>什么是二分法查找</h1><blockquote><p>二分查找也称折半查找（BinarySearch），它是一种采用分治策略的算法，他将问题分解为规模更小的的子问题，分而治之，逐一解决。采用二分法查找的前提条件是：要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。</p></blockquote><h1 id="二分法查找使用场景"><a href="#二分法查找使用场景" class="headerlink" title="二分法查找使用场景"></a>二分法查找使用场景</h1><blockquote><p>二分法查找适用于数据量较大时，但是数据需要先排好顺序。对于我们很多人来说，还是用于面试……</p></blockquote><h1 id="二分法查找算法设计"><a href="#二分法查找算法设计" class="headerlink" title="二分法查找算法设计"></a>二分法查找算法设计</h1><p>设排序元素序列（升序）存储在 arrs 数组，begin、end 指定查找范围，keyword 是指定查找的值。</p><ol><li>每次从子序列中间 mid 开始比较 <code>mid = (begin + end) / 2</code>，如果 keyword 与 arrs[mid] 元素相等，则查找成功；否则根据根据 keyword 大小缩小查找范围，若 keyword 较小，则继续在子序列前半段 <code>begin ~ (mid - 1)</code> 查找；反之在后半段 <code>(mid - 1) ~ end</code>查找。 </li><li>重复 1，直到查找成功，当 begin、end 表示范围失效时，返回 -1 表示查找失败。</li></ol><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>最快：<code>O(1)</code><br>最坏：<code>O(logn)</code><br>平均时间复杂度：<code>O(logn)</code></p><h1 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h1><h2 id="循环实现"><a href="#循环实现" class="headerlink" title="循环实现"></a>循环实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分查找</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> -1 则查找失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">begin</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span> (begin &lt;= end) &#123; <span class="comment">// 边界有效</span></span><br><span class="line">        mid = (begin + end) / <span class="number">2</span>; <span class="comment">// 计算中界</span></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == value) &#123; <span class="comment">// 如果两个值相等</span></span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; arr[mid]) &#123; <span class="comment">// value 较小</span></span><br><span class="line">            begin = mid + <span class="number">1</span>; <span class="comment">//</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// value 较大</span></span><br><span class="line">            end = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归实现二分法查找</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr   [排序完成的线性表]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value [查找的元素]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> begin [从第几个元素开始]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> end   [数组长度 - 1]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> -1 则查找失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> value, <span class="type">int</span> begin, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (begin + end) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 无效边界</span></span><br><span class="line">    <span class="keyword">if</span> (begin &gt; end) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arr[mid] == value) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; arr[mid]) &#123; <span class="comment">// value 较小 </span></span><br><span class="line">        begin = mid + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        end = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> binarySearch(arr, value, begin, end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-Java实现字符串的反转三种方式</title>
      <link href="/posts/1843661882.html"/>
      <url>/posts/1843661882.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用-chatAt-方法"><a href="#使用-chatAt-方法" class="headerlink" title="使用 chatAt() 方法"></a>使用 chatAt() 方法</h1><blockquote><p>利用 String 的 CharAt 方法取出字符串中的各个字符</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现字符串的反转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">new_str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> str.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        new_str.append(str.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new_str.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="转为数组后拼接字符串"><a href="#转为数组后拼接字符串" class="headerlink" title="转为数组后拼接字符串"></a>转为数组后拼接字符串</h1><blockquote><p>利用 String 的 toCharArray 方法先将字符串转化为 char 类型数组，然后将各个字符进行重新拼接。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现字符串的反转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="comment">// 将字符串转为 char 类型数组</span></span><br><span class="line">    <span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">new_str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="comment">// 从右到左重新拼接</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> chars.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        new_str.append(chars[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new_str.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="StringBuilder-中的-reverse-成员方法"><a href="#StringBuilder-中的-reverse-成员方法" class="headerlink" title="StringBuilder 中的 reverse 成员方法"></a>StringBuilder 中的 reverse 成员方法</h1><blockquote><p>利用 StringBuffer 或 StringBuilder 的 reverse 成员方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现字符串的反转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">new_str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(str);</span><br><span class="line">    <span class="keyword">return</span> new_str.reverse().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Josephus 约瑟夫环问题图解</title>
      <link href="/posts/2676609396.html"/>
      <url>/posts/2676609396.html</url>
      
        <content type="html"><![CDATA[<h1 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h1><ol><li><p>古代某法官要判决 n 个犯人死刑，他有一条荒唐的逻辑，将犯人首尾的相接排成圆圈，然后从第 start 开始数起，每数到第 distance 个犯人，就拉出来处决；然后又数 distance 个，数到的犯人又拉出来处决，依次类推。剩下的最后一人可以豁免。</p></li><li><p>一群猴子排成一圈，按1，2，…，n依次编号。然后从第 start 只开始数，数到第 distance 只，把它踢出圈，从它后面再开始数，再数到第 distance 只，在把它踢出去…，如此不停的进行下去，直到最后只剩下一只猴子为止，那只猴子就叫做大王。 </p></li></ol><h1 id="题意说明"><a href="#题意说明" class="headerlink" title="题意说明"></a>题意说明</h1><blockquote><p>采用线性表标记 n 个人，设 n = 5, start = 1, distance = 3, 5 个人分别标记为 A B C D E， <code>josephus(5,1,3)</code> 环问题的求解过程如图：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210920140213263-1706701868.jpg" alt="image"></p><h1 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h1><blockquote><p>求解 Josephus 环问题， n个人，从 start 开始计数，每次数到 distance 的人出环</p></blockquote><h1 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n        n 个人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> start    从 start 开始计数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> distance 每次数到 distance的人出环</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int 最后的结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">josephus</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> start, <span class="type">int</span> distance)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span> || start &lt; <span class="number">0</span> || start &gt;= n || distance &lt;= <span class="number">0</span> || distance &gt;= n) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;参数异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建一个线性表对象 List 集合并插入从 1 开始的 n 个元素</span></span><br><span class="line">    ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        arr.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// start 循环计数到 distance, 第 start 个元素出环即删除，其后若干元素向前移动一位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.size();</span><br><span class="line">        <span class="comment">// 计算出下一次出环的人 (当前计数 + 每次数的数量 - 1) % 当前人数  O(n)</span></span><br><span class="line">        <span class="comment">// start 本指向上一次出环的元素，但出环后元素全部向前移动一位，start 也将指向下一为元素，所以需要减一</span></span><br><span class="line">        start = (start + distance - <span class="number">1</span>) % n;</span><br><span class="line">        arr.remove(start);</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-JDBC配置和使用</title>
      <link href="/posts/1115217775.html"/>
      <url>/posts/1115217775.html</url>
      
        <content type="html"><![CDATA[<h1 id="下载-JDBC-Jar包"><a href="#下载-JDBC-Jar包" class="headerlink" title="下载 JDBC Jar包"></a>下载 JDBC Jar包</h1><blockquote><p>Mysql JDBC 地址：<a href="https://dev.mysql.com/downloads/connector/j/">https://dev.mysql.com/downloads/connector/j/</a></p></blockquote><ul><li>选择 Platform Independent 下载并解压得到 .jar 包，放入自己 Jar 文件夹中<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210912185450774-1525732269.png" alt="image"></li></ul><h1 id="将-Jar-库导入到-Idea"><a href="#将-Jar-库导入到-Idea" class="headerlink" title="将 Jar 库导入到 Idea"></a>将 Jar 库导入到 Idea</h1><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210912185911833-1998867365.png" alt="image"></p><h1 id="注册驱动并获取连接"><a href="#注册驱动并获取连接" class="headerlink" title="注册驱动并获取连接"></a>注册驱动并获取连接</h1><blockquote><p>从JBC3开始,目前已经普遍使用的版本。可以不用注册驱动而直接使用。<br><code>Class.forName</code>这句话可以省略。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册驱动 从JDBC3开始这步可以省略</span></span><br><span class="line"><span class="comment">// mysql8 需要cj包中的驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>获得连接</strong></p><ul><li>Connection 接口，代表一个连接对像具体的实现类由数据库的厂商实现。</li><li>使用 DriverManage r类的静态方法 getConnection() 可以获取数据库的连接。<table><thead><tr><th>获取连接的静态方法</th><th>说明</th></tr></thead><tbody><tr><td>Connection getConnection(String url, String user, String password)</td><td>通过连接字符串和用户名,密码来获取数据库连接对象</td></tr></tbody></table></li></ul><ol><li><p>getConnection 方法 3 个连接参数说明</p><table><thead><tr><th>连接参数</th><th>说明</th></tr></thead><tbody><tr><td>user</td><td>登录用户名</td></tr><tr><td>password</td><td>登录密码</td></tr><tr><td>url</td><td>mySql URL的格式<br>jdbc: mysql: //localhost: 3306/db4</td></tr></tbody></table></li><li><p>JDBC URl 详细说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql://localhost:3306/demo?characterEncoding=UTF-8</span><br></pre></td></tr></table></figure></li></ol><ul><li>JDBC规定ur的格式由三部分组成,每个部分中间使用冒号分隔。<ul><li>第一部分是协议jdbc&lt;这是固定的;</li><li>第二部分是子协议,就是数据库名称,连接mysq数据库,第二部分当然是 mysql了</li><li>第三部分是由数据库厂商规定的,我们需要了解每个数据库厂商的要求,mysq的第三部分分别    由数据库服务器的IP地址( localhost)、端口号(3306),以及要使用的数据库名称组成。</li></ul></li></ul><ol start="3"><li>获取连接 Connection 对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取连接 connection 连接对象</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/demo?characterEncoding=UTF-8&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;000&quot;</span>);</span><br><span class="line">System.out.println(connection);</span><br></pre></td></tr></table></figure><h1 id="获取语句执行对象-Statement"><a href="#获取语句执行对象-Statement" class="headerlink" title="获取语句执行对象 Statement"></a>获取语句执行对象 Statement</h1><ul><li>Statement:代表一条语句对象,用于发送SQL语句给服务器,用于执行静态SQL句并返回它所生成结果的对象。</li></ul><h2 id="Statement-类常用方法"><a href="#Statement-类常用方法" class="headerlink" title="Statement 类常用方法"></a>Statement 类常用方法</h2><table><thead><tr><th>方法声明</th><th>说明</th></tr></thead><tbody><tr><td>executeUpdate(String sql)</td><td>执行 insert update delete语句返回nt类型代表受影响的行数</td></tr><tr><td>ResultSet executeQuery(String sql);</td><td>执行 select 语句,返回 Resultset 结果集对象</td></tr></tbody></table><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 statement 对象</span></span><br><span class="line">statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 Statement 对象的 executeUpdate 方法创建一张表</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;create table test(id int,name varchar(10),age int);&quot;</span>;</span><br><span class="line"><span class="comment">// int count = statement.executeUpdate(sql); // 受影响行数 0</span></span><br><span class="line"><span class="comment">// System.out.println(count);</span></span><br><span class="line"></span><br><span class="line">sql = <span class="string">&quot;select * from test&quot;</span>;</span><br><span class="line"><span class="comment">// 执行查询操作  ResultSet是结果集对象</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br></pre></td></tr></table></figure><h1 id="ResultSet-结果集对象"><a href="#ResultSet-结果集对象" class="headerlink" title="ResultSet 结果集对象"></a>ResultSet 结果集对象</h1><blockquote><p>作用：封装数据库查询的结果对结果集进行遍历,取出每一条记录。</p></blockquote><table><thead><tr><th>常用方法</th><th>说明</th></tr></thead><tbody><tr><td>boolean next()</td><td>1)游标向下一行<br>2)返回 boolean类型,如果还有下一条记录,返回true,否则返回 false</td></tr><tr><td>xxx getXxx( String or int)</td><td>1)通过列名,参数是 String类型。返回不同的类型<br>2)通过列号,参数是整数,从1开始。返回不同的类型</td></tr></tbody></table><ul><li>处理结果集<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from test&quot;</span>;</span><br><span class="line"><span class="comment">// 执行查询操作  ResultSet是结果集对象</span></span><br><span class="line">resultSet = statement.executeQuery(sql);</span><br><span class="line"><span class="comment">// resultSet.next() 获取下一条结果集</span></span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">    System.out.println(resultSet.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="预处理对象"><a href="#预处理对象" class="headerlink" title="预处理对象"></a>预处理对象</h1><h2 id="PreparedStatement-接口介绍"><a href="#PreparedStatement-接口介绍" class="headerlink" title="PreparedStatement 接口介绍"></a>PreparedStatement 接口介绍</h2><ul><li>PreparedStatement是 Statement 接口的子接口，继承于父接口中所有的方法。它是一个预编译的SQL语句对象</li><li>预编译：是指SαL语句被预编译并存储在 PreparedStatement对象中。然后可以使用此对象多次髙效地执行该语句。<h2 id="Preparedstatement-特点"><a href="#Preparedstatement-特点" class="headerlink" title="Preparedstatement 特点"></a>Preparedstatement 特点</h2></li><li>因为有预先编译的功能,提高SQL的执行效率。</li><li>可以有效的防止SQL注入的问题,安全性更高<h2 id="获取-Preparedstatemen对象"><a href="#获取-Preparedstatemen对象" class="headerlink" title="获取 Preparedstatemen对象"></a>获取 Preparedstatemen对象</h2></li><li>通过 Connection创建 PreparedStatemen对象<table><thead><tr><th>Connection中的方法</th><th>说明</th></tr></thead><tbody><tr><td>PreparedStatement prepare Statement(String sql)</td><td>指定预编译的SQL语句,<br>SQL语句中使用占位符?创建一个语句对象</td></tr></tbody></table></li></ul><h1 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h1><ul><li>我们使用 Connection中的方法实现事务管理<table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void setAutoCommit(boolean autoCommit)</td><td>参数是true或fase如果设置为fase,表示关闭自动提交,相当于开启事务</td></tr><tr><td>void commit()</td><td>提交事务</td></tr><tr><td>void rollback()</td><td>回滚事务</td></tr></tbody></table></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-反射机制</title>
      <link href="/posts/3573906879.html"/>
      <url>/posts/3573906879.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ul><li>通常情况下编写代码都是固定的，无论运行多少次执行的结果也是固定的，在某些特殊场合中编写代码时不确定要创建什么类型的对象，也不确定要调用什么样的方法，这些都希望通过运行时传递的参数来决定，该机制叫做动态编程技术，也就是反射机制。</li><li>通俗来说，反射机制就是用于动态创建对象并且动态调用方法的机制。</li><li>目前主流的框架底层都是采用反射机制实现的。</li><li>如：<br>  Person p= new Person(); //表示声明 Person类型的引用指向 Person类型的对象<br>  p.show(); // 表示调用 Person类中的成员方法show</li></ul><h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><h2 id="甚本概念"><a href="#甚本概念" class="headerlink" title="甚本概念"></a>甚本概念</h2><ul><li><code>java.lang.Class</code>类的实例可以用于描述java应用程序中的类和接口，也就是一种数据类型。</li><li>该类没有公共构造方法，该类的实例由java虚拟机和类加载器自动构造完成，本质上就是加载到内存中的运行时类。<h2 id="获取-Class对象的方式"><a href="#获取-Class对象的方式" class="headerlink" title="获取 Class对象的方式"></a>获取 Class对象的方式</h2></li><li>使用数据类型<code>.class</code>的方式可以获取对应类型的 Class对象</li><li>使用引用/对象<code>.getClass()</code>的方式可以获取对应类型的Class对象。</li><li>使用包装类<code>.TYPE</code>的方式可以获取对应基本数据类型的Class对象</li><li>使用 <code>Class.forName</code> 的方式来获取参数指定类型的Class象</li><li>使用类加载器 <code>ClassLoader</code> 的方式获取指定类型的Class对象</li></ul><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>static Class&lt; ? &gt; forName(String className)</td><td>用于获取参数指定类型对应的class对象并返回</td></tr><tr><td>T newInstance()</td><td>(已过时 请使用Constructor类)用于创建该Cass对象所表示类的新实例</td></tr></tbody></table><h1 id="Constructor类"><a href="#Constructor类" class="headerlink" title="Constructor类"></a>Constructor类</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><code>java.lang.reflect.Constructor</code>类主要用于描述获取到的构造方法信息。<h2 id="Class类的常用方法"><a href="#Class类的常用方法" class="headerlink" title="Class类的常用方法"></a>Class类的常用方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>Constructor&lt; T &gt; getConstructor( Class&lt; ? &gt;…parrmeterTypes)</td><td>用于获取此Class对象所表示类型中参数指定的公共构造方法</td></tr><tr><td>Constructor&lt; ? &gt; [] getConstructors()</td><td>用于获取此Class对象所表示类型中所有的公共构造</td></tr></tbody></table></li></ul><h2 id="Constructor类的常用方法"><a href="#Constructor类的常用方法" class="headerlink" title="Constructor类的常用方法"></a>Constructor类的常用方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>T newInstance(object…initargs)</td><td>使用此 Constructor对象描述的构造方法来构造Cass对象代表类型的新实例</td></tr><tr><td>int getModifiers()</td><td>获取方法的访问修饰符</td></tr><tr><td>String getName()</td><td>获取方法的名称</td></tr><tr><td>Class&lt; ? &gt;[] getParameterType()</td><td>获取方法所有参数的类型</td></tr></tbody></table><h1 id="使用反射机制创建实例"><a href="#使用反射机制创建实例" class="headerlink" title="使用反射机制创建实例"></a>使用反射机制创建实例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 文件字节输入流</span></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./config.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 将文件字节输入流转换为 Reader 输入流</span></span><br><span class="line">            isr = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis);</span><br><span class="line">            <span class="comment">// 使用字符缓冲加载输入流</span></span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">            <span class="comment">// 获取配置文件第一行</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">            <span class="comment">// 将配置文件中的类动态加载</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">forName</span> <span class="operator">=</span> Class.forName(line);</span><br><span class="line">            System.out.println(<span class="string">&quot;动态加载的类为：&quot;</span> + forName); <span class="comment">// class task4.reflect.Person</span></span><br><span class="line">            <span class="comment">// 获取Class对象的无参构造方法，也就是Person的无参构造方法</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> forName.getConstructor();</span><br><span class="line">            <span class="comment">// 使用获取到的无参构造方法构造相应类型的对象也就是Person类型的对象</span></span><br><span class="line">            System.out.println(<span class="string">&quot;使用无参构造的对象是：&quot;</span> + constructor.newInstance());</span><br><span class="line">            <span class="comment">// 通过有参构造获取对象 按传入参数选择对应的构造</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> forName.getConstructor(<span class="type">int</span>.class, String.class);</span><br><span class="line">            System.out.println(<span class="string">&quot;使用有参构造获取到的对象是：&quot;</span> + constructor1.newInstance(<span class="number">10</span>,<span class="string">&quot;feng&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != fis) &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != isr) &#123;</span><br><span class="line">                    isr.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != br) &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Field-类"><a href="#Field-类" class="headerlink" title="Field 类"></a>Field 类</h1><h2 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h2><p><code>java.lang.reflect.Field</code>类主要用于描述获取到的单个成员变量信息。</p><h2 id="Class类的常用方法-1"><a href="#Class类的常用方法-1" class="headerlink" title="Class类的常用方法"></a>Class类的常用方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>Field getDeclaredField(String name)</td><td>用于获取此Cas对所表示类中参数指定的单个成员变量信息</td></tr><tr><td>Field getDeclaredFields()</td><td>用于获取此Class对象所表示类中所有成员变量信息</td></tr></tbody></table><h2 id="Field类的常用方法"><a href="#Field类的常用方法" class="headerlink" title="Field类的常用方法"></a>Field类的常用方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>Object get(Object obj)</td><td>取参数对象Object中此Field对象所表示成员变量的数值</td></tr><tr><td>void set(Object obj, Object value)</td><td>将参数对象Object中此Field对象表示成员变量的数值修改为参数vlaue的数值</td></tr><tr><td>void setAccessible(boolean flag)</td><td>当实参传通true时，则反射对象在使用时应该取消Java语言访问检查</td></tr><tr><td>int getModifiers()</td><td>获取成员变量的访问修饰符</td></tr><tr><td>Class&lt; ? &gt; getType()</td><td>获取成员变量的数据类型</td></tr><tr><td>String getName()</td><td>取成员变量的名称</td></tr></tbody></table><h2 id="获取和修改成员变量"><a href="#获取和修改成员变量" class="headerlink" title="获取和修改成员变量"></a>获取和修改成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 文件字节输入流</span></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./config.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 将文件字节输入流转换为 Reader 输入流</span></span><br><span class="line">            isr = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis);</span><br><span class="line">            <span class="comment">// 使用字符缓冲加载输入流</span></span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">            <span class="comment">// 获取配置文件第一行</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">            <span class="comment">// 将配置文件中的类动态加载</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">forName</span> <span class="operator">=</span> Class.forName(line);</span><br><span class="line">            <span class="comment">// 通过有参构造获取对象 按传入参数选择对应的构造</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> forName.getConstructor(<span class="type">int</span>.class, String.class);</span><br><span class="line">            System.out.println(<span class="string">&quot;使用有参构造获取到的对象是：&quot;</span> + constructor1.newInstance(<span class="number">10</span>, <span class="string">&quot;feng&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 有参构造创建对象</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> constructor1.newInstance(<span class="number">10</span>, <span class="string">&quot;feng&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取成员变量</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> forName.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取对象 object 中名字为 filed 的数值，也就是成员变量name中的值</span></span><br><span class="line">            <span class="comment">// 如果是private没有权限访问 异常,需要反射时调用setAccessible(true);取消java访问检查</span></span><br><span class="line">            field.setAccessible(<span class="literal">true</span>); <span class="comment">// 取消 java 访问检查</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">v</span> <span class="operator">=</span> field.get(object);</span><br><span class="line">            System.out.println(<span class="string">&quot;获取到成员变量的值为：&quot;</span> + v);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 修改成员变量</span></span><br><span class="line">            field.set(object, <span class="string">&quot;li&quot;</span>);</span><br><span class="line">            v = field.get(object);</span><br><span class="line">            System.out.println(<span class="string">&quot;修改后的成员变量值为：&quot;</span> + v);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != fis) &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != isr) &#123;</span><br><span class="line">                    isr.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != br) &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h1><h2 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h2><p><code>java.lang.reflect.Method</code>类主要用于描述获取到的个成员方法信息。</p><h2 id="Class类的常用方法-2"><a href="#Class类的常用方法-2" class="headerlink" title="Class类的常用方法"></a>Class类的常用方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>Method getMethod(String name, Class&lt; ? &gt;…parameterTypes)</td><td>用于获取该Class对象表示类中名字为name参数为parameterTypes的指定公共成员方法</td></tr><tr><td>Method getMethods()</td><td>用于获取该Cass对象表示类中所有公共成员方法</td></tr></tbody></table><h2 id="Method类的常用方法"><a href="#Method类的常用方法" class="headerlink" title="Method类的常用方法"></a>Method类的常用方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>Object invoke(Object obj, Object…args)</td><td>使用对象obj来调用此 Method对象所表示的成员方法,实参传递args</td></tr><tr><td>int getModifiers()</td><td>获取方法的访问修饰符</td></tr><tr><td>Class&lt; ? &gt; getReturnType()</td><td>获取方法的返回值类型</td></tr><tr><td>String getName()</td><td>获取方法的名称</td></tr><tr><td>Class&lt; ? &gt; getParameterTypes()</td><td>获取方法所有参数的类型</td></tr><tr><td>Class&lt; ? &gt; getExceptionTypes()</td><td>获取方法的异常信息</td></tr></tbody></table><h2 id="获取方法及调用方法"><a href="#获取方法及调用方法" class="headerlink" title="获取方法及调用方法"></a>获取方法及调用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 文件字节输入流</span></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./config.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 将文件字节输入流转换为 Reader 输入流</span></span><br><span class="line">            isr = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis);</span><br><span class="line">            <span class="comment">// 使用字符缓冲加载输入流</span></span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">            <span class="comment">// 获取配置文件第一行</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">            <span class="comment">// 将配置文件中的类动态加载</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">forName</span> <span class="operator">=</span> Class.forName(line);</span><br><span class="line">            <span class="comment">// 通过有参构造获取对象 按传入参数选择对应的构造</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> forName.getConstructor(<span class="type">int</span>.class, String.class);</span><br><span class="line">            System.out.println(<span class="string">&quot;使用有参构造获取到的对象是：&quot;</span> + constructor1.newInstance(<span class="number">10</span>, <span class="string">&quot;feng&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 有参构造创建对象</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> constructor1.newInstance(<span class="number">10</span>, <span class="string">&quot;feng&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取方法有参方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">setName</span> <span class="operator">=</span> forName.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">            <span class="comment">// 获取无参方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> forName.getMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">            <span class="comment">// 调用方法</span></span><br><span class="line">            setName.invoke(object, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> getName.invoke(object);</span><br><span class="line">            System.out.println(<span class="string">&quot;获取到的值为：&quot;</span> + invoke);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != fis) &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != isr) &#123;</span><br><span class="line">                    isr.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != br) &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取其它结构信息"><a href="#获取其它结构信息" class="headerlink" title="获取其它结构信息"></a>获取其它结构信息</h1><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>Package getPackage()</td><td>获取所在的包信息</td></tr><tr><td>Class&lt; ? super T &gt; getSuperClass()</td><td>获取继承的父类信息</td></tr><tr><td>Class&lt; ? &gt;[] getInterfaces()</td><td>获取实现的所有接口</td></tr><tr><td>Annotation[] getAnnotations()</td><td>获取注解信息</td></tr><tr><td>Type[] getGenericInterfaces()</td><td>获取泛型信息</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-网络编程TCP和UDP</title>
      <link href="/posts/2329604403.html"/>
      <url>/posts/2329604403.html</url>
      
        <content type="html"><![CDATA[<h1 id="七层网络模型"><a href="#七层网络模型" class="headerlink" title="七层网络模型"></a>七层网络模型</h1><ul><li><p>OSI(Open System Interconnect)，即开放式系统互联，是ISO(国际标准化组织)组织在1985年研究的网络互联模型。</p></li><li><p>OSI七层模型和TCP/P五层划分如下：<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/image-20220115231540247.png" alt="image-20220115231540247"></p></li><li><p>当发送数据时，需要对发送的内容按照上述七层模型进行层层加包后发送出去</p></li><li><p>当接收数据时，需要对接收的内容按照上述七层模型相反的次序层层拆包并显示出来。</p></li></ul><h1 id="相关的协议"><a href="#相关的协议" class="headerlink" title="相关的协议"></a>相关的协议</h1><h2 id="协议的概念"><a href="#协议的概念" class="headerlink" title="协议的概念"></a>协议的概念</h2><blockquote><p>计算机在网络中实现通信就必须有一些约定或者规则，这种约定和规则就叫做通信协议，通信协议可以对速率、传输代码、代码结构、传输控制步骤、岀错控制等制定统-的标准。</p></blockquote><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><ul><li>传输控制协议（Transmission Control Protoco)，是一种面向连接的协议，类似于打电话。<ul><li>建立连接 =&gt; 进行通信 =&gt; 断开连接</li><li>在传输前采用”三次握手”方式。</li><li>在通信的整个过程中全程保持连接，形成数据传输通道。</li><li>保证了数据传翰的可靠性和有序性。</li><li>是一种全双工的字节流通信方式，可以进行大数据量的传输。</li><li>传输完毕后需要释放已建立的连接，发送数据的效率比较低。</li></ul></li></ul><h3 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h3><blockquote><p>为什么需要三次握手？<br>在通信的整个过程中全程保持连接，形成数据传输通道。并保证了数据传翰的可靠性和有序性</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210910161224616-1763929585.png" alt="image"></p><h2 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h2><ul><li>用户数据报协议( User Datagram Protocol)，是一种非面向连接的协议，类似于写信。<ul><li>在通信的整个过程中不需要保持连接，其实是不需要建立连接。</li><li>不保证数据传输的可靠性和有序性。</li><li>是一种全双工的数据报通信方式，每个数据报的大小限制在64K内。</li><li>发送数据完毕后无需释放资源，开销小，发送数据的效率比较高，速度快。</li></ul></li></ul><h1 id="基于-tcp-协议的编程模型"><a href="#基于-tcp-协议的编程模型" class="headerlink" title="基于 tcp 协议的编程模型"></a>基于 tcp 协议的编程模型</h1><h2 id="C-S架构的简介"><a href="#C-S架构的简介" class="headerlink" title="C/S架构的简介"></a>C/S架构的简介</h2><ul><li>在CS模式下客户向服务器发出服努请求，服务器接收请求后提供服。</li><li>例如：在一个酒店中，顾客想服务员点菜服务员把点菜单通知厨师，厨师按点菜单做好菜后让服务员端给客户，这就是一种C/S工作方式。如果把酒店看作一个系统，服务员就是客户端，厨师就是服务器。这种系统分工和协同工作的方式就是C/S的工作方式。</li><li>客户端部分:为每个用户所专有的，负责执行前台功能。</li><li>服务器部分:由多个用户共享的信息与功能，招待后台服务。</li></ul><h2 id="编程模型"><a href="#编程模型" class="headerlink" title="编程模型"></a>编程模型</h2><ul><li>服务端<ol><li>创建 ServerSocket 类型的对象并提供端口号;</li><li>等待客户端的连接请求，调用 accept() 方法;</li><li>使用输入输出流进行通信;</li><li>关闭 Socke;</li></ol></li><li>客户端<ol><li>创建 Socket 类型的对象并提供服务器的P地址和端口号;</li><li>使用输入输出流进行通信;</li><li>关闭 Socket;</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210910171059654-552832220.png" alt="image"></p><h2 id="相关类和方法的解析"><a href="#相关类和方法的解析" class="headerlink" title="相关类和方法的解析"></a>相关类和方法的解析</h2><h3 id="ServerSocket类"><a href="#ServerSocket类" class="headerlink" title="ServerSocket类"></a>ServerSocket类</h3><ul><li><code>java.net.ServerSocket</code>类主要用于描述服务器套接字信息(大插排)。</li><li>常用的方法如下：</li></ul><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>ServerSocket(int port)</td><td>参数指定的端口号来构造对象</td></tr><tr><td>Socket accept()</td><td>侦听并接收到此套接字的连接请求</td></tr><tr><td>void close()</td><td>用于关闭套接字</td></tr></tbody></table><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>客户端 Socket 与服务器端 Socket 对应，都包含输入和输出流。</li><li>客户端的 socket.getlnputstream()连接于服务器 socket.getOutputStream()</li><li>客户端的 socket.getOutputStream()连接于服务器 socket.getInputStream()</li></ul><h2 id="服务器和客户端的连接"><a href="#服务器和客户端的连接" class="headerlink" title="服务器和客户端的连接"></a>服务器和客户端的连接</h2><ul><li><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerSocketTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建ServerSocket对象并提供端口号</span></span><br><span class="line">            ss = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;等待客户端连接...&quot;</span>);</span><br><span class="line">            <span class="comment">// 当没有客户端连接时，则服务器阻塞在accept方法调用</span></span><br><span class="line">            socket = ss.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端连接成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != ss) &#123;</span><br><span class="line">                    ss.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != socket) &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">- 客户端：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">    import java.io.IOException;</span><br><span class="line">    import java.net.Socket;</span><br><span class="line">    </span><br><span class="line">    public class ClientServerTest &#123;</span><br><span class="line">        public static void main(String[] args) &#123;</span><br><span class="line">            Socket socket = null;</span><br><span class="line">    </span><br><span class="line">            try &#123;</span><br><span class="line">                // 创建Socket对象并提供服务器ip和端口号</span><br><span class="line">                socket = new Socket(&quot;127.0.0.1&quot;, 8888);</span><br><span class="line">                // 使用输入输出流进行通讯</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;finally &#123;</span><br><span class="line">                if (null != socket) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        socket.close();</span><br><span class="line">                    &#125; catch (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="服务端与客户端通信"><a href="#服务端与客户端通信" class="headerlink" title="服务端与客户端通信"></a>服务端与客户端通信</h2><ul><li>服务端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerSocketTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建ServerSocket对象并提供端口号</span></span><br><span class="line">            ss = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;等待客户端连接...&quot;</span>);</span><br><span class="line">            <span class="comment">// 当没有客户端连接时，则服务器阻塞在accept方法调用</span></span><br><span class="line">            socket = ss.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端连接成功！&quot;</span>);</span><br><span class="line">            <span class="comment">// 使用输入输出流进行通讯</span></span><br><span class="line">            <span class="comment">// 将InputStream 转换为 Reader</span></span><br><span class="line">            isr = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream());</span><br><span class="line">            <span class="comment">// 使用缓冲流读取数据</span></span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">            <span class="comment">// 输出流</span></span><br><span class="line">            ps = <span class="keyword">new</span> <span class="title class_">PrintStream</span>(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">            scanner = <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 接收一行消息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到客户端发送过来的数据：&quot;</span> + s);</span><br><span class="line">                System.out.print(<span class="string">&quot;请输入你要发送的消息：&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">                <span class="keyword">if</span> (message.equalsIgnoreCase(<span class="string">&quot;exit&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;聊天已结束&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ps.println(message);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != br) &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != isr) &#123;</span><br><span class="line">                    isr.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != ps) &#123;</span><br><span class="line">                    ps.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != ss) &#123;</span><br><span class="line">                    ss.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != socket) &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != scanner) &#123;</span><br><span class="line">                scanner.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>客户端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientServerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建Socket对象并提供服务器ip和端口号</span></span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">            <span class="comment">// 输出流</span></span><br><span class="line">            ps = <span class="keyword">new</span> <span class="title class_">PrintStream</span>(socket.getOutputStream());</span><br><span class="line">            <span class="comment">// 将输入流转换为 Reader 类型</span></span><br><span class="line">            isr = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream());</span><br><span class="line">            <span class="comment">// 使用缓冲流读取数据</span></span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;请输入你要发送的信息：&quot;</span>);</span><br><span class="line">                scanner = <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">                <span class="keyword">if</span> (message.equalsIgnoreCase(<span class="string">&quot;exit&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 使用输入输出流进行通讯</span></span><br><span class="line">                <span class="comment">// 向客户端发送字符串</span></span><br><span class="line">                ps.println(message);</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端发送数据内容成功！&quot;</span>);</span><br><span class="line">                <span class="comment">// 接收服务端发过来的内容</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到服务端发送过来的数据：&quot;</span> + str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != br) &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != isr) &#123;</span><br><span class="line">                    isr.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != scanner) &#123;</span><br><span class="line">                    scanner.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != socket) &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != ps) &#123;</span><br><span class="line">                    ps.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="基于udp协议的编程模型-熟悉"><a href="#基于udp协议的编程模型-熟悉" class="headerlink" title="基于udp协议的编程模型(熟悉)"></a>基于udp协议的编程模型(熟悉)</h1><h2 id="编程模型-1"><a href="#编程模型-1" class="headerlink" title="编程模型"></a>编程模型</h2><ul><li>接收方<ol><li>创健 Datagram Socket类型的对象并提供端口号</li><li>创建 Datagram Packet类型的对象并提供缓冲区</li><li>通过 Socket接收数据内容存放到 Packet中,调用 receive方法</li><li>关闭 Socket</li></ol></li><li>发送方<ol><li>创建 DatagramSocket类型的对象</li><li>创建 DatagramPacket类型的对象并提供接收方的通信地址</li><li>通过 Socket将 Packet中的数据内容发送出去,调用send方法</li><li>关闭 Socket</li></ol></li></ul><h2 id="相关类和方法的解析-1"><a href="#相关类和方法的解析-1" class="headerlink" title="相关类和方法的解析"></a>相关类和方法的解析</h2><h3 id="Datagram-Socket类"><a href="#Datagram-Socket类" class="headerlink" title="Datagram Socket类"></a>Datagram Socket类</h3><p><code>java.net.DatagramSocket</code>类主要用于描述发送和接收数据报的套接字(邮局)<br>换句话说,该类就是包裹投递服务的发送或接收点.</p><ul><li>常用的方法如下:</li></ul><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>DatagramSocket()</td><td>使用无参的方式构造对象</td></tr><tr><td>DatagramSocket(int port)</td><td>根据参数指定的端口号来构造对象</td></tr><tr><td>void receive(DatagramPacket p)</td><td>用于接收数据报存放到参数指定的位置</td></tr><tr><td>void send(DatagramPacket p)</td><td>用于将参数指定的数据报发送出去</td></tr><tr><td>void close()</td><td>关闭 Socket并释放相关资源</td></tr></tbody></table><h3 id="DatagramPacke类"><a href="#DatagramPacke类" class="headerlink" title="DatagramPacke类"></a>DatagramPacke类</h3><ul><li><code>java.net.DatagramPacket</code>类主要用于描述数据报，数据报用来实现无连接包裹投递服务。</li><li>常用的方法如下：</li></ul><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>DatagramPacket(byte[] buf, int length)</td><td>根据参数指定的数组来构造对象,用于接收长度为 length的数据报</td></tr><tr><td>DatagramPacket(byte[] buf, int length, InetAddress address, int port)</td><td>根据参数指定数组来构造对象,将数据报发送到指定地址和端口</td></tr><tr><td>InetAddress getAddress()</td><td>用于获取发送方或接收方的通信地址</td></tr><tr><td>int gbtPort()</td><td>用于获取发送方或接收方的端口号</td></tr><tr><td>int getLength()</td><td>用于获取发送数据或接收数据的长度</td></tr></tbody></table><h3 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h3><ul><li><code>java.net.InetAddress</code>类主要用于描述互联网通信地址信息。</li><li>常用的方法如下：</li></ul><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>static InetAddress getLocalHost()</td><td>用于获取当前主机的通信地址</td></tr><tr><td>static InetAddress getByName(String host)</td><td>根据参数指定的主机名获取通信地址</td></tr></tbody></table><h2 id="UDP-通信实现"><a href="#UDP-通信实现" class="headerlink" title="UDP 通信实现"></a>UDP 通信实现</h2><ul><li>发送方</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送方</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建 DatagramSocket 对象不需要提供端口号</span></span><br><span class="line">            ds = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">            <span class="comment">// 将字符串转换成byte的数组</span></span><br><span class="line">            <span class="type">byte</span>[] barr = <span class="string">&quot;hello&quot;</span>.getBytes();</span><br><span class="line">            <span class="comment">// 创建 DatagramPacket 数据包对象 并提供 数组、地址和端口号</span></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(barr, barr.length, InetAddress.getLocalHost(), <span class="number">8888</span>);</span><br><span class="line">            <span class="comment">// 将数据包发送出去</span></span><br><span class="line">            ds.send(dp);</span><br><span class="line">            System.out.println(<span class="string">&quot;发送数据成功！&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 接受服务端发送的信息</span></span><br><span class="line">            <span class="type">byte</span>[] barr2 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="comment">// 接收数据报内容 并放入byte数组中</span></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(barr2, barr2.length);</span><br><span class="line">            <span class="comment">// 接收</span></span><br><span class="line">            ds.receive(dp2);</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(barr2, <span class="number">0</span>, dp2.getLength());</span><br><span class="line">            System.out.println(<span class="string">&quot;接收回复的消息：&quot;</span> + message + <span class="string">&quot;!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != ds) &#123;</span><br><span class="line">                ds.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>接收方</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UDP 接收方</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建 DatagramSocket 对象并提供端口号</span></span><br><span class="line">            ds = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8888</span>);</span><br><span class="line">            <span class="comment">// 创建 DatagramPacket 对象并提供缓冲区</span></span><br><span class="line">            <span class="type">byte</span>[] barr = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="comment">// 接收数据报内容 并放入byte数组中</span></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(barr, barr.length);</span><br><span class="line">            System.out.println(<span class="string">&quot;等待数据...&quot;</span>);</span><br><span class="line">            <span class="comment">// 接收</span></span><br><span class="line">            ds.receive(dp);</span><br><span class="line">            <span class="comment">// 转换指定长度的字符</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(barr, <span class="number">0</span>, dp.getLength());</span><br><span class="line">            System.out.println(<span class="string">&quot;接受到的数据是：&quot;</span> + msg + <span class="string">&quot;!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 回发信息给发送方</span></span><br><span class="line">            <span class="type">byte</span>[] barr2 = <span class="string">&quot;I receive!&quot;</span>.getBytes();</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(barr2, barr2.length, dp.getAddress(), dp.getPort());</span><br><span class="line">            <span class="comment">// 发送</span></span><br><span class="line">            ds.send(dp2);</span><br><span class="line">            System.out.println(<span class="string">&quot;回复信息成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != ds) &#123;</span><br><span class="line">                ds.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="URl-类"><a href="#URl-类" class="headerlink" title="URl 类"></a>URl 类</h1><h2 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>URL(String spec)</td><td>根据参数指定的字符串信息构造对象</td></tr><tr><td>String geProtocol()</td><td>获取协议名称</td></tr><tr><td>String getHost()</td><td>获取主机名称</td></tr><tr><td>int getport()</td><td>获取端口号</td></tr><tr><td>String getPath()</td><td>获取路径信息</td></tr><tr><td>String getFile()</td><td>获取文件名</td></tr><tr><td>URLConnection openConnection()</td><td>获取 URLConnection类的实例</td></tr></tbody></table><h2 id="URLConnection类"><a href="#URLConnection类" class="headerlink" title="URLConnection类"></a>URLConnection类</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li><code>java.net.URLConnection</code>类是个抽象类，该类表示应用程序和URL之间的通信链接的所有类的超类，主要实现类有支持HTP特有功能的 HttpURiConnection类。</li></ul><h3 id="HttpURIConnection类的常用方法"><a href="#HttpURIConnection类的常用方法" class="headerlink" title="HttpURIConnection类的常用方法"></a>HttpURIConnection类的常用方法</h3><p>|方法声明|功能介绍|<br>|Inputstream getInputstream()|获取输入流|<br>|void disconnect()|断开连接|</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-多线程同步机制</title>
      <link href="/posts/3031167880.html"/>
      <url>/posts/3031167880.html</url>
      
        <content type="html"><![CDATA[<h1 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>当多个线程同时访问同一种昧享资源时，可能会造成数据的覆盖等不一致性问题，此时就需要对线程之间进行通信和协调，该机制就叫做线程的同步机制。</li><li>多个线程并发读写同一个临界资源时会发生线程并发安全问题。</li><li>异步操作：多线程并发的操作，各自独立运行。</li><li>同步操作：多线程串行的操作，先后执行的顺序。<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2></li><li>由程序结果可知：当两个线程同时对同一个账户进行取款时，导致最终的账户余额不合理。</li><li>引发原因：线程一执行取款时还没来得及将取款后的余额写入后台，线程二就已经开始取款。</li><li>解决方案：让线程一执行完毕取款操作后，再让线程二执行即可，将线程的并发操作改为串行操作。</li><li>经验分享：在以后的开发尽量减少串行操作的范围，从而提高效率。<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2></li><li>在Java语言中使用 synchronized 关键字来实现同步/对象锁机制从而保证线程执行的原子性，具体方式如下：</li><li>使用同步代码块的方式实现部分代码的锁定，格式如下：<br> synchronized (类类型的引用){<pre><code> // 类类型的引用必须是一个对象 否则无法锁住 编写所有需要锁定的代码</code></pre> }<blockquote><p>实现 Runnable 类</p></blockquote> <img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210910142548553-477879240.png" alt="image"></li><li>使用同步方法的方式实现所有代码的锁定。<br> 直接使用 synchronized关键字来修饰整个方法即可<br> 该方式等价于：<br> synchronized(this){整个方法体的代码} </li></ul><h1 id="使用Lock-锁-实现线程同步"><a href="#使用Lock-锁-实现线程同步" class="headerlink" title="使用Lock(锁)实现线程同步"></a>使用Lock(锁)实现线程同步</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>从Java5开始提供了更强大的线程同步机制一使用显式定义的同步锁对象来实</li><li><code>java.util.concurrent.locks.Lock</code>接口是控制多个线程对共享资源进行访问的工具。</li><li>该接口的主要实现类是 Reentrantlock类,该类拥有与 synchronized相同的并发性，在以后的线程安全控制中，经常使用 Reentrantlock类显式加锁和释放锁。<h2 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>Reentrantlock()</td><td>使用无参方式构造对象</td></tr><tr><td>void lock</td><td>获取锁</td></tr><tr><td>void unlock</td><td>释放锁</td></tr></tbody></table><h2 id="与-synchronized方式的比较"><a href="#与-synchronized方式的比较" class="headerlink" title="与 synchronized方式的比较"></a>与 synchronized方式的比较</h2></li><li>Lock是显式锁,需要手动实现开启和关闭操作,而 synchronized是隐式锁，执行锁定代码后自动释放。</li><li>Lock 只有同步代码块方式的锁，而 synchronized有同步代码块方式和同步方法两种锁。</li><li>使用 Lock 锁方式时，Java虛拟机将花费较少的时间来调度线程，因此性能更好。</li></ul><h1 id="Object类常用的方法"><a href="#Object类常用的方法" class="headerlink" title="Object类常用的方法"></a>Object类常用的方法</h1><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>void wait()</td><td>用于使得线程进入等待状态，直到其它线程调用 notify()或notifyAll()方法</td></tr><tr><td>void wait(long timeout)</td><td>用于进入等待状态,直到其它线程调用方法或参数指定的毫秒数已经过去为止</td></tr><tr><td>void notify()</td><td>60用于唤等待的单个线程</td></tr><tr><td>void notifyAll()</td><td>用于唤酲等待的所有线程</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-多线程</title>
      <link href="/posts/3237902709.html"/>
      <url>/posts/3237902709.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="程序和进程的概念"><a href="#程序和进程的概念" class="headerlink" title="程序和进程的概念"></a>程序和进程的概念</h2><ul><li>程序 - 数据结构 + 算法，主要指存放在硬盘上的可执行文件。</li><li>进程 - 主要指运行在内存中的可执行文件。</li><li>目前主流的操作系统都支持多进程，为了让操作系统同时可以执行多个任务，但进程是重量级的，也就是新建一个进程会消耗CPU和内存空间等系统资源，因此进程的数量比较局限。</li></ul><h2 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h2><ul><li>为了解决上述问题就提岀线程的概念，线程就是进程内部的程序流，也就是说操作系统内部支持多进程的，而每个进程的内部又是支持多线程的，线程是轻量的，新建线程会共享所在进程的系统资源，因此目前主流的开发都是采用多线程。</li><li>多线程是采用时间片轮转法来保证多个线程的并发执行，所谓并发就是指宏观并行微观串行的机制。</li></ul><h1 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h1><h2 id="Thread类的概念"><a href="#Thread类的概念" class="headerlink" title="Thread类的概念"></a>Thread类的概念</h2><ul><li><code>java.lang.Thread</code> 类代表线程，任何线程对象都是 Thread类(子类)的实例。</li><li>Thread 类是线程的模板，封装了复杂的线程开启等操作，封装了操作系统的差异性。</li></ul><h2 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h2><ol><li>自定义类继承  Thread 类并重写 run 方法，然后创建该类的对象调用 start 方法</li><li>自定义类实现  Runnable 接口并重写 run 方法，创建该类的对象作为实参来构造 Thread 类型的对象，然后使用Thread 类型的对象调用 start 方法。</li></ol><h2 id="相关的方法"><a href="#相关的方法" class="headerlink" title="相关的方法"></a>相关的方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>Thread()</td><td>使用无参的方式构造对象</td></tr><tr><td>Thread(String name)</td><td>根据参数指定的名称来构造对象</td></tr><tr><td>Thread(Runnable target)</td><td>根据参数指定的引用来构造对象，其中 Runnable 是个接口类型</td></tr><tr><td>Thread(Runnable target， String name)</td><td>根据参数指定引用和名称来构造对象</td></tr><tr><td>void run()</td><td>若使用 Runnable引用构造了线程对象，调用该方法时最终调用接口中的版本<br/>若没有使用 Runnable引用构造线程对象，调用该方法时则啥也不做</td></tr><tr><td>void start()</td><td>用于启动线程，Java虚拟机会自动调用该线程的run方法</td></tr></tbody></table><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><ul><li>执行main方法的线程叫做主线程，执行 run 方法的线程叫做新线程 / 子线程。</li><li>main方法是程序的入口，对于  start 方法之前的代码来说，由主线程执行一次，当 start 方法调用成功后线程的数由 1 个变成了 2 个，新启动的线程去执行 run 方法的代码，主线程继续向下执行，两个线程各自独立运行互不影响。</li><li>当 run 方法执行完毕后子线程结束，当 main 方法执行完毕后主线程结束。</li><li>两个线程执行没有明确的先后执行次序，由操作系统调度算法来决定。</li></ul><h2 id="线程的创建方式"><a href="#线程的创建方式" class="headerlink" title="线程的创建方式"></a>线程的创建方式</h2><h3 id="方式一：继承-Thread-类"><a href="#方式一：继承-Thread-类" class="headerlink" title="方式一：继承 Thread 类"></a>方式一：继承 Thread 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;SubThread 中的 i = &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建对象指向 Thread 类型的引用</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">subThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubThread</span>();</span><br><span class="line">    <span class="comment">// 启动线程 JVM 虚拟机会自动调用 run 方法</span></span><br><span class="line">    <span class="comment">// 不能直接调用 run 方法</span></span><br><span class="line">    subThread.start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main 中的 i = &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><blockquote><p>主线程和多线程交叉运行，互不影响</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210907235306852-1897726926.png" alt="image"></p><h3 id="方式二：实现-Runnable-接口"><a href="#方式二：实现-Runnable-接口" class="headerlink" title="方式二：实现 Runnable 接口"></a>方式二：实现 Runnable 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubThreadRun</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;SubThreadRun 中的 i = &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 创建自定义类型的对象，也就是实现 Runnable 接口类的对象</span></span><br><span class="line">    <span class="type">SubThreadRun</span> <span class="variable">subThreadRun</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubThreadRun</span>();</span><br><span class="line">    <span class="comment">// 2. 使用对象作为参数构造 Thread 对象</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(subThreadRun);</span><br><span class="line">    <span class="comment">// 3. 使用 Thread 类型引用调用 start() 方法</span></span><br><span class="line">    <span class="comment">// 若使用 Runnable 引用构造了线程对象，调用该方法(run)时最终调用接口中的版本</span></span><br><span class="line">    thread.start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SubThread 中的 i = &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210908122042328-133925690.png" alt="image"></p><h2 id="方式的比较"><a href="#方式的比较" class="headerlink" title="方式的比较"></a>方式的比较</h2><ul><li>继承 Thread类的方式代码简单，但是若该类继承 Thread类后则无法继承其它类，而实现Runnable接口的方式代码复杂，但不影响该类继承其它类以及实现其它接口，因此以后的开发中推荐使用第二种方式。</li></ul><h2 id="匿名内部类的方式"><a href="#匿名内部类的方式" class="headerlink" title="匿名内部类的方式"></a>匿名内部类的方式</h2><ul><li>使用匿名内部类的方式来创建和启动线程。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubThreadNoName</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 继承加匿名内部类的方式创建并启动线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">tr1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我是继承加匿名内部类的方式创建并启动线程&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        tr1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实现接口加匿名内部类的方式启动并创建的线程</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">ra</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;方式一：我是实现接口加匿名内部类的方式启动并创建的线程&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">tr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ra);</span><br><span class="line">        tr2.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">tr3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;方式二：我是实现接口加匿名内部类的方式启动并创建的线程&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        tr3.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lambda 表达式</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">tr4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;方式三：我是实现接口加匿名内部类的方式启动并创建的线程&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        tr4.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h1><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210909175722223-872128437.png" alt="image"></p><ul><li>新建状态 - 使用 new 关键字创建之后进入的状态，此时线程并没有开始执行。</li><li>就绪状态 - 调用 start 方法后进入的状态，此时程还是没有开始执行。</li><li>运行状态 - 使用线程调度器调用该线程后进入的状态，此时线程开始执行，当线程的时间片执行完毕后任务没有完成时回到就绪状态。</li><li>消亡状态 - 当线程的任务执行完成后进入的状态，此时线程已经终止。</li><li>阻塞状态 - 当线程执行的过程中发生了阻塞事件进入的状态，如：sleep方法。<br>阻塞状态解除后进入就绪状态。</li></ul><h2 id="线程的编号和名称"><a href="#线程的编号和名称" class="headerlink" title="线程的编号和名称"></a>线程的编号和名称</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>long getId</td><td>获取调用对象所表示线程的编号</td></tr><tr><td>String getName()</td><td>获取调用对象所表示线程的名称</td></tr><tr><td>void setName(String name)</td><td>设置/修改线程的名称为参数指定的数值</td></tr><tr><td>static Thread currentThread()</td><td>获取当前正在执行线程的引用</td></tr></tbody></table><ul><li><p>继承的方式<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210909182342689-62569610.png" alt="image"></p></li><li><p>实现接口的方式<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210909182623186-1858634095.png" alt="image"></p></li></ul><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>static void yield()</td><td>当前线程让出处理器(离开 Running状态),使当前线程进入 Runnable状态等待</td></tr><tr><td>static void sleep(times)</td><td>使当前线程从 Running 放弃处理器进入 Block 状态休眠 times毫秒,再返回到Runnable如果其他线程打断当前线程的 Block(sleep)就会发生InterruptedException</td></tr><tr><td>int getPriority()</td><td>获取线程的优先级</td></tr><tr><td>void setPriority(int newPriority)</td><td>修改线程的优先级。<br>优先级越高的线程不一定先执行,但该线程获取到时间片的机会会更多一些</td></tr><tr><td>void join()</td><td>等待该线程终止</td></tr><tr><td>void join(long millis)</td><td>等待参数指定的毫秒数</td></tr><tr><td>boolean isDaemono</td><td>用于判断是否为守护线程</td></tr><tr><td>setDaemon(boolean on)</td><td>用于设置线程为守护线程</td></tr></tbody></table><h3 id="sleep-方式的使用"><a href="#sleep-方式的使用" class="headerlink" title="sleep 方式的使用"></a>sleep 方式的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            <span class="comment">// 时间对象</span></span><br><span class="line">            <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">            <span class="comment">// 格式化时间</span></span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">            System.out.println(sdf.format(date));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadTest</span> <span class="variable">tr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadTest</span>();</span><br><span class="line">        tr.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 停止线程</span></span><br><span class="line">        <span class="comment">// tr.stop(); // 已过时不推荐使用</span></span><br><span class="line">        tr.flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="线程的管理"><a href="#线程的管理" class="headerlink" title="线程的管理"></a>线程的管理</h3><blockquote><p>修改线程的优先级。优先级越高的线程不一定先执行,但该线程获取到时间片的机会会更多一些</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![image](https://img2020.cnblogs.com/blog/2354934/202109/2354934-20210909190301006-11927860.png)</span><br></pre></td></tr></table></figure><h3 id="线程的等待"><a href="#线程的等待" class="headerlink" title="线程的等待"></a>线程的等待</h3><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210909190840163-1405465489.png" alt="image"></p><h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210909191258434-2056946550.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-IO流</title>
      <link href="/posts/3845166172.html"/>
      <url>/posts/3845166172.html</url>
      
        <content type="html"><![CDATA[<h1 id="IO-流的概念"><a href="#IO-流的概念" class="headerlink" title="IO 流的概念"></a>IO 流的概念</h1><ul><li>IO 就是 Input 和 Output 的简写，也就是输入和输出的含义。</li><li>IO 流就是指读写数据时像流水一样从一端流到另外-端，因此得名为”流”。</li></ul><h1 id="基本分类"><a href="#基本分类" class="headerlink" title="基本分类"></a>基本分类</h1><ul><li>按照读写数据的基本单位不同,分为字节流和字符流<ul><li>其中字节流主要指以字节为单位进行数据读写的流,可以读写任意类型的文件。</li><li>其中字符流主要指以字符(2个字节)为单位进行数据读写的流，只能读写文本文件。</li></ul></li><li>按照读写数据的方向不同,分为输入流和输出流(站在程序的角度)。<ul><li>其中输入流主要指从文件中读取数据内容输入到程序中，也就是读文件。</li><li>其中输出流主要指将程序中的数据内容输出到文件中，也就是写文件。</li></ul></li><li>按照流的角色不同分为节点流和处理流。<ul><li>其中节点流主要指直接和输入输出源对接的流。</li><li>其中处理流主要指需要建立在节点流的基础之上的流。</li></ul></li></ul><h1 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h1><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210905182210209-1148754233.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210905234720747-1133430709.png" alt="image"></p><h1 id="FileWriter-字符输出流"><a href="#FileWriter-字符输出流" class="headerlink" title="FileWriter 字符输出流"></a>FileWriter 字符输出流</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>java.io.Filewriter类主要用于将本内容写入到文本文件</p><h2 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>FileWriter(String fileName)</td><td>根据参数指定的文件名构造对象</td></tr><tr><td>FileWriter(String fileName, boolean append)</td><td>以追加的方式根据参数指定的文件名来构造对象</td></tr><tr><td>void write(int c)</td><td>写入单个字符</td></tr><tr><td>void write(char[] cbuf, int off, int len)</td><td>将指定字符数组中从偏移量o开始的en个字符写入此文件输</td></tr><tr><td>void write(char[] cbuf)</td><td>将 cbuf.length个字符从指定字符数组写入此文件输出流中</td></tr><tr><td>void flush()</td><td>刷新流</td></tr><tr><td>void close()</td><td>关闭流对象并释放有关的资源</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">       FileWriter fileWriter = null;</span><br><span class="line">       try &#123;</span><br><span class="line">           // 构造 FileWriter 对象与 ./a.txt 文件关联</span><br><span class="line">           // 若文件不存在该流会自创建新的空文件</span><br><span class="line">           // 若文件存在则会清空原有内容</span><br><span class="line">           fileWriter = new FileWriter(&quot;./a.txt&quot;);</span><br><span class="line">           // 参数二为true时为追加内容</span><br><span class="line">           // fileWriter = new FileWriter(&quot;./a.txt&quot;,true);</span><br><span class="line">           // 通过数据流写入数据内容</span><br><span class="line">           fileWriter.write(&quot;CONTENT TEXT; &quot;);</span><br><span class="line"></span><br><span class="line">           char[] arr = &#123;&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;&#125;;</span><br><span class="line">           // 将数组一部分内容写入</span><br><span class="line">           fileWriter.write(arr, 1, 3); // ell</span><br><span class="line">           // 将一组字符写入</span><br><span class="line">           fileWriter.write(arr);</span><br><span class="line"></span><br><span class="line">           // 刷新流 在多次写入且不关闭流的时候时才需要用到</span><br><span class="line">           fileWriter.flush();</span><br><span class="line"></span><br><span class="line">           System.out.println(&quot;SUCCESS&quot;);</span><br><span class="line">       &#125; catch (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; finally &#123;</span><br><span class="line">           // 关闭流对象并释放相关内容</span><br><span class="line">           if (fileWriter != null) &#123;</span><br><span class="line">               try &#123;</span><br><span class="line">                   fileWriter.close();</span><br><span class="line">               &#125; catch (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="FileReader-字符输入流"><a href="#FileReader-字符输入流" class="headerlink" title="FileReader 字符输入流"></a>FileReader 字符输入流</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p>java.io.FileReader 类主要用于从本文件读取文本数据内容。</p><h2 id="常用的方法-1"><a href="#常用的方法-1" class="headerlink" title="常用的方法"></a>常用的方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>FileReader(String fileName)</td><td>根据参数指定的文件名构造对象</td></tr><tr><td>int read()</td><td>读取单个字符的数据并返回，返回 -1 表示读取到末尾</td></tr><tr><td>int read(char[] cbuf, int offset, int lenght)</td><td>从输入流中将最多lenght个字符的数据读入一个字符数组中,返回读取到的字符个数，返回 -1 表示读取到末尾</td></tr><tr><td>int read(char[] cbuf)</td><td>从此输入流中将最多 cbuf.length 个字符的数据读入字符数组中，返回读取到的字符个数，返回 -1 表示读取到末尾</td></tr><tr><td>void close()</td><td>关闭流对象并释放有关的资源</td></tr></tbody></table></li><li><p>reader() 读取文件全部内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">      FileReader fileReader = null;</span><br><span class="line">      try &#123;</span><br><span class="line">          // 1.构造 FileReader 类型的对句d:/a.txt文件关</span><br><span class="line">          fileReader = new FileReader(&quot;./a.txt&quot;);</span><br><span class="line">          // 2.读取数据内容并打印</span><br><span class="line">          // int read = fileReader.read(); 读取一个字符</span><br><span class="line">          // System.out.println((char)read);</span><br><span class="line">          // 读取文件中所有内容</span><br><span class="line">          int read;</span><br><span class="line">          while ((read = fileReader.read()) != -1) &#123;</span><br><span class="line">              System.out.print((char) read);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; catch (IOException e) &#123;</span><br><span class="line">          // 3.关闭流对并释放有关的资源</span><br><span class="line">          if (null != fileReader) &#123;</span><br><span class="line">              try &#123;</span><br><span class="line">                  fileReader.close();</span><br><span class="line">              &#125; catch (IOException ex) &#123;</span><br><span class="line">                  ex.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>reader() 其他版本的使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">       FileReader fileReader = null;</span><br><span class="line">       try &#123;</span><br><span class="line">           // 1.构造 FileReader 对象关联 ./a.txt 文件</span><br><span class="line">           fileReader = new FileReader(&quot;./a.txt&quot;);</span><br><span class="line">           // 2.期望读满字符数字部分空间</span><br><span class="line">           char[] strArr = new char[5];</span><br><span class="line">           // fileReader.read(strArr, 1, 3);</span><br><span class="line">           // System.out.println(strArr);</span><br><span class="line">           // 期望读满字符数组所有空间</span><br><span class="line">           int read = fileReader.read(strArr);</span><br><span class="line">           System.out.println(strArr);</span><br><span class="line">       &#125; catch (IOException e) &#123;</span><br><span class="line">           // 3.关闭流对并释放有关的资源</span><br><span class="line">           if (null != fileReader) &#123;</span><br><span class="line">               try &#123;</span><br><span class="line">                   fileReader.close();</span><br><span class="line">               &#125; catch (IOException ex) &#123;</span><br><span class="line">                   ex.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="FileOutputstream-字节输出流"><a href="#FileOutputstream-字节输出流" class="headerlink" title="FileOutputstream 字节输出流"></a>FileOutputstream 字节输出流</h1><h2 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h2><p><code>java.io.FileOutputStrean</code> 类主要用于将图像数据之类的原始字节流写入到输出流中。</p><h2 id="常用的方法-2"><a href="#常用的方法-2" class="headerlink" title="常用的方法"></a>常用的方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>FileOutputStrean(String fileName)</td><td>根据参数指定的文件名构造对象</td></tr><tr><td>FileOutputStrean(String fileName, boolean append)</td><td>以追加的方式根据参数指定的文件名来构造对象</td></tr><tr><td>void write(int c)</td><td>写入单个字符</td></tr><tr><td>void write(byte[] cbuf, int off, int len)</td><td>将指定字节数组中从偏移量o开始的len个字符写入此文件输</td></tr><tr><td>void write(byte[] cbuf)</td><td>将 cbuf.length个字符从指定字节数组写入此文件输出流中</td></tr><tr><td>void flush()</td><td>刷新流</td></tr><tr><td>void close()</td><td>关闭流对象并释放有关的资源</td></tr></tbody></table><h1 id="FileInputStream-字节输入流"><a href="#FileInputStream-字节输入流" class="headerlink" title="FileInputStream 字节输入流"></a>FileInputStream 字节输入流</h1><h2 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h2><p><code>java.io.FileInputStream</code>类主要用于从输入流中以字节流的方式读取图像数据等</p><h2 id="常用的方法-3"><a href="#常用的方法-3" class="headerlink" title="常用的方法"></a>常用的方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>FileReader(String fileName)</td><td>根据参数指定的文件名构造对象</td></tr><tr><td>int read()</td><td>读取单个字节的数据并返回，返回 -1 表示读取到末尾</td></tr><tr><td>int read(byte[] cbuf, int offset, int lenght)</td><td>从输入流中将最多lenght个字节的数据读入一个字节数组中,返回读取到的字节个数，返回 -1 表示读取到末尾</td></tr><tr><td>int read(byte[] cbuf)</td><td>从此输入流中将最多 cbuf.length 个字节的数据读入字符数组中，返回读取到的字符个数，返回 -1 表示读取到末尾</td></tr><tr><td>void close()</td><td>关闭流对象并释放有关的资源</td></tr><tr><td>int</td><td>available()</td></tr></tbody></table><h1 id="字节流实现图片的拷贝"><a href="#字节流实现图片的拷贝" class="headerlink" title="字节流实现图片的拷贝"></a>字节流实现图片的拷贝</h1><blockquote><p>推荐使用Java官方提供的 缓冲输入输出流</p></blockquote><h2 id="方式一：以单个字节为单位进行拷贝-不推荐"><a href="#方式一：以单个字节为单位进行拷贝-不推荐" class="headerlink" title="方式一：以单个字节为单位进行拷贝 (不推荐)"></a>方式一：以单个字节为单位进行拷贝 (不推荐)</h2><blockquote><p>每次读取一个字节后在写入一个字节</p></blockquote><p><strong>不能使用这种方式，拷贝的效率很低</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">     FileInputStream fis = null;</span><br><span class="line">     FileOutputStream fos = null;</span><br><span class="line">     try &#123;</span><br><span class="line">         // 创建FileInputStream对象与 a.txt 关联</span><br><span class="line">         fis = new FileInputStream(&quot;./111.jpg&quot;);</span><br><span class="line">         // 创建FileOutputStream对象与 a.txt 关联</span><br><span class="line">         fos = new FileOutputStream(&quot;./222.jpg&quot;);</span><br><span class="line"></span><br><span class="line">         System.out.println(&quot;正在玩命拷贝中...&quot;);</span><br><span class="line">         int read;</span><br><span class="line">         // 不断的从字节输出流中读取并写入字节输入将中</span><br><span class="line">         while ((read = fis.read()) != -1) &#123;</span><br><span class="line">             fos.write(read);</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(&quot;拷贝成功！&quot;);</span><br><span class="line">     &#125; catch (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125; finally &#123;</span><br><span class="line">         try &#123;</span><br><span class="line">             // 关闭流 释放资源</span><br><span class="line">             // 先创建的后关闭 后创建的先关闭</span><br><span class="line">             if (null != fos) &#123;</span><br><span class="line">                 fos.close();</span><br><span class="line">             &#125;</span><br><span class="line">             if (null != fis) &#123;</span><br><span class="line">                 fis.close();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125; catch (IOException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="方式二：使用和文件大小一致的缓冲区（不推荐）"><a href="#方式二：使用和文件大小一致的缓冲区（不推荐）" class="headerlink" title="方式二：使用和文件大小一致的缓冲区（不推荐）"></a>方式二：使用和文件大小一致的缓冲区（不推荐）</h2><blockquote><p>准备一个和文件大小一样的线冲区性将文件中的所有内容取出到线冲区然后一次性写入进去。</p></blockquote><ul><li>缺点：若文件过大时,无法中请和文件大小一样的线冲区,真实物理内存不足<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    FileInputStream fis = null;</span><br><span class="line">    FileOutputStream fos = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        // 创建FileInputStream对象与 a.txt 关联</span><br><span class="line">        fis = new FileInputStream(&quot;./111.jpg&quot;);</span><br><span class="line">        // 创建FileOutputStream对象与 a.txt 关联</span><br><span class="line">        fos = new FileOutputStream(&quot;./222.jpg&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;正在玩命拷贝中...&quot;);</span><br><span class="line"></span><br><span class="line">        // 获取到的文件大小(字节)</span><br><span class="line">        int size = fis.available();</span><br><span class="line">        System.out.println(&quot;获取到的文件大小是：&quot; + size);</span><br><span class="line">        // byte数组缓冲区 缓冲区大小为输入流大小</span><br><span class="line">        byte[] buffer = new byte[size];</span><br><span class="line"></span><br><span class="line">        // 将字节流一次性读取到byte缓冲区中</span><br><span class="line">        int read = fis.read(buffer);</span><br><span class="line">        System.out.println(&quot;读取到文件的大小是：&quot; + read);</span><br><span class="line"></span><br><span class="line">        // 将缓冲区中的字节流一次行写如到输出流中</span><br><span class="line">        fos.write(buffer);</span><br><span class="line">        System.out.println(&quot;拷贝成功！&quot;);</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 关闭流 释放资源</span><br><span class="line">            // 先创建的后关闭 后创建的先关闭</span><br><span class="line">            if (null != fos) &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125;</span><br><span class="line">            if (null != fis) &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="方式三：相对的缓冲取，多次完成"><a href="#方式三：相对的缓冲取，多次完成" class="headerlink" title="方式三：相对的缓冲取，多次完成"></a>方式三：相对的缓冲取，多次完成</h2><blockquote><p>准备一个相对适当的缓冲区,分多次将文件老贝完成</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    FileInputStream fis = null;</span><br><span class="line">    FileOutputStream fos = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        // 创建FileInputStream对象与 a.txt 关联</span><br><span class="line">        fis = new FileInputStream(&quot;./111.jpg&quot;);</span><br><span class="line">        // 创建FileOutputStream对象与 a.txt 关联</span><br><span class="line">        fos = new FileOutputStream(&quot;./222.jpg&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;正在玩命拷贝中...&quot;);</span><br><span class="line"></span><br><span class="line">        // byte数组缓冲区</span><br><span class="line">        // 缓冲区大小为建议为 1024 的数</span><br><span class="line">        byte[] buffer = new byte[1024];</span><br><span class="line"></span><br><span class="line">        // 将字节流分批读取到byte缓冲区中并写入输出流中</span><br><span class="line">        int read = 0;</span><br><span class="line">        while ((read = fis.read(buffer)) != -1) &#123;</span><br><span class="line">            // read 为每次实际读取到的字节大小 防止最后把多余的字节拷贝过来</span><br><span class="line">            fos.write(buffer, 0, read);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;拷贝成功！&quot;);</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 关闭流 释放资源</span><br><span class="line">            // 先创建的后关闭 后创建的先关闭</span><br><span class="line">            if (null != fos) &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125;</span><br><span class="line">            if (null != fis) &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BufferedOutputstream-字节缓冲输出流"><a href="#BufferedOutputstream-字节缓冲输出流" class="headerlink" title="BufferedOutputstream 字节缓冲输出流"></a>BufferedOutputstream 字节缓冲输出流</h1><h2 id="基本概念-4"><a href="#基本概念-4" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>java.io.BufferedOutputStream 类主要用于描述缓冲输出流，此时不用为写入的每个字节调用底层系统。<h2 id="常用的方法-4"><a href="#常用的方法-4" class="headerlink" title="常用的方法"></a>常用的方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>BufferedOutputStream(OutputStream out)</td><td>根据参数指定的引用构造对象</td></tr><tr><td>BufferedOutputStream(OutputStream out, int size)</td><td>根据参数指定的引用和缓冲区大小构造对象</td></tr><tr><td>void write(int c)</td><td>写入单个字节</td></tr><tr><td>void write(byte[] cbuf, int off, int len)</td><td>将指定字节数组中从偏移量o开始的len个字符写入此文件输</td></tr><tr><td>void write(byte[] cbuf)</td><td>将 cbuf.length个字符从指定字节数组写入此文件输出流中</td></tr><tr><td>void flush()</td><td>刷新流</td></tr><tr><td>void close()</td><td>关闭流对象并释放有关的资源</td></tr></tbody></table></li></ul><h1 id="BufferedInputStream-字节缓冲输入流"><a href="#BufferedInputStream-字节缓冲输入流" class="headerlink" title="BufferedInputStream 字节缓冲输入流"></a>BufferedInputStream 字节缓冲输入流</h1><h2 id="基本概念-5"><a href="#基本概念-5" class="headerlink" title="基本概念"></a>基本概念</h2><p>· <code>java.Io.BufferedInputStream</code> 类主要用于描述缓冲输入流。</p><h2 id="常用的方法-5"><a href="#常用的方法-5" class="headerlink" title="常用的方法"></a>常用的方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>BufferedInputStream(InputStream in)</td><td>根据参数指定引用构造对象</td></tr><tr><td>BufferedInputStream(InputStream in, int size)</td><td>根据参数指定引用和缓冲区大小构造对象</td></tr><tr><td>int read()</td><td>读取单个字节的数据并返回，返回 -1 表示读取到末尾</td></tr><tr><td>int read(byte[] cbuf, int offset, int lenght)</td><td>从输入流中将最多lenght个字节的数据读入一个字节数组中,返回读取到的字节个数，返回 -1 表示读取到末尾</td></tr><tr><td>int read(byte[] cbuf)</td><td>从此输入流中将最多 cbuf.length 个字节的数据读入字符数组中，返回读取到的字符个数，返回 -1 表示读取到末尾</td></tr><tr><td>void close()</td><td>关闭流对象并释放有关的资源</td></tr></tbody></table><h1 id="字节缓冲流实现文件的拷贝"><a href="#字节缓冲流实现文件的拷贝" class="headerlink" title="字节缓冲流实现文件的拷贝"></a>字节缓冲流实现文件的拷贝</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        BufferedInputStream bis = null;</span><br><span class="line">        BufferedOutputStream bos = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 创建FileInputStream对象与 a.txt 关联</span><br><span class="line">            bis = new BufferedInputStream(new FileInputStream(&quot;./111.jpg&quot;));</span><br><span class="line">            bos = new BufferedOutputStream(new FileOutputStream(&quot;./222.jpg&quot;));</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;正在玩命拷贝中...&quot;);</span><br><span class="line"></span><br><span class="line">            // byte数组缓冲区</span><br><span class="line">            // 缓冲区大小为建议为 1024 的数</span><br><span class="line">            byte[] buffer = new byte[1024];</span><br><span class="line">            // 将字节流分批读取到byte缓冲区中并写入输出流中</span><br><span class="line">            int read = 0;</span><br><span class="line">            while ((read = bis.read(buffer)) != -1) &#123;</span><br><span class="line">                // read 为每次实际读取到的字节大小 防止最后把多余的字节拷贝过来</span><br><span class="line">                bos.write(buffer, 0, read);</span><br><span class="line">                bos.flush(); // 刷新流 防止字节丢失</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;拷贝成功！&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                // 关闭流 释放资源</span><br><span class="line">                // 先创建的后关闭 后创建的先关闭</span><br><span class="line">                if (null != bos) &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125;</span><br><span class="line">                if (null != bis) &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="Bufferedwriter-字符输出缓冲流"><a href="#Bufferedwriter-字符输出缓冲流" class="headerlink" title="Bufferedwriter 字符输出缓冲流"></a>Bufferedwriter 字符输出缓冲流</h1><h2 id="基本概念-6"><a href="#基本概念-6" class="headerlink" title="基本概念"></a>基本概念</h2><p><code> java.io.Bufferedwriter</code> 类主要用于写入单个字符、字符数组以及字符串到输出流中。</p><h2 id="常用的方法-6"><a href="#常用的方法-6" class="headerlink" title="常用的方法"></a>常用的方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>BufferedWriter(Writer out)</td><td>根据参数指定的引用来构造对象</td></tr><tr><td>BufferedWriter(Writer out, int size)</td><td>根据参数指定的引用和缓冲区大小来构造对象</td></tr><tr><td>void write(int c)</td><td>写入单个字符到输出流中</td></tr><tr><td>void write(char[] cbuf, int off, int len)</td><td>将字符数组cbuf中从下标off开始的len个字符写入输出流中</td></tr><tr><td>void write(char[] cbuf)</td><td>将字符串数组cbuf中所有内容写入输出流中</td></tr><tr><td>void write(String S, int off, int len)</td><td>将参数中下标从off开始的len个字符写入输出流中</td></tr><tr><td>void write(String str)</td><td>将参数指定的字符串内容写入输出流中</td></tr><tr><td>void newLine()</td><td>用于写入行分隔符到输出流中</td></tr><tr><td>void flush()</td><td>刷新流</td></tr><tr><td>void close()</td><td>关闭流对象并释放有关的资源</td></tr></tbody></table><h1 id="BufferedReader-字符输入缓冲流"><a href="#BufferedReader-字符输入缓冲流" class="headerlink" title="BufferedReader 字符输入缓冲流"></a>BufferedReader 字符输入缓冲流</h1><h2 id="基本概念-7"><a href="#基本概念-7" class="headerlink" title="基本概念"></a>基本概念</h2><p><code>java.io.BufferedReader</code>类用于从输入流中读取单个字符、字符数组以及字符</p><h2 id="常用的方法-7"><a href="#常用的方法-7" class="headerlink" title="常用的方法"></a>常用的方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>BufferedReader(Reader in)</td><td>根据参数指定引用构造对象</td></tr><tr><td>BufferedReader(Reader in, int size)</td><td>根据参数指定引用和缓冲区大小构造对象</td></tr><tr><td>int read()</td><td>读取单个字节的数据并返回，返回 -1 表示读取到末尾</td></tr><tr><td>int read(byte[] cbuf, int offset, int lenght)</td><td>从输入流中将最多lenght个字节的数据读入一个字节数组中,返回读取到的字节个数，返回 -1 表示读取到末尾</td></tr><tr><td>int read(byte[] cbuf)</td><td>从此输入流中将最多 cbuf.length 个字节的数据读入字符数组中，返回读取到的字符个数，返回 -1 表示读取到末尾</td></tr><tr><td>String readLine()</td><td>读取一行字符串并返回，返回null表示读取到末尾</td></tr><tr><td>void close()</td><td>关闭流对象并释放有关的资源</td></tr></tbody></table><h1 id="OutputStreamWriter-字符转换流"><a href="#OutputStreamWriter-字符转换流" class="headerlink" title="OutputStreamWriter 字符转换流"></a>OutputStreamWriter 字符转换流</h1><h2 id="基本概念-8"><a href="#基本概念-8" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>java io.OutputStreamWriter类主要用于实现从字符流到字节流的转换。<h2 id="常用的方法-8"><a href="#常用的方法-8" class="headerlink" title="常用的方法"></a>常用的方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>OutputstreamWriter(outPutStream out)</td><td>根据参数指定的引用来构造对象</td></tr><tr><td>OutputStreamWriter(OutputStream out, String charsetName)</td><td>根据参数指定的引用和编码构造对象</td></tr><tr><td>void write(String str)</td><td>将参数指定的字符串写入</td></tr><tr><td>void flush()</td><td>刷新流</td></tr><tr><td>void close()</td><td>用于关闭流并释放有关的资源</td></tr></tbody></table></li></ul><h1 id="InputStreamReader-字节转换流"><a href="#InputStreamReader-字节转换流" class="headerlink" title="InputStreamReader 字节转换流"></a>InputStreamReader 字节转换流</h1><h2 id="基本概念-9"><a href="#基本概念-9" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>java.io.InputStreamReader 类主要用于实现从字节流到字符流的转换<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>InputStream Reader(InputStream in)</td><td>根据参数指定的引用来构造对象</td></tr><tr><td>InputStream Reader(InputStream in, String charsetName)</td><td>根据参数指定的引用和编码来构造对象</td></tr><tr><td>int read(char[] cbuf)</td><td>读取字符数据到参数指定的数组</td></tr><tr><td>void close()</td><td>用于关闭流并释放有关的资源</td></tr></tbody></table></li></ul><h1 id="ObjectoutputStrean类-重点"><a href="#ObjectoutputStrean类-重点" class="headerlink" title="ObjectoutputStrean类(重点)"></a>ObjectoutputStrean类(重点)</h1><h2 id="基本概念-10"><a href="#基本概念-10" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>`java.io.ObjectoutputStream 类主要用于将一个对象的所有内容整体写入到输出流中。</li><li>只能将支持 <code>java.io.Serializable</code> 接口的对象写入流中</li><li>类通过实现 <code>java.io.Serializable</code> 接口以启用其序列化功能</li><li>所调谓序列化主要指将一个对象需要存储的相关信息有效组织成字节序列的转化过程。<h2 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>ObjectOutputStream(OutputStream out)</td><td>根据参数指定的引用来构造对象</td></tr><tr><td>void writeObject(Object obj)</td><td>用于将参数指定的对象整体写入</td></tr><tr><td>void close()</td><td>用于关闭输出流并释放有关的资源</td></tr></tbody></table></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210907164845791-1503401243.png" alt="image"></p><h1 id="ObjectInputStream类-重点"><a href="#ObjectInputStream类-重点" class="headerlink" title="ObjectInputStream类(重点)"></a>ObjectInputStream类(重点)</h1><h2 id="基本概念-11"><a href="#基本概念-11" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><code>java.io.ObjectInputStream</code>类主要用于从输入流中一次性将对象整体读取出来。</li><li>所谓反序列化主要指将有效组织的字节序列恢复为一个对象及相关信息的转化过程。<h2 id="常用的方法-9"><a href="#常用的方法-9" class="headerlink" title="常用的方法"></a>常用的方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>ObjectInputStream(InputStream in)</td><td>根据参数指定的引用来构造对象</td></tr><tr><td>Object readObject()</td><td>主要用于从输入流中读取一个对象并返回无法通过返回值来判断是否读取到文件的末尾</td></tr><tr><td>void close()</td><td>用于关闭输入流并释放有关的资源</td></tr></tbody></table></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210907164919799-1293607740.png" alt="image"></p><h2 id="序列化版本号"><a href="#序列化版本号" class="headerlink" title="序列化版本号"></a>序列化版本号</h2><ul><li>序列化机制是通过在运行时判断类的 serialVersionUID来验证版本一致性的。在进行反序列化时,M会把传来的字节流中 serialVersionUID 与本地相应实体类的 serialVersionUID 进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常( Invalid CastException)<h2 id="transient关键字"><a href="#transient关键字" class="headerlink" title="transient关键字"></a>transient关键字</h2></li><li>transient 是java语言的关键字，用来表示一个域不是该对象串行化的一部分。当一个对象被串行化的时候 transient 型变量的值不包括在串行化的表示中，然而非 transient 型的变量是被包括进去的。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210907171345269-511838940.png" alt="image"></p><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><ul><li>当希望将多个对象写入文件时，通常建议将多个对象放入一个集合中，然后将集合这个整体看做一个对象写入输出流中，此时只需要调用一次 readObject 方法就可以将整个集合的数据读取出来，从而避免了通过返回值。进行是否达到末尾的判断。</li></ul><h1 id="RandomAccessFile类"><a href="#RandomAccessFile类" class="headerlink" title="RandomAccessFile类"></a>RandomAccessFile类</h1><h2 id="基本概念-12"><a href="#基本概念-12" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><code>java.io.RandomAccessFile</code> 类主要支持对随机访问文件的读写操作。<h2 id="常用的方法-10"><a href="#常用的方法-10" class="headerlink" title="常用的方法"></a>常用的方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>RandomAccessFile(String name, String mode)</td><td>根据参数指定的名称和模式构造对象<br>r：以只读方式打开<br/>rw：打开以便读取和写入<br/>rwd：打开以便读取和写入，同步文件内容的更新<br/>rws：打开以便读取和写入,同步文件内容和元数据的更新</td></tr><tr><td>int read()</td><td>读取单个字节的数据</td></tr><tr><td>void seek(long pos)</td><td>用于设置从此文件的开头开始测量的文件指针偏移量</td></tr><tr><td>void write(int b)</td><td>将参数指定的单个字节写入</td></tr><tr><td>void close()用于关闭流并释放有关的资源</td><td></td></tr></tbody></table></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-File类详解</title>
      <link href="/posts/4229879530.html"/>
      <url>/posts/4229879530.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><blockquote><p><code>java.io.File</code>类主要用于描述文件或目录路径的抽象表示信息，可以获取文件或目录的特征信息，如:大小等。</p></blockquote><h1 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h1><table><thead><tr><th>方法声明</th><th>功能概述</th></tr></thead><tbody><tr><td>File(String pathname)</td><td>根据参数指定的路径名来构造对象</td></tr><tr><td>File(String parent, String child)</td><td>根据参数指定的父路径和子路径信息构造对象</td></tr><tr><td>File(File parent, String child)</td><td>据参数指定的父抽象路径和子路径信息构造对象</td></tr><tr><td>boolean exists()</td><td>测试此抽象路径名表示的文件或目录是否存在</td></tr><tr><td>String getName()</td><td>用于获取文件的名称</td></tr><tr><td>long length()</td><td>返回由此抽象路径名表示的文件的长度</td></tr><tr><td>long lastModified()</td><td>用于获取文件的最后一次修改时间</td></tr><tr><td>String getAbsolutePath()</td><td>用于获取绝对路径信息</td></tr><tr><td>boolean delete()</td><td>用于删除文件,当删除目录时要求是空目录</td></tr><tr><td>boolean createNewFile()</td><td>用于创建新的空文件</td></tr><tr><td>boolean mkdir()</td><td>用于创建目录</td></tr><tr><td>boolean mkdirs()</td><td>用于创建多级目录</td></tr><tr><td>Filed listFiles()</td><td>获取该目录下的所有内容</td></tr><tr><td>boolean isFiled())</td><td>判断是否为文件</td></tr><tr><td>boolean isDirectory()</td><td>判断是否为目录</td></tr><tr><td>File[] listFiles(FileFilter filter)</td><td>获取目录下满足筛选器的所有内容</td></tr></tbody></table><h1 id="文件的操作"><a href="#文件的操作" class="headerlink" title="文件的操作"></a>文件的操作</h1><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210903215501222-1492917735.png" alt="image"></p><h1 id="目录的操作"><a href="#目录的操作" class="headerlink" title="目录的操作"></a>目录的操作</h1><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210903215541571-1716860808.png" alt="image"></p><h2 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h2><blockquote><p>遍历目录中的内容</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210905180614640-1284448839.png" alt="image"></p><blockquote><p>使用过滤器遍历目录中的内容</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210905181010514-1162274540.png" alt="image"></p><blockquote><p>遍历目录及目录下的内容</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210905181215898-1465980236.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-泛型机制</title>
      <link href="/posts/2968487862.html"/>
      <url>/posts/2968487862.html</url>
      
        <content type="html"><![CDATA[<h1 id="泛型机制"><a href="#泛型机制" class="headerlink" title="泛型机制"></a>泛型机制</h1><h2 id="泛型概念"><a href="#泛型概念" class="headerlink" title="泛型概念"></a>泛型概念</h2><ul><li>通常情况下集合中可以存放不同类型的对象，是因为将所有对象都看做 Object类型放入的,因此从集合中取出。元素时也是Object类型，为了表达该元素真实的数据类型，则需要强制类型转换，而强制类型转换可能会引发类型转换异常。</li><li>为了避免上述错误的发生，从Java5开始增加泛型机制，也就是在集合名称的右侧使用&lt;数据类型&gt;的方式来明。确要求该集合中可以存放的元素类型，若放入其它类型的元素则编译报错。</li><li>泛型只在编译时期有效，在运行时期不区分是什么类型。</li></ul><h2 id="底层概念"><a href="#底层概念" class="headerlink" title="底层概念"></a>底层概念</h2><blockquote><p>泛型的本质就是参数化类型，也就是让数据类型作为参数传递，其中E相当于形式参数负责占位，而使用集合时<code>&lt;&gt;</code>中的数据类型相当于实际参数，用于给形式参数E进行初始化，从而使得集合中所有的E被实际参数替换，由于实际参数可以传递各种各样广泛的数据类型，因此得名为泛型。</p></blockquote><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">其中叫做形式参数,负责占位                   其中E叫做形式参数,负责占位</span><br><span class="line">1. int i = 10;                            E = String;</span><br><span class="line">2. int i = 20;                            E = Integer;</span><br><span class="line">public static void show(int i)&#123;...&#125;       public interface List&lt;E&gt;&#123;...&#125;</span><br><span class="line">其中10叫做实际参数，负责给形式参数初始化     其中String叫做实际参数</span><br><span class="line">show(10)；                                List&lt;String&gt;It1  = ...;</span><br><span class="line">show(20);                                 List&lt;Integer&gt;It2 = ...;</span><br></pre></td></tr></table></figure><h1 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h1><blockquote><p>泛型接口和普通接口的区别就是后面添加了类型参数列表，可以有多个类型参数，如:<code>&lt;E, T…&gt;</code>等。</p></blockquote><h1 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h1><ul><li>泛型接口和普通接口的区别就是后面添加了类型参数列表，可以有多个类型参数，如:<code>&lt;E, T…&gt;</code>等。</li><li>例化泛型类时应该指定具体的数据类型，且是引用数据类型而不是基本数据类型。</li><li>父类有泛型，子类可以选择保留泛型也可以选择指定泛型类型。</li><li>子类必须是“富二代”，子类除了指定或保留父类的泛型，还可以增加自己的泛型。</li></ul><h1 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h1><ul><li>泛型方法就是我们输入参数的时候，输入的是泛型参数，而不是具体的参数。我们在调用这个泛型方法的时需要对泛型参数进行实例化。</li><li>泛型方法的格式：<br>[访问权限]<code>&lt;泛型&gt;</code>返回值类型方法名(泛型标识参数名称〕{方法体;}</li><li>在静态方法中使用泛型参数的时候，需要我们把静态方法定义为泛型方法。</li></ul><h1 id="泛型在继承上的体现"><a href="#泛型在继承上的体现" class="headerlink" title="泛型在继承上的体现"></a>泛型在继承上的体现</h1><ul><li>如果 B 是 A 的一个子类或子接口，而G是具有泛型声明的类或接口，则 <code>G&lt;B&gt;</code> 并不是 <code>G&lt;A&gt;</code>的子类型！<br>比如: String 是 Object 的子类，但是<code>List&lt;String&gt;</code> 并不是 <code>List&lt;Object&gt;</code>的子类。</li></ul><p>#通配符的使用</p><ul><li>有时候我们希望传入的类型在一个指定的范围内，此时就可以使用泛型通配符了。<br>如：之前传入的类型要求为 Integer 类型，但是后来业务需要 Integer 的父类 Number类也可以传入<br>泛型中有三种通配符形式：<br><code>&lt;?&gt;</code>无限制通配符：表示我们可以传入任意类型的参数。<br><code>&lt;? extends E&gt;</code>表示类型的上界是E，只能是E或者是E的子类。<br><code>&lt;?Super E&gt;</code>表示类型的下界是E，只能是E或者是E的父类。</li></ul><h2 id="lt-gt-无限制通配符"><a href="#lt-gt-无限制通配符" class="headerlink" title="&lt;?&gt; 无限制通配符"></a>&lt;?&gt; 无限制通配符</h2><blockquote><p>支持获取不支持添加操作</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210901200017528-1280722883.png" alt="image"></p><h2 id="有限制的通配符"><a href="#有限制的通配符" class="headerlink" title="有限制的通配符"></a>有限制的通配符</h2><p><img src="https://img2020.cnblogs.com/blog/2354934/202109/2354934-20210901200842791-605841131.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-集合类库详解</title>
      <link href="/posts/2553227037.html"/>
      <url>/posts/2553227037.html</url>
      
        <content type="html"><![CDATA[<h1 id="集合的概述"><a href="#集合的概述" class="headerlink" title="集合的概述"></a>集合的概述</h1><h2 id="集合的由来"><a href="#集合的由来" class="headerlink" title="集合的由来"></a>集合的由来</h2><ul><li>当需要在 Java 程序中记录单个数据内容时，则声明一个变量。</li><li>当需要在 Java 程序中记录多个类型相同的数据内容时，声明一个一维数组。</li><li>当需要在 Java 程序中记录多个类型不同的数据内容时，则创建一个对象。</li><li>当需要在 Java 程序中记录多个类型相同的对象数据时，创建一个对象数组。</li><li>当需要在 Java 程序中记录多个类型不同的对象数据时，则准备一个集合。<h2 id="集合的框架结构"><a href="#集合的框架结构" class="headerlink" title="集合的框架结构"></a>集合的框架结构</h2></li><li>Java 中集合框架顶层框架是：<code>java.util.Collection</code>集合和<code>java.util.Map</code>集合。</li><li>其中 Collection 集合中存取元素的基本单位是：单个元素</li><li>其中 Map 集合中存取元素的基本单位是：单对元素</li></ul><h1 id="Collection-集合"><a href="#Collection-集合" class="headerlink" title="Collection 集合"></a>Collection 集合</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><blockquote><p><code>java.util.Collection</code> 接口是 List 接口、 Queue 接口以及 Set 接口的父接口，因此该接口里定义的方法既可用于操作 List 集合，也可用于操作 Queue 集合和 Set 集合。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210827104808612-716858978.png" alt="image"></p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead></table><p>|boolean add(E e)|向集合中添加对象|<br>|boolean addAll(Collection&lt; ? extends E &gt; c)|用于将参数指定集合C中的所有元素添加到当前集合中|</p><p>|boolean contains(Object o)|判断是否包含指定对象|<br>|boolean containsAll(Collection&lt; ? &gt; c)|判断是否包含参数指定的所有对象|<br>|boolean retainAll(Collection&lt; ? &gt; c)|保留当前集合中存在且参数集合中存在的所有对象（交集）|<br>|boolean remove(Object o)|从集合中删除对象|<br>|boolean removeAll(Collection&lt; ? &gt; c)|从集合中删除参数指定的所有对象|<br>|void clear()|清空集合|<br>|int size()|返回包含对象的个数|<br>|boolean isEmpty()|判断是否为空|<br>|boolean equals(Object o)|判断是否相等|<br>|int hashCode()|获取当前集合的哈希码值|<br>|Objecto toArray()|将集合转换为数组|<br>|Iterator&lt; E &gt; iterator|获取当前集合的迭代器|</p><h1 id="Iterator-接口"><a href="#Iterator-接口" class="headerlink" title="Iterator 接口"></a>Iterator 接口</h1><blockquote><p><code>java util.Iterator</code> 接口主要用于描述迭代器对象，可以遍历 Collection 集合中的所有元素。<br><code>java.util.Collection</code>接口继 Iterator接口，因此所有实现 Collection 接口的实现类都可以使用该迭代器对象。</p></blockquote><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>boolean hasNext()</td><td>判断集合中是否有可以迭代 / 访问的元素</td></tr><tr><td>E next()</td><td>用于取出一个元素并指向下一个元素</td></tr><tr><td>void remove()</td><td>用于删除访问到的最后一个元素</td></tr></tbody></table><h1 id="List-集合"><a href="#List-集合" class="headerlink" title="List 集合"></a>List 集合</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><code>java.util.List</code>集合是 Collection 集合的子集合,该集合中允许有重复的元素并且有先后放入次序。</li><li>该集合的主要实现类有: ArrayList类、 LinkedList类、 Stack类、 Vector类。</li><li>其中 ArrayList 类的底层数据管理的，支持下标访问，增删元素不方便。</li><li>其中 Linkedlist 类的底层是采用双向链表进行数据管理的，访问不方便，增删元素方便。</li><li>可以认为 ArrayList 和 lInkedlIst的方法在逻辑上完全样，只是在性能上有一定的差别, ArrayList更适合于机访问而 Linkedlist 更适合于插入和删除；在性能要求不是特别苛刻的情形下可以忽略这个差别。</li><li>其中 Stack 类的底层是采用动态数组进行数据管理的，该类主要用于描述一种具有后进先出特征的数据结构叫做栈(last in first out LIFO)。</li><li>其中 Vector 类的底层是采用动态数组进行数据管理的，该类与 ArrayList 类相比属于线程安全的类，效率比较低。</li></ul><h2 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>void add(int index, E element)</td><td>向集合中指定位置添加元素</td></tr><tr><td>boolean addAll(int index, Collection&lt; ? extends E &gt; c)</td><td>向集合中添加所有元素</td></tr><tr><td>E get(int index)</td><td>从集合中获取指定位置元素</td></tr><tr><td>int indexof(Object o)</td><td>查找参数指定的对象</td></tr><tr><td>int lastIndexOf(Object o)</td><td>查找参数指定的对象</td></tr><tr><td>E set(int index, E element)</td><td>修改指定位置的元素</td></tr><tr><td>E remove(int index)</td><td>删除指定位置的元素</td></tr><tr><td>List&lt; E &gt; subList(int fromIndex, int tolndex）</td><td>用于获取子List</td></tr></tbody></table><h1 id="Queue-集合"><a href="#Queue-集合" class="headerlink" title="Queue 集合"></a>Queue 集合</h1><h2 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><code>java.util.Queue</code>集合是 Collection 集合的子集合，与List集合属于平级关系。</li><li>该集合的主要用于描述具有先进先出特征的数据结构，叫做队列( first in first out FIFO)。</li><li>该集合的主要实现类是 Linkedlist类,因为该类在增删方面比较有优势。</li></ul><h2 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>boolean offer(E e)</td><td>将一个对象添加至队尾，若添加成功则返回 true</td></tr><tr><td>E poll()</td><td>从队首删除并返回一个元素</td></tr><tr><td>E peek()</td><td>返回队首的元素(但并不删除)</td></tr></tbody></table><h1 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h1><h2 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><code>java util.Set</code> 集合是 Collection 集合的子集合，与List集合平级。</li><li>该集合中元素没有先后放入次序。且不允许重复。</li><li>该集合的主要实现类是: HashSet 类和 TreeSet 类以及 LinkedhashSet 类</li><li>其中 HashSet 类的底层是来用哈希表进行数据管理的。</li><li>其中 Treeset 类的底层是采用红黑树进行数据管理的。</li><li>其中 LinkedHashSet 类与 HashSet 类的不同之处在于内部维护了一个双向链表，链表中记录了元素的迭代顺序，也就是元素插入集合中的先后顺序，因此便于迭代。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210827104808612-716858978.png" alt="image"></p><h1 id="TreeSet-集合"><a href="#TreeSet-集合" class="headerlink" title="TreeSet 集合"></a>TreeSet 集合</h1><ul><li>二叉树主要指每个节点最多只有两个子节点的树形结构。</li><li>满足以下3个特征的二叉树叫做有序二叉树:<br>  a 左子树中的任意节点元素都小于根节点元素值;<br>  b 右子树中的任意节点元素都大于根节点元素值;<br>  c 左子树和右子树的内部也遵守上述规则;</li><li>由于 TreeSet 集合的底层采用红黑树进行数据的管理，当有新元素插入到 TreeSet集合时，需要使用新元素与集合中已有的元素依次比较来确定新元素的合理位置。</li><li>比较元素大小的规则有两种方式。<br>  使用元素的自然排序规则进行比较并排序，让元素类型实现 <code>java.lang.Comparable</code>接口;<br>  使用比较器规则进行比较并排序，构造 TreeSet集合时传入 <code>java.util.Comparator</code>接口;</li><li>自然排序的规则比较单一，而比较器的规则比较多元化，而且比较器优先于自然排序。</li></ul><h2 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h2><ul><li>参考 Collection 集合中的方法即可</li></ul><h2 id="元素放入-HashSet-集合的原理"><a href="#元素放入-HashSet-集合的原理" class="headerlink" title="元素放入 HashSet 集合的原理"></a>元素放入 HashSet 集合的原理</h2><ul><li>使用元素调用 hashCode 方法获取对应的哈希码值，再由某种哈希算法计算出该元素在数组中的索引位置。</li><li>若该位置没有元素,则将该元素直接放入即可。</li><li>若该位置有元素，则使用新元素与已有元素依次比较哈希码值，若哈希码值不相同，则将该元素直接放入。</li><li>若新元素与已有元素的哈希码值相同，则使用新元素调用 equals 方法与已有元素依次比较。</li><li>若相等则添加元素失败，否则将元素直接放入即可。</li><li>思考：为什么要求重写equa方法后要重写 hashCode 方法呢?</li><li>解析：<pre><code>当两个元素调用 equals方法相等时证明这两个元素相同，重写 hashCode 方法后保证这两个元素得到的哈希码值相同，由同一个哈希算法生成的索引位置相同，此时只需要与该索引位置已有元素比较即可，从而提高效率并避免重复元素的出现。</code></pre></li></ul><h1 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h1><h2 id="基本概念-4"><a href="#基本概念-4" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><code>java.util.Map&lt;K,V&gt;</code>集合中存取元素的基本单位是：单对元素，其中类型参数如下：<br>  K-此映射所维护的键(Key)的类型，相当于目录<br>  V-映射值(value)的类型，相当于内容。</li><li>该集合中key是不允许重复的，而且一个key只能对应一个 value</li><li>该集合的主要实现类有 HashMap 类、 TreeMap 类、 LinkedHashMa p类、 HashTable 类、Properties 类<br>  其中 HashMap类的底层是采用哈希表进行数据管理的。<br>  其中 TreeMap类的底层是采用红黑树进行数据管理的。<br>  其中 LinkedHashMap 类与 HashMap 类的不同之处在于内部维护了一个双向链表，链表中记录了元素的迭代顺序，也就是元素插入集合中的先后顺，因此便于迭代。<br>  其中 HashTable 类是古老的Map实现类,与 HashMap 类相比属于线程安全的类，且不允许 null 作为 key 或者 value 的数值。<br>  其中 Properties 类是 HashTable 类的子类，该对象用于处理属性文件，key 和 value 都是 String 类型的</li><li>Map 集合是面向查询优化的数据结构，在大数据量情况下有着优良的查询性能。</li><li>经常用于根据 key 检索 value 的业务场景</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210827104844081-1251843567.png" alt="image"></p><h2 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h2><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>V put(K key, V value)</td><td>将 Key-Value 对存入Map，若集合中已经包含该 Key，则替换该 Key 所对应的Value，值为该 Key 原来所对应的 Value,若没有则返回 Null</td></tr><tr><td>V get(Object key)</td><td>返回与参数 Key 所对应的 Value 对象,如果不存在则返回 null</td></tr><tr><td>boolean containsKey(Object key)</td><td>判断集合中是否包含指定的Key</td></tr><tr><td>boolean containsValue(Object value)</td><td>判断集合中是否包含指定的Value</td></tr><tr><td>V remove(Object key)</td><td>根据参数指定的key进行删除</td></tr><tr><td>Set&lt; k &gt; keySet</td><td>返回此映射中包含的键的Set视图</td></tr><tr><td>Collection&lt; v &gt; values()</td><td>回此映射总包含的值的Se视图</td></tr><tr><td>Set&lt; Map.Entry&lt; K,V &gt; entrySet() &gt;</td><td>返回此映射中包含的映射的Set视图</td></tr></tbody></table><h2 id="元素放入-HashMap-集合的原理"><a href="#元素放入-HashMap-集合的原理" class="headerlink" title="元素放入 HashMap 集合的原理"></a>元素放入 HashMap 集合的原理</h2><ul><li>使用元素的 key 调用 hashCode 方法获取对应的哈希码值，再由某种哈希算法计算在数组中的索引位置。</li><li>若该位置没有元素，则将该键值对直接放入即可。</li><li>若该位置有元素，则使用 key 与已有元素依次比较哈希值，若哈希值不相同，则将该元素直接放。</li><li>若 key 与已有元素的哈希值相同，则使用 key 调用 equals 方法与已有元素依次比较。</li><li>若相等则将对应的 value 修改，否则将键值对直接放入即可。</li></ul><h2 id="相关的常量"><a href="#相关的常量" class="headerlink" title="相关的常量"></a>相关的常量</h2><ul><li>DEFAULT_INITIAL_CAPACITY：hashMap 的默认容量是 16。</li><li>DEFAULT_LOAD_FACTOR: HashMap的默认加载因子是 0.75。</li><li>threshold：扩容的临界值，该数值为：容量*填充因子，也就是 12。</li><li>TREEIFY_THRESHOLD：若 Bucket 中链表长度大于该默认值则转化为红黑树存储，该数值是8</li><li>MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量，该数值是64。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式的使用</title>
      <link href="/posts/3498732203.html"/>
      <url>/posts/3498732203.html</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式的概念"><a href="#正则表达式的概念" class="headerlink" title="正则表达式的概念"></a>正则表达式的概念</h1><blockquote><p>正则表达式本质就是一个“规则字符串”，可以用于对字符串数据的格式进行验证，以及匹配查找、替换等操作。该字符串通常使用<code>^</code>运算符作为开头标志,使用<code>$</code>运算符作为结尾标志,当然也可以省略</p></blockquote><h1 id="正则表达式的规则"><a href="#正则表达式的规则" class="headerlink" title="正则表达式的规则"></a>正则表达式的规则</h1><table><thead><tr><th>正则表达式</th><th>说明</th></tr></thead><tbody><tr><td>[abc]</td><td>可以出现a、b、C中任意一个字符</td></tr><tr><td>[^abc]</td><td>可以出现任何字符,除了a、b、c的任意字符</td></tr><tr><td>[a-z]</td><td>a - z 中的任意一个字符</td></tr><tr><td>[a-zA-Z0-9]</td><td>可以出现a-z、A-Z、0-9中任意一个字符</td></tr></tbody></table><table><thead><tr><th>正则表达式</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>任意一个字符(通常不包含换行符)</td></tr><tr><td>/d</td><td>任意一个数字字符,相当于[0-9]</td></tr><tr><td>/D</td><td>任意一个非数字字符</td></tr><tr><td>/s</td><td>空白字符,相当于 [\t\n\x0B\f\r]</td></tr><tr><td>/S</td><td>非空白字符</td></tr><tr><td>/w</td><td>任意一个单词字符,相当于[a-zA-Z0-9]</td></tr><tr><td>/W</td><td>任意一个非单词字符</td></tr></tbody></table><table><thead><tr><th>正则表达式</th><th>说明</th></tr></thead><tbody><tr><td>X?</td><td>表示X可以出现一次或一次也没有,也就是0~1次</td></tr><tr><td>X*</td><td>表示X可以出现零次或多次,也就是0-n次</td></tr><tr><td>X+</td><td>表示X可以出现一次或多次,也就是1~n次</td></tr><tr><td>X{n}</td><td>表示X可以出现恰好n次</td></tr><tr><td>X{n,}</td><td>表示X可以出现至少n次,也就是&gt;=n次</td></tr><tr><td>X{n,m}</td><td>表示X可以出现至少n次,但是不超过m次,也就是&gt;=n并且&lt;=m次</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 斐波那契数列的编程实现</title>
      <link href="/posts/2889667683.html"/>
      <url>/posts/2889667683.html</url>
      
        <content type="html"><![CDATA[<h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><blockquote><p>编程实现费式数列中第 n 项的数值并返回。<br>费式数列：<code>1 1 2 3 5 8 13 21</code></p></blockquote><h1 id="分析规律"><a href="#分析规律" class="headerlink" title="分析规律"></a>分析规律</h1><ol><li>第 1 项和第 2 项固定为 1。</li><li>从第 3 项起每一个数值是前两项的和。</li></ol><h1 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h1><blockquote><p>递归实现会影响程序的执行性能 不推荐使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public int recursion(int n) &#123; // int n = 5; int n = 4; int n = 3; int n = 2; n = 1;</span><br><span class="line">    // 当 n == 1 或 n == 2 时返回 1</span><br><span class="line">    if (n == 1 || n == 2) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    // 否则是前两者的和</span><br><span class="line">    return recursion(n - 1) + recursion(n - 2);</span><br><span class="line">    // 分析执行</span><br><span class="line">    // recursion(5) =&gt; return recursion(4)+ recursion(3); =&gt; 5</span><br><span class="line">    // recursion(4) =&gt; return recursion(3)+ recursion(2); =&gt; 3</span><br><span class="line">    // recursion(3) =&gt; return recursion(2)+ recursion(1); =&gt; 2</span><br><span class="line">    // recursion(2) =&gt; return 1;                          =&gt; 1</span><br><span class="line">    // recursion(1) =&gt; return 1;                          =&gt; 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    MathSeries series = new MathSeries();</span><br><span class="line">    int num = series.seriesRecursion(40);</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="递推实现"><a href="#递推实现" class="headerlink" title="递推实现"></a>递推实现</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> public int seriesFor(int n) &#123;</span><br><span class="line">       // 当 n == 1 或 n == 2 时返回 1</span><br><span class="line">       if (n == 1 || n == 2) &#123;</span><br><span class="line">           return 1;</span><br><span class="line">       &#125;</span><br><span class="line">       int ia = 1; // 前 2 项</span><br><span class="line">       int ib = 1; // 前 1 项</span><br><span class="line">       // 从第 3 项开始计算</span><br><span class="line">       for (int i = 3; i &lt;= n; i++) &#123;</span><br><span class="line">           int result = ia + ib; // 前两者的和</span><br><span class="line">           ia = ib; // 将前第 1 项移至 2 项</span><br><span class="line">           ib = result; // 将第一项设为前两项的和</span><br><span class="line">       &#125;</span><br><span class="line">       return ib;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">       MathSeries series = new MathSeries();</span><br><span class="line">       int num = series.seriesFor(10);</span><br><span class="line">       System.out.println(num);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-数据类型详解</title>
      <link href="/posts/2002672519.html"/>
      <url>/posts/2002672519.html</url>
      
        <content type="html"><![CDATA[<h1 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h1><blockquote><p>Java语言中描述整数数据的类型有：byte、 short、int、long，荐int类型</p></blockquote><p>规律：1个字节为<code>-2^(8 - 1) ~ 2^(8 - 1)-1</code>那么类型在内存空间中占 n 个字节表示范围是：<code>2^(8 * n - 1) ~  2^(8 - 1)-1</code></p><ol><li>其中 <code>byte</code>  类型在内存空间中占1个字节，表示范围是：<code>-2^7 ~ 2^7-1</code>.</li><li>其中 <code>short</code> 类型在内存空间中占2个字节，表示范围是：<code>-2^15 ~ 2^15-1</code>.</li><li>其中 <code>int</code>   类型在内存空间中占4个字节，表示范围是：<code>-2^31 ~ 2^31-1</code>.</li><li>其中 <code>long</code>  类型在内存空间中占8个字节，表示范围是：<code>-2^63 ~ 2^63-1</code>.</li></ol><p>在 Java 中整数直接量默认为 int 类型</p><h1 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h1><blockquote><p>Java语言中用于描述小数数据的类型：float 和 double，推荐 double 类型<br>float 和 double 在运算中都可能有误差不能做到精确运算<br>商业项目涉及到金钱一般都不会用浮点类型，若希望实现精确运算则借助<code>java.math.BigDecimal</code>类型</p></blockquote><ol><li>其中 <code>float</code> 类型在内存空间占 4 个字节，单精度浮点数，可以表示7位有效数字，范围：<code>-3.403E38 ~ 3.403E38</code> (E38 = 10^38).</li><li>其中 <code>double</code> 类型在内存空间占 8 个字节，双精度浮点数，可以表示15位有效数字，范围：<code>-1.798E308~1.798E308</code>.</li></ol><p>在 Java 中小数数据直接量默认为 double 类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">错误:不兼容的类型:从 double 转换到 float 可能会有损失小数数据叫做直接量,默认为 double 类型</span><br><span class="line">float fl = 3.1415926;</span><br></pre></td></tr></table></figure><h1 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h1><blockquote><p>Java语言中用于描述真假信息类型有: boolean，数值只有：<code>true</code> 和 <code>false</code></p></blockquote><p>布尔类型在内存空间中所占大小没有明确的规定，可以认为是1个字节。</p><h1 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h1><blockquote><p>Java字符类型采用 <code>Unicode</code> 字符集编码。 Unicode 是世界通用的定长字符集，所有的字符都是 16 位。</p></blockquote><ol><li>Java语言中用于描述单个字符的数据类型：<code>char</code> 类型。如:<code>&#39;a&#39;</code>、<code>&#39;中&#39;</code>等。</li></ol><blockquote><p>其中 <code>char</code> 类型在内存空间中占 2 个字节并且没有符号位，表示的范围是<code>0 ~ 65535</code>，由于现实生活中很少有数据能够被单个字符描述，因此以后的开发中更多的使用由多个字符串起来组成的字符串，使用 <code>String</code> 类型加以描述，如：”helo”、”奇点”等。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解二进制和十进制的转换</title>
      <link href="/posts/3956981598.html"/>
      <url>/posts/3956981598.html</url>
      
        <content type="html"><![CDATA[<h1 id="十进制转换二进制"><a href="#十进制转换二进制" class="headerlink" title="十进制转换二进制"></a>十进制转换二进制</h1><h2 id="拆分法"><a href="#拆分法" class="headerlink" title="拆分法"></a>拆分法</h2><blockquote><p>将十进制整数拆分为若千个二进制权重的和,有该权重下面写 1,否则写 0。<br>权重等于 10^1~n 次方<br>拆分出来必须是权重中的数字！</p></blockquote><p><strong>正十进制转换为二进制</strong></p><blockquote><p>求 45 的二进制</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 权重</span><br><span class="line">1 2 4 8 16 32 64 128 ...</span><br><span class="line"></span><br><span class="line">1. 45           最近的权重为 32</span><br><span class="line">2. 45 - 32 = 13 权重为 8</span><br><span class="line">3. 13 - 8  = 5  权重为 4</span><br><span class="line">4. 5  - 4  = 1  的权中为 1</span><br><span class="line"></span><br><span class="line">45 =&gt; 32, 8, 4, 1</span><br><span class="line"></span><br><span class="line">有该权重下面写1,否则写0。</span><br><span class="line">1 2 4 8 16 32 64 128 ...</span><br><span class="line">1 0 1 1 0  1  0   0</span><br><span class="line">逆向排序可得二进制为 0010 1101</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>负十进制转换为二进制</strong></p><blockquote><p>先将十进制的绝对值转换为二进制,然后进行按位取反再加1<br>负数的需要补码:按位取反,再加1<br><strong>求-45的二进制</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.将-45的绝对值转换为二进制:0010 1101</span><br><span class="line">2.按位取反(通俗来说就是 0 变成 1，1 变成 0)</span><br><span class="line">0010 1101 按位取反 得 1101 0010</span><br><span class="line">3.在末尾加上 1，得 1101 0011 （如果末尾已经是 1 则需要进位）</span><br><span class="line"></span><br><span class="line">验证：</span><br><span class="line">45 和 -45 互为相反数 所以 -45 + 45 = 0</span><br><span class="line">45  =&gt; 0010 1101</span><br><span class="line">-45 =&gt; 1101 0011</span><br><span class="line">运算：</span><br><span class="line"> 0010 1101</span><br><span class="line"> 1101 0011 +</span><br><span class="line"> ——————————— =</span><br><span class="line">1 0000 0000</span><br><span class="line">1 高位溢出舍弃了 最后结果为 0000 0000 = 0</span><br></pre></td></tr></table></figure><h2 id="除-2-取余法"><a href="#除-2-取余法" class="headerlink" title="除 2 取余法"></a>除 2 取余法</h2><blockquote><p>使用十进制整数不断地除以 2 取出余数,直到商为 0 时将余数逆序排序。</p></blockquote><p><strong>转换 45 为二进制</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">45 / 2 = 22 ... 1</span><br><span class="line">22 / 2 = 11 ... 0</span><br><span class="line">11 / 2 = 5  ... 1</span><br><span class="line">5  / 2 = 2  ... 1</span><br><span class="line">2  / 2 = 1  ... 0</span><br><span class="line">1  / 2 = 0  ... 1</span><br><span class="line">将余数逆向排序可得：10 1101</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二进制转换为十进制"><a href="#二进制转换为十进制" class="headerlink" title="二进制转换为十进制"></a>二进制转换为十进制</h1><h2 id="加权法"><a href="#加权法" class="headerlink" title="加权法"></a>加权法</h2><blockquote><p>使用二进制中的每个数字乘以当前位的权重再累加起来。<br>权重等于 10^n~1次方<br>加权必须是权重中的数字！<br><code>与正十进制转换二进制 拆分法</code>是互逆的</p></blockquote><p><strong>正二进制转换为十进制</strong></p><blockquote><p>转换 11 0010 为十进制</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">逆向可得 01 0011</span><br><span class="line"></span><br><span class="line"># 权重</span><br><span class="line">1 2 4 8 16 32 64 128 ...</span><br><span class="line">0 1 0 0 1  1  0  0</span><br><span class="line">可得 2 + 16 + 32 = 50</span><br><span class="line"></span><br><span class="line">11 0010 的二进制为 50</span><br><span class="line"></span><br><span class="line">也可以记为（由 0 位开始）</span><br><span class="line">0 * 2^0 + 1 * 2^1 + 0 * 2^2 + 0 * 2^3  + 1 * 2^4  + 1 * 2^5</span><br><span class="line">0 + 2 + 0 + 0 + 16 + 32 = 50</span><br><span class="line"></span><br><span class="line">因为 0 乘任何数都得 0，则可简化为</span><br><span class="line">2^1 + 2^4 + 2^5 = 2 + 16 + 32 = 50</span><br></pre></td></tr></table></figure><p><strong>负二进制转换为十进制</strong></p><blockquote><p>转换 1101 0011 为十进制</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.先减1:得1101 0010</span><br><span class="line">2.按位取反:0010 1101</span><br><span class="line">3.使用加权法</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows11 安装Arch Linux WSL2 记录</title>
      <link href="/posts/83577698.html"/>
      <url>/posts/83577698.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装-WSL2"><a href="#安装-WSL2" class="headerlink" title="安装 WSL2"></a>安装 WSL2</h1><blockquote><p>启用子系统和虚拟机平台 然后重启系统<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210701231036875-548285353.png" alt="image"></p></blockquote><p>WSL 2 要求系统版本应该在 Windows 10, Version 2004, Build 19041 及以上。<br>以管理员身份打开 powershell，运行如下命令以启动需要的组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><p>然后重启。并且在 <a href="https://github.com/yuk7/ArchWSL" title="此处">此处</a> 下载并安装适用于 x64 计算机的最新 WSL2 Linux 内核更新包。<br>打开 powershell，运行如下命令以将 wsl 的默认版本设置为 WSL 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><p>更新WSL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl.exe --update</span><br></pre></td></tr></table></figure><h1 id="安装-Arch-WSL"><a href="#安装-Arch-WSL" class="headerlink" title="安装 Arch WSL"></a>安装 Arch WSL</h1><p>在<a href="https://github.com/yuk7/ArchWSL/releases/latest" title="yuk7/ArchWSL - releases">yuk7/ArchWSL - releases</a>下载 Arch.appx / Arch.zip，解压，双击 Arch.exe 进行安装。详见<a href="https://wsldl-pg.github.io/ArchW-docs/locale/zh-CN/" title="ArchWSL documentation">ArchWSL documentation</a>。</p><h1 id="更换国内镜像源"><a href="#更换国内镜像源" class="headerlink" title="更换国内镜像源"></a>更换国内镜像源</h1><blockquote><p>PS: 以下部分都以 root 用户身份运行命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">passwd # 设置密码</span><br><span class="line"></span><br><span class="line"># 设置软件源</span><br><span class="line">echo &#x27;Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch&#x27; &gt;&gt; /etc/pacman.d/mirrorlist</span><br><span class="line">echo &#x27;Server = https://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch&#x27; &gt; /etc/pacman.d/mirrorlist</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="启用-multilib-库"><a href="#启用-multilib-库" class="headerlink" title="启用 multilib 库"></a>启用 multilib 库</h1><p>multilib 库包含 64 位系统中需要的 32 位软件和库。</p><p>vim /etc/pacman.conf，取消这几行的注释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[multilib]</span><br><span class="line">Include = /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><p><strong>并且取消该文件中 #Color 这一行的注释，以启用彩色输出。</strong></p><h1 id="添加-archlinuxcn-源"><a href="#添加-archlinuxcn-源" class="headerlink" title="添加 archlinuxcn 源"></a>添加 archlinuxcn 源</h1><blockquote><p>Arch Linux 中文社区仓库 是由 Arch Linux 中文社区驱动的非官方用户仓库。包含中文用户常用软件、工具、字体/美化包等。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pacman.conf</span><br></pre></td></tr></table></figure><p>在文件末尾加上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.aliyun.com/archlinuxcn/$arch</span><br></pre></td></tr></table></figure><blockquote><p>其他的见 <a href="https://github.com/archlinuxcn/mirrorlist-repo">https://github.com/archlinuxcn/mirrorlist-repo</a> 最好是用自己学校的</p></blockquote><p>然后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 初始化 keyring</span><br><span class="line">pacman-key --init</span><br><span class="line">pacman-key --populate</span><br><span class="line">pacman -Syu # 更新</span><br><span class="line">pacman -S archlinuxcn-keyring</span><br><span class="line">pacman -Syy # 更新</span><br></pre></td></tr></table></figure><h1 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h1><blockquote><p>注：此处的 yourname 是你要创建的用户名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. 新建用户。-m 为用户创建家目录；-G wheel 将用户添加到 wheel 用户组</span><br><span class="line">useradd -m -G wheel yourname</span><br><span class="line"></span><br><span class="line">2. 设置密码</span><br><span class="line">passwd yourname</span><br><span class="line"></span><br><span class="line">3. 因为 visudo 需要 vi</span><br><span class="line">ln -s /usr/bin/vim /usr/bin/vi</span><br><span class="line"></span><br><span class="line">4. 编辑 /etc/sudoers</span><br><span class="line">visudo</span><br><span class="line"></span><br><span class="line">将以下两行行首的#去掉</span><br><span class="line"># %wheel ALL=(ALL) ALL</span><br><span class="line"># %wheel ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>在 powershell 中进入到 Arch.exe 所在文件夹，设置 WSL 默认登陆用户和默认的 WSL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.\Arch.exe config --default-user yourname</span><br><span class="line">wsl -s Arch</span><br></pre></td></tr></table></figure><p>重新打开，就是在 yourname 用户了。</p><h1 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h1><h2 id="安装-yay"><a href="#安装-yay" class="headerlink" title="安装 yay"></a>安装 yay</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S --needed base-devel</span><br></pre></td></tr></table></figure><p>出现:: fakeroot is in IgnorePkg/IgnoreGroup. Install anyway? [Y/n]，选 n，接下来一直回车即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S --needed yay</span><br></pre></td></tr></table></figure><h2 id="yay-换源"><a href="#yay-换源" class="headerlink" title="yay 换源"></a>yay 换源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay --aururl &quot;https://aur.tuna.tsinghua.edu.cn&quot; --save</span><br></pre></td></tr></table></figure><h1 id="安装-ZSH"><a href="#安装-ZSH" class="headerlink" title="安装 ZSH"></a>安装 ZSH</h1><h2 id="安装-Terminal-字体"><a href="#安装-Terminal-字体" class="headerlink" title="安装 Terminal 字体"></a>安装 Terminal 字体</h2><p>给 windows 安装以下字体，并且改变 windows terminal 的字体设置(这里就不细说了)：<br><a href="https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/Meslo/S/Regular/complete" title="MesloLGS NF">MesloLGS NF</a> powerlevel10k 作者推荐<br><a href="https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/FiraCode/Regular/complete" title="FiraCode NF">FiraCode NF</a> 我更喜欢这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S zsh</span><br></pre></td></tr></table></figure><h2 id="安装-OH-MY-ZSH"><a href="#安装-OH-MY-ZSH" class="headerlink" title="安装 OH MY ZSH"></a>安装 OH MY ZSH</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 第一步 → 把 oh-my-zsh 项目 Clone 下来：</span><br><span class="line"></span><br><span class="line">git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class="line"># 第二步 → 复制 .zshrc</span><br><span class="line"></span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line"># 第三步 → 更改你的默认 Shell</span><br><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h2 id="推荐ZSH插件"><a href="#推荐ZSH插件" class="headerlink" title="推荐ZSH插件"></a>推荐ZSH插件</h2><p>可以参考</p><blockquote><p><a href="https://hufangyun.com/2017/zsh-plugin/">https://hufangyun.com/2017/zsh-plugin/</a></p></blockquote><h1 id="使用-proxychains-代理终端程序"><a href="#使用-proxychains-代理终端程序" class="headerlink" title="使用 proxychains 代理终端程序"></a>使用 proxychains 代理终端程序</h1><blockquote><p>可以使用 windows 的 qv②ray/clash/ssr 等代理软件来代理 wsl 中的程序！先安装 proxychains：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S proxychains-ng</span><br></pre></td></tr></table></figure><p>首先，sudo vim /etc/proxychains.conf，将proxy_dns这一行注释。（这样能够让 proxychains 代理 yay）</p><p>如果用的是 WSL 1，那就 sudo vim /etc/proxychains.conf，将最后一行的 socks4 127.0.0.1 9095 修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socks5 127.0.0.1 1080</span><br></pre></td></tr></table></figure><p>这个 1080 是我的 ssr 的 HTTP 端口号，改成你自己的。如果你用的是 WSL 2，由于目前 WSL 2 和 windows 的 ip 不同，我们需要先cp -f /etc/proxychains.conf <del>/.proxychains.conf，然后在</del>/.zshrc中添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 获取windows的ip</span><br><span class="line">export WIN_IP=`cat /etc/resolv.conf | grep nameserver | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"># 删除 ~/.proxychains.conf 中 [ProxyList] 所在行到文件末尾的全部内容</span><br><span class="line">sed -i &#x27;/\[ProxyList\]/,$d&#x27; ~/.proxychains.conf</span><br><span class="line"># 往文件末尾添加socks5/http设置，这个 1080 是我的 qv②ray 的 socks5/http 端口号，改成你自己的</span><br><span class="line">echo &#x27;[ProxyList]\nhttp &#x27;$&#123;WIN_IP&#125;&#x27; 1080&#x27; &gt;&gt; ~/.proxychains.conf</span><br><span class="line"># 设置别名；使用 ~/.proxychains.conf 作为proxychains的配置文件；让proxychains quiet（不输出一大串东西）</span><br><span class="line">alias pc=&#x27;proxychains4 -q -f ~/.proxychains.conf&#x27;</span><br><span class="line"># 用来手动开关代理，建议走 http 协议，因为 wget 不支持 socks5</span><br><span class="line">my_proxy=http://$&#123;WIN_IP&#125;:1080</span><br><span class="line">alias p-on=&#x27;export all_proxy=&#x27;$&#123;my_proxy&#125;&#x27; http_proxy=&#x27;$&#123;my_proxy&#125;&#x27; https_proxy=&#x27;$&#123;my_proxy&#125;&#x27;&#x27;</span><br><span class="line">alias p-off=&#x27;unset all_proxy http_proxy https_proxy&#x27;</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在 yourname 用户中</span><br><span class="line">sudo ln -s ~/.proxychains.conf /root/.proxychains.conf</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>如果你发现还是无法代理，那可能是因为你的代理软件没打开<code>允许来自局域网的连接</code>选项</p><blockquote><p>注：pc ping google.com是没有效果的，因为 proxychains 只会代理 TCP。</p></blockquote><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>ArchLinuxx目录 从文件资源管理器 <code>\\wsl$</code> 访问</p><p>本文到这里就结束了，有疑问欢迎评论哦😉</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP无限级分类(递归)</title>
      <link href="/posts/3181363109.html"/>
      <url>/posts/3181363109.html</url>
      
        <content type="html"><![CDATA[<h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><blockquote><p>没什么可说的直接看代码</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//模拟假数据</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">arr</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$rows</span> = [</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;一级菜单&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;pid&#x27;</span> =&gt; <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;二级菜单&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;pid&#x27;</span> =&gt; <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;一级菜单-1&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;pid&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;0-1&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;二级菜单-1&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;pid&#x27;</span> =&gt; <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;0-2&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;5&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;一级菜单-1-1&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;pid&#x27;</span> =&gt; <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;0-1-3&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;6&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;二级菜单-1-1&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;pid&#x27;</span> =&gt; <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;0-2-4&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;7&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;二级菜单-1-2&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;pid&#x27;</span> =&gt; <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;0-2-4&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;8&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;三级菜单&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;pid&#x27;</span> =&gt; <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;二级菜单-1-3&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;pid&#x27;</span> =&gt; <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;0-2-4-6&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;三级菜单-1&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;pid&#x27;</span> =&gt; <span class="string">&#x27;8&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;0-8&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;11&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;一级菜单-1-4&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;pid&#x27;</span> =&gt; <span class="string">&#x27;5&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;0-8&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$rows</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//获取从第0级下的所有分类（pid==0）</span></span><br><span class="line">        <span class="variable">$list</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">build_tree</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">json</span>(<span class="variable">$list</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归子级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findChild</span>(<span class="params"><span class="variable">$list</span>, <span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$child</span> = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$list</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>) &#123;</span><br><span class="line">            <span class="comment">//如果pid等于传进来</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$item</span>[<span class="string">&#x27;pid&#x27;</span>] == <span class="variable">$id</span>) &#123;</span><br><span class="line">                <span class="variable">$child</span>[] = <span class="variable">$item</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$child</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前级别的子级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $root_id /第几层</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">build_tree</span>(<span class="params"><span class="variable">$root_id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//获取假数据</span></span><br><span class="line">        <span class="variable">$list</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">arr</span>();</span><br><span class="line">        <span class="comment">//查找指定级数</span></span><br><span class="line">        <span class="variable">$tree</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">findChild</span>(<span class="variable">$list</span>, <span class="variable">$root_id</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$tree</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历获取到的层级得到下级分类</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$tree</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>) &#123;</span><br><span class="line">            <span class="comment">//递归调用自己 查找每个元素下的分类</span></span><br><span class="line">            <span class="variable">$child</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">build_tree</span>(<span class="variable">$item</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">            <span class="comment">//如果有子类就放入数组中</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$child</span> != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="variable">$tree</span>[<span class="variable">$key</span>][<span class="string">&#x27;child&#x27;</span>] = <span class="variable">$child</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$tree</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="预览结果"><a href="#预览结果" class="headerlink" title="预览结果"></a>预览结果</h1><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210411200023334-299438163.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 实现整合log4j2日志</title>
      <link href="/posts/3189214580.html"/>
      <url>/posts/3189214580.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于日志级别"><a href="#关于日志级别" class="headerlink" title="关于日志级别"></a>关于日志级别</h1><blockquote><p>共有8个级别，按照从低到高为：All &lt; Trace &lt; Debug &lt; Info &lt; Warn &lt; Error &lt; Fatal &lt; OFF.</p></blockquote><ol><li>All： 最低等级的，用于打开所有日志记录.</li><li>Trace： 是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出.</li><li>Debug： 指出细粒度信息事件对调试应用程序是非常有帮助的.</li><li>Info： 消息在粗粒度级别上突出强调应用程序的运行过程.</li><li>Warn： 输出警告及warn以下级别的日志.</li><li>Error： 输出错误信息日志.</li><li>Fatal： 输出每个严重的错误事件将会导致应用程序的退出的日志.</li><li>OFF： 最高等级的，用于关闭所有日志记录.</li></ol><p><strong>程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。</strong></p><h1 id="排除-spring-boot-自带的-logback-依赖"><a href="#排除-spring-boot-自带的-logback-依赖" class="headerlink" title="排除 spring-boot 自带的 logback 依赖"></a>排除 spring-boot 自带的 logback 依赖</h1><blockquote><p>因为多个日志组件在一起的话会产生冲突 需要排除 spring-boot 自带的 logback 依赖<br><code>pom.xml</code>中原有的spring-boot-web 依赖中添加 <code>exclusion</code>标签</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="line">&lt;/exclusion&gt;</span><br><span class="line">&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="添加-log4j2-依赖"><a href="#添加-log4j2-依赖" class="headerlink" title="添加 log4j2 依赖"></a>添加 log4j2 依赖</h1><blockquote><p>不需要设置版本 会自动跟具当前 spring-boot 版本进行匹配</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="配置文件节点解析"><a href="#配置文件节点解析" class="headerlink" title="配置文件节点解析"></a>配置文件节点解析</h1><h2 id="根节点Configuration"><a href="#根节点Configuration" class="headerlink" title="根节点Configuration"></a>根节点Configuration</h2><blockquote><p>有两个属性：status 和 monitorinterval ,有两个子节点：Appenders和Loggers(表明可以定义多个Appender和Logger) </p></blockquote><pre><code>status： 用来指定log4j本身的打印日志的级别.monitorinterval： 用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s</code></pre><h2 id="Appenders节点"><a href="#Appenders节点" class="headerlink" title="Appenders节点"></a>Appenders节点</h2><blockquote><p>常见的有三种子节点：Console、RollingFile、File.</p></blockquote><h3 id="Console节点用来定义输出到控制台的Appender"><a href="#Console节点用来定义输出到控制台的Appender" class="headerlink" title="Console节点用来定义输出到控制台的Appender."></a>Console节点用来定义输出到控制台的Appender.</h3><pre><code>name： 指定Appender的名字.target： SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认：SYSTEM_OUT.PatternLayout： 输出格式，不设置默认为：%m%n.</code></pre><h3 id="File节点用来定义输出到指定位置的文件的Appender"><a href="#File节点用来定义输出到指定位置的文件的Appender" class="headerlink" title="File节点用来定义输出到指定位置的文件的Appender."></a>File节点用来定义输出到指定位置的文件的Appender.</h3><pre><code>name： 指定Appender的名字.fileName： 指定输出日志的目的文件带全路径的文件名.PatternLayout： 输出格式，不设置默认为：%m%n.</code></pre><h3 id="RollingFile节点用来定义超过指定大小自动删除旧的创建新的的Appender"><a href="#RollingFile节点用来定义超过指定大小自动删除旧的创建新的的Appender" class="headerlink" title="RollingFile节点用来定义超过指定大小自动删除旧的创建新的的Appender."></a>RollingFile节点用来定义超过指定大小自动删除旧的创建新的的Appender.</h3><pre><code>name： 指定Appender的名字.fileName： 指定输出日志的目的文件带全路径的文件名.PatternLayout： 输出格式，不设置默认为：%m%n.filePattern： 指定新建日志文件的名称格式.Policies： 指定滚动日志的策略，就是什么时候进行新建日志文件输出日志.TimeBasedTriggeringPolicy： Policies子节点，基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。        modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am…而不是7am.SizeBasedTriggeringPolicy： Policies子节点，基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小.DefaultRolloverStrategy： 用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性)。</code></pre><h2 id="Loggers节点"><a href="#Loggers节点" class="headerlink" title="Loggers节点"></a>Loggers节点</h2><blockquote><p>常见的有两种：Root和Logger.</p></blockquote><h3 id="Root节点"><a href="#Root节点" class="headerlink" title="Root节点"></a>Root节点</h3><blockquote><p>用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出</p></blockquote><p>level： 日志输出级别，共有8个级别，按照从低到高为：All &lt; Trace &lt; Debug &lt; Info &lt; Warn &lt; Error &lt; Fatal &lt; OFF.<br>AppenderRef： Root的子节点，用来指定该日志输出到哪个Appender.</p><h3 id="Logger节点"><a href="#Logger节点" class="headerlink" title="Logger节点"></a>Logger节点</h3><blockquote><p>用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。</p></blockquote><p>level： 日志输出级别，共有8个级别，按照从低到高为：All &lt; Trace &lt; Debug &lt; Info &lt; Warn &lt; Error &lt; Fatal &lt; OFF.<br>name： 用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点.<br>AppenderRef： Logger的子节点，用来指定该日志输出到哪个Appender,如果没有指定，就会默认继承自Root.如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，此时我们可以设置Logger的additivity=”false”只在自定义的Appender中进行输出。</p><h1 id="配置-log4j2"><a href="#配置-log4j2" class="headerlink" title="配置 log4j2"></a>配置 log4j2</h1><blockquote><p>将配置 <code>log4j2.xml</code> 配置文件放在 resource 目录中<br>例如以下完整的日志配置文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span><br><span class="line">&lt;!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出--&gt;</span><br><span class="line">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--&gt;</span><br><span class="line">&lt;configuration status=&quot;WARN&quot; monitorInterval=&quot;30&quot;&gt;</span><br><span class="line">    &lt;!--先定义所有的appender--&gt;</span><br><span class="line">    &lt;appenders&gt;</span><br><span class="line">        &lt;!--这个输出控制台的配置--&gt;</span><br><span class="line">        &lt;console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class="line">            &lt;!--输出日志的格式--&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n&quot;/&gt;</span><br><span class="line">        &lt;/console&gt;</span><br><span class="line">        &lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用--&gt;</span><br><span class="line">        &lt;File name=&quot;log&quot; fileName=&quot;log/test.log&quot; append=&quot;false&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;/&gt;</span><br><span class="line">        &lt;/File&gt;</span><br><span class="line">        &lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span><br><span class="line">        &lt;RollingFile name=&quot;RollingFileInfo&quot; fileName=&quot;$&#123;sys:user.home&#125;/IdeaProjects/logs/info.log&quot;</span><br><span class="line">                     filePattern=&quot;$&#123;sys:user.home&#125;/IdeaProjects/logs/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;!--level=&quot;info&quot; :日志级别,onMatch=&quot;ACCEPT&quot; :级别在info之上则接受,onMismatch=&quot;DENY&quot; :级别在info之下则拒绝--&gt;</span><br><span class="line">            &lt;ThresholdFilter level=&quot;info&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n&quot;/&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;!-- 每天滚动一次 --&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot; modulate=&quot;true&quot; /&gt;</span><br><span class="line">                &lt;!-- 或者日志达到1MB 滚动一次 --&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size=&quot;1M&quot;/&gt;</span><br><span class="line">            &lt;/Policies&gt;</span><br><span class="line">        &lt;/RollingFile&gt;</span><br><span class="line">        &lt;RollingFile name=&quot;RollingFileWarn&quot; fileName=&quot;$&#123;sys:user.home&#125;/IdeaProjects/logs/warn.log&quot;</span><br><span class="line">                     filePattern=&quot;$&#123;sys:user.home&#125;/IdeaProjects/logs/$$&#123;date:yyyy-MM&#125;/warn-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;ThresholdFilter level=&quot;warn&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n&quot;/&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;!-- 每天滚动一次 --&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot; modulate=&quot;true&quot; /&gt;</span><br><span class="line">                &lt;!-- 或者日志达到1MB 滚动一次 --&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size=&quot;1M&quot;/&gt;</span><br><span class="line">            &lt;/Policies&gt;</span><br><span class="line">            &lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 --&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max=&quot;20&quot;/&gt;</span><br><span class="line">        &lt;/RollingFile&gt;</span><br><span class="line">        &lt;RollingFile name=&quot;RollingFileError&quot; fileName=&quot;$&#123;sys:user.home&#125;/IdeaProjects/logs/error.log&quot;</span><br><span class="line">                     filePattern=&quot;$&#123;sys:user.home&#125;/IdeaProjects/logs/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n&quot;/&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;!-- 每天滚动一次 --&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot; modulate=&quot;true&quot; /&gt;</span><br><span class="line">                &lt;!-- 或者日志达到1MB 滚动一次 --&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size=&quot;1M&quot;/&gt;</span><br><span class="line">            &lt;/Policies&gt;</span><br><span class="line">        &lt;/RollingFile&gt;</span><br><span class="line">    &lt;/appenders&gt;</span><br><span class="line">    &lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span><br><span class="line">    &lt;loggers&gt;</span><br><span class="line">        &lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息--&gt;</span><br><span class="line">        &lt;logger name=&quot;org.springframework&quot; level=&quot;INFO&quot;/&gt;</span><br><span class="line">        &lt;logger name=&quot;org.mybatis&quot; level=&quot;INFO&quot;/&gt;</span><br><span class="line">        &lt;root level=&quot;all&quot;&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;Console&quot;/&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;RollingFileInfo&quot;/&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;RollingFileWarn&quot;/&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;RollingFileError&quot;/&gt;</span><br><span class="line">        &lt;/root&gt;</span><br><span class="line">    &lt;/loggers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h1 id="log4j-properties-配置文件"><a href="#log4j-properties-配置文件" class="headerlink" title="log4j.properties 配置文件"></a>log4j.properties 配置文件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># log4j.rootLogger日志输出类别和级别：只输出不低于该级别的日志信息DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</span><br><span class="line"># WARN:日志级别     CONSOLE：输出位置自己定义的一个名字       logfile：输出位置自己定义的一个名字</span><br><span class="line">log4j.rootLogger=INFO,CONSOLE,logfile</span><br><span class="line"># 配置CONSOLE输出到控制台</span><br><span class="line">log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</span><br><span class="line"># 配置CONSOLE设置为自定义布局模式</span><br><span class="line">log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</span><br><span class="line"># 配置CONSOLE日志的输出格式  [frame] 2019-08-22 22:52:12,000  %r耗费毫秒数 %p日志的优先级 %t线程名 %C所属类名通常为全类名 %L代码中的行号 %x线程相关联的NDC %m日志 %n换行</span><br><span class="line">log4j.appender.CONSOLE.layout.ConversionPattern=[frame] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; - %-4r %-5p [%t] %C:%L %x - %m%n</span><br><span class="line"></span><br><span class="line">################</span><br><span class="line"># 输出到日志文件中</span><br><span class="line">################</span><br><span class="line"></span><br><span class="line"># 配置logfile输出到文件中 文件大小到达指定尺寸的时候产生新的日志文件</span><br><span class="line">log4j.appender.logfile=org.apache.log4j.RollingFileAppender</span><br><span class="line"># 保存编码格式</span><br><span class="line">log4j.appender.logfile.Encoding=UTF-8</span><br><span class="line"># 输出文件位置此为项目根目录下的logs文件夹中</span><br><span class="line">log4j.appender.logfile.File=logs/root.log</span><br><span class="line"># 后缀可以是KB,MB,GB达到该大小后创建新的日志文件</span><br><span class="line">log4j.appender.logfile.MaxFileSize=10MB</span><br><span class="line"># 设置滚定文件的最大值3 指可以产生root.log.1、root.log.2、root.log.3和root.log四个日志文件</span><br><span class="line">log4j.appender.logfile.MaxBackupIndex=3</span><br><span class="line"># 配置logfile为自定义布局模式</span><br><span class="line">log4j.appender.logfile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.logfile.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %F %p %m%n</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot实现整合mybatis-generator-maven-plugin 1.4.0</title>
      <link href="/posts/2829209518.html"/>
      <url>/posts/2829209518.html</url>
      
        <content type="html"><![CDATA[<h1 id="创建-Maven-工程"><a href="#创建-Maven-工程" class="headerlink" title="创建 Maven 工程"></a>创建 Maven 工程</h1><blockquote><p>网上有很多教程且 Idea 可以直接创建 这里就不进行</p></blockquote><h1 id="pom-xml-引入依赖和插件"><a href="#pom-xml-引入依赖和插件" class="headerlink" title="pom.xml 引入依赖和插件"></a>pom.xml 引入依赖和插件</h1><blockquote><p>pom中generalto-maven-plugs中必须指定mysql驱动,并且明确版本</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.5.0&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;top.orginly&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mall&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;mall&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;11&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- mysql8 驱动 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;8.0.24&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!-- springboot的maven插件 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!-- mybatis用于生成代码的配置文件 如果配置文件名为generatorConfig.xml 则不需要配置 --&gt;</span><br><span class="line">                    &lt;!-- &lt;configurationFile&gt;src/main/resources/generator/generatorConfig.xml&lt;/configurationFile&gt;--&gt;</span><br><span class="line">                    &lt;!-- 允许移动生成的文件 --&gt;</span><br><span class="line">                    &lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class="line">                    &lt;!-- 启用覆盖 --&gt;</span><br><span class="line">                    &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">                &lt;!-- 引入插件所需要的依赖 --&gt;</span><br><span class="line">                &lt;dependencies&gt;</span><br><span class="line">                    &lt;dependency&gt;</span><br><span class="line">                        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">                        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">                        &lt;version&gt;8.0.24&lt;/version&gt;</span><br><span class="line">                    &lt;/dependency&gt;</span><br><span class="line">                &lt;/dependencies&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="generatorConfig-xml-自动生成配置文件"><a href="#generatorConfig-xml-自动生成配置文件" class="headerlink" title="generatorConfig.xml 自动生成配置文件"></a>generatorConfig.xml 自动生成配置文件</h1><blockquote><p>table标签中需要指定tableName和生成的实体名字</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;!-- 是否生成注释代时间戳--&gt;</span><br><span class="line">            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line">        &lt;!--数据库链接地址账号密码--&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=&quot;com.mysql.cj.jdbc.Driver&quot;</span><br><span class="line">                        connectionURL=&quot;jdbc:mysql://172.17.0.2:3306/spring-boot-mall?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=Asia/Shanghai&quot;</span><br><span class="line">                        userId=&quot;root&quot;</span><br><span class="line">                        password=&quot;000&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;!--该属性可以控制是否强制DECIMAL和NUMERIC类型的字段转换为Java类型的java.math.BigDecimal,默认值为false，一般不需要配置。--&gt;</span><br><span class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/javaTypeResolver&gt;</span><br><span class="line">        &lt;!--生成Model类存放位置--&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;top.orginly.mall.model.pojo&quot; targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">            &lt;!--enableSubPackages:如果true，MBG会根据catalog和schema来生成子包。如果false就会直接用targetPackage属性。默认为false。--&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;!--trimStrings:是否对数据库查询结果进行trim操作，如果设置为true就会生成类似这样public void setUsername(String username) &#123;this.username = username == null &amp;#63; null : username.trim();&#125;的setter方法。默认值为false。--&gt;</span><br><span class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line">        &lt;!--生成映射xml文件存放位置--&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;mappers&quot; targetProject=&quot;src/main/resources&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line">        &lt;!--生成Dao类存放位置(*Mapper.java)--&gt;</span><br><span class="line">        &lt;!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码</span><br><span class="line">            type=&quot;ANNOTATEDMAPPER&quot;,生成Java Model 和基于注解的Mapper对象</span><br><span class="line">            type=&quot;MIXEDMAPPER&quot;,生成基于注解的Java Model 和相应的Mapper对象</span><br><span class="line">            type=&quot;XMLMAPPER&quot;,生成SQLMap XML文件和独立的Mapper接口</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;top.orginly.mall.model.dao&quot; targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--生成对应表及类名--&gt;</span><br><span class="line">        &lt;table tableName=&quot;mall_user&quot; domainObjectName=&quot;User&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="line">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="line">            &lt;!--useActualColumnNames:如果设置为true,那么MBG会使用从数据库元数据获取的列名作为生成的实体对象的属性。 如果为false(默认值)，MGB将会尝试将返回的名称转换为驼峰形式。 在这两种情况下，可以通过 元素显示指定，在这种情况下将会忽略这个（useActualColumnNames）属性。--&gt;</span><br><span class="line">            &lt;property name=&quot;useActualColumnNames&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;!-- 数据库表主键 可以不设置 --&gt;</span><br><span class="line">             &lt;!-- &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;Mysql&quot; identity=&quot;true&quot;/&gt; --&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">       </span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><h1 id="运行生成文件"><a href="#运行生成文件" class="headerlink" title="运行生成文件"></a>运行生成文件</h1><blockquote><p>这里推荐使用IDEA<br>我们只需要找到右边侧栏中的maven<br>依次找到 <code>plugins–&gt;mybatis-generaltor–&gt;mybatis-generaltor:generaltor</code><br>之后双击即可,此时刷新一下项目就自动生成我们想要的,mapper和xml以及pojo</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210601225122987-1797020446.png" alt="image"></p><blockquote><p>提示 <code>BUILD SUCCESS</code> 即生成成功！</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --------------------------&lt; top.orginly:mall &gt;--------------------------</span><br><span class="line">[INFO] Building mall 0.0.1-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- mybatis-generator-maven-plugin:1.4.0:generate (default-cli) @ mall ---</span><br><span class="line">[INFO] Connecting to the Database</span><br><span class="line">[INFO] Introspecting table mall_user</span><br><span class="line">[INFO] Introspecting table mall_category</span><br><span class="line">[INFO] Introspecting table mall_goods</span><br><span class="line">[INFO] Introspecting table mall_order</span><br><span class="line">[INFO] Introspecting table mall_order_goods</span><br><span class="line">[INFO] Introspecting table mall_cart</span><br><span class="line">[INFO] Generating Primary Key class for table mall_user</span><br><span class="line">[INFO] Generating Record class for table mall_user</span><br><span class="line">[INFO] Generating Mapper Interface for table mall_user</span><br><span class="line">[INFO] Generating SQL Map for table mall_user</span><br><span class="line">[INFO] Generating Record class for table mall_category</span><br><span class="line">[INFO] Generating Mapper Interface for table mall_category</span><br><span class="line">[INFO] Generating SQL Map for table mall_category</span><br><span class="line">[INFO] Generating Record class for table mall_goods</span><br><span class="line">[INFO] Generating Mapper Interface for table mall_goods</span><br><span class="line">[INFO] Generating SQL Map for table mall_goods</span><br><span class="line">[INFO] Generating Primary Key class for table mall_order</span><br><span class="line">[INFO] Generating Record class for table mall_order</span><br><span class="line">[INFO] Generating Mapper Interface for table mall_order</span><br><span class="line">[INFO] Generating SQL Map for table mall_order</span><br><span class="line">[INFO] Generating Record class for table mall_order_goods</span><br><span class="line">[INFO] Generating Mapper Interface for table mall_order_goods</span><br><span class="line">[INFO] Generating SQL Map for table mall_order_goods</span><br><span class="line">[INFO] Generating Record class for table mall_cart</span><br><span class="line">[INFO] Generating Mapper Interface for table mall_cart</span><br><span class="line">[INFO] Generating SQL Map for table mall_cart</span><br><span class="line">[INFO] Saving file UserMapper.xml</span><br><span class="line">[INFO] Saving file CategoryMapper.xml</span><br><span class="line">[INFO] Saving file GoodsMapper.xml</span><br><span class="line">[INFO] Saving file OrderMapper.xml</span><br><span class="line">[INFO] Saving file OrderGoodsMapper.xml</span><br><span class="line">[INFO] Saving file CartMapper.xml</span><br><span class="line">[INFO] Saving file UserKey.java</span><br><span class="line">[INFO] Saving file User.java</span><br><span class="line">[INFO] Saving file UserMapper.java</span><br><span class="line">[INFO] Saving file Category.java</span><br><span class="line">[INFO] Saving file CategoryMapper.java</span><br><span class="line">[INFO] Saving file Goods.java</span><br><span class="line">[INFO] Saving file GoodsMapper.java</span><br><span class="line">[INFO] Saving file OrderKey.java</span><br><span class="line">[INFO] Saving file Order.java</span><br><span class="line">[INFO] Saving file OrderMapper.java</span><br><span class="line">[INFO] Saving file OrderGoods.java</span><br><span class="line">[INFO] Saving file OrderGoodsMapper.java</span><br><span class="line">[INFO] Saving file Cart.java</span><br><span class="line">[INFO] Saving file CartMapper.java</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  2.193 s</span><br><span class="line">[INFO] Finished at: 2021-06-01T22:33:37+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210603203007435-1960026675.png" alt="image"></p><h1 id="配置-mybatis-数据源及-mappers-路径"><a href="#配置-mybatis-数据源及-mappers-路径" class="headerlink" title="配置 mybatis 数据源及 mappers 路径"></a>配置 mybatis 数据源及 mappers 路径</h1><blockquote><p>编辑配置文件 <code>/src/main/resources/application.properties</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 数据源名称</span><br><span class="line">spring.datasource.name=spring_boot_mall</span><br><span class="line"># 数据库连接 url</span><br><span class="line">spring.datasource.url=jdbc:mysql://172.17.0.2:3306/spring-boot-mall?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;useSSl=false;serverTimezone=Asia/Shanghai</span><br><span class="line"># 数据库驱动类</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line"># 用户名</span><br><span class="line">spring.datasource.username=root</span><br><span class="line"># 密码</span><br><span class="line">spring.datasource.password=000</span><br><span class="line"></span><br><span class="line"># 设置Mybatis Mapper文件路径</span><br><span class="line">mybatis.config-location=classpath:mappers/*.xml</span><br></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="报错-dao类无法找到"><a href="#报错-dao类无法找到" class="headerlink" title="报错 dao类无法找到"></a>报错 dao类无法找到</h2><blockquote><p>需要在spring-boot 入口类<code>/src/main/java/top/orginly/mall/MallApplication.java</code>中添加注解<br><code>@MapperScan(basePackages = &quot;top.orginly.mall.model.dao&quot;)</code><br>指向mapper对应的类</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@MapperScan(basePackages = &quot;top.orginly.mall.model.dao&quot;)</span><br><span class="line">public class MallApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(MallApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service-实体类无法自动载入"><a href="#Service-实体类无法自动载入" class="headerlink" title="Service 实体类无法自动载入"></a>Service 实体类无法自动载入</h3><blockquote><p>类添加 @Service 注解后 出现找不到 Mapper 类无法找到</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210603214442611-652486574.png" alt="image"></p><blockquote><p>报错但不影响程序正常运行但我们要解决掉，需要给 Mapper 添加 @Repository 注解告诉 IDEA 这是一个资源类</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210603214934497-1376687031.png" alt="image"></p><h2 id="重新生成后运行出错"><a href="#重新生成后运行出错" class="headerlink" title="重新生成后运行出错"></a>重新生成后运行出错</h2><blockquote><p>必须先删除 model 包和 mapper文件！！！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux+win10双系统扩容Boot/ESP分区</title>
      <link href="/posts/2769664366.html"/>
      <url>/posts/2769664366.html</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>系统：Archlinux + Windowns10 双系统<br>软件：MiniTool Partition Wizard 免费版 + Diskgenius 免费版<br>分区：原ESP分区100M 原恢复分区529M (因为是修改后才写的教程 所以图片上的大小是成功后的)</p><blockquote><p>建议准备一个U盘安装微pe 以防扩容后找不到系统分区<br>教程使用win10的恢复空间给ESP空间扩容</p></blockquote><h1 id="备份ESP分区和恢复分区序列号"><a href="#备份ESP分区和恢复分区序列号" class="headerlink" title="备份ESP分区和恢复分区序列号"></a>备份ESP分区和恢复分区序列号</h1><p><strong>以下步骤得到ESP分区和恢复分区序列号 保存起来 非常重要！！！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210416131845988-1556702629.png" alt="image"><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210416131910055-1435061314.png" alt="image"></p><h1 id="使用MiniTool对ESP分区扩张"><a href="#使用MiniTool对ESP分区扩张" class="headerlink" title="使用MiniTool对ESP分区扩张"></a>使用MiniTool对ESP分区扩张</h1><p><strong>选中ESP分区 点击Extend Partition</strong><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210416132459692-88045722.png" alt="image"><br><strong>选则恢复分区并调整需要拓展的大小 点击确定 根据提示重启系统进去PE系统自动完成</strong><br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210416132631011-1078862546.png" alt="image"></p><h1 id="更改序列号"><a href="#更改序列号" class="headerlink" title="更改序列号"></a>更改序列号</h1><p>开机后会显示找不到分区 如果可以进入系统 则直接使用Diskgenius进行修改<br>如果找不到系统则需要进入PE模式使用Diskgenius进行修改<br>选中对应的ESP分区和恢复分区把对应的序列复制进去点击完成<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210416132914801-1201056417.png" alt="image"></p><p>成功！</p>]]></content>
      
      
      <categories>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat Premium 15 linux 安装与激活 ArchLinux 2022</title>
      <link href="/posts/4181934611.html"/>
      <url>/posts/4181934611.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>不支持 Navicat16!!!<br>Navicat15.0.30 链接: <a href="https://pan.baidu.com/s/1Oe8uSbQ6F8e2cglrra8wNw">https://pan.baidu.com/s/1Oe8uSbQ6F8e2cglrra8wNw</a> 提取码: nwrk<br>参考<code>https://github.com/lzscxb/navicat-keygen</code></p></blockquote><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><p><code>http://www.navicat.com.cn/download/navicat-premium</code></p><h1 id="提取AppImage文件到文件夹里"><a href="#提取AppImage文件到文件夹里" class="headerlink" title="提取AppImage文件到文件夹里"></a>提取AppImage文件到文件夹里</h1><p><strong>cp的时候可能比较久请耐心等待  尽量目录一致</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir navicat15-premium-cs</span><br><span class="line">sudo mount -o loop navicat15-premium-cs.AppImage navicat15-premium-cs</span><br><span class="line">sudo cp -r navicat15-premium-cs navicat</span><br><span class="line">sudo umount navicat15-premium-cs</span><br><span class="line">rm -rf navicat15-premium-cs</span><br></pre></td></tr></table></figure><h2 id="安装-Navicat-Keygen"><a href="#安装-Navicat-Keygen" class="headerlink" title="安装 Navicat Keygen"></a>安装 Navicat Keygen</h2><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p><strong>你的gcc支持C++17特性</strong></p><p> 建议安装 <code>gcc11</code></p><h2 id="安装-capstone"><a href="#安装-capstone" class="headerlink" title="安装 capstone"></a>安装 capstone</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S capstone rapidjson openssl</span><br></pre></td></tr></table></figure><h2 id="安装-keystone"><a href="#安装-keystone" class="headerlink" title="安装 keystone"></a>安装 keystone</h2><p>方式一. aur仓库（推荐）</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S keystone</span><br></pre></td></tr></table></figure><p>方式二. 编译安装(不推荐)</p><blockquote><p>编译安装（这里时间比较久，耐心等待会…）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/keystone-engine/keystone</span><br><span class="line">cd keystone</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">../make-share.sh</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>使用编译安装会存在 libkeystone.so.0 找不到的问题需要链接到 /lib</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/local/lib/libkeystone.so.0 /lib</span><br></pre></td></tr></table></figure><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone -b linux --single-branch https://github.com/lzscxb/navicat-keygen.git</span><br><span class="line">cd navicat-keygen</span><br><span class="line">make all</span><br></pre></td></tr></table></figure><p><strong>生成完成后，你会在 <code>./bin</code> 文件夹下看到编译后的keygen/patcher。</strong></p><h1 id="navicat-patcher-替换官方公钥"><a href="#navicat-patcher-替换官方公钥" class="headerlink" title="navicat-patcher 替换官方公钥"></a>navicat-patcher 替换官方公钥</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./bin/navicat-patcher ../navicat</span><br></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">**********************************************************</span><br><span class="line">*       Navicat Patcher (Linux) by @DoubleLabyrinth      *</span><br><span class="line">*                  Version: 1.0                          *</span><br><span class="line">**********************************************************</span><br><span class="line"></span><br><span class="line">Press ENTER to continue or Ctrl + C to abort.</span><br><span class="line"></span><br><span class="line">[+] Try to open libcc.so ... Ok!</span><br><span class="line"></span><br><span class="line">[+] PatchSolution0 ...... Ready to apply</span><br><span class="line">    RefSegment      =  1</span><br><span class="line">    MachineCodeRva  =  0x0000000001377200</span><br><span class="line">    PatchMarkOffset = +0x000000000292c840</span><br><span class="line"></span><br><span class="line">[*] Generating new RSA private key, it may take a long time...</span><br><span class="line">[*] Your RSA private key:</span><br><span class="line">    -----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">    MIIEowIBAAKCAQEAta5uHinxzLei/iSOBu/Nf8y3X/BuGpmFcxacQIKb60amSHL4</span><br><span class="line">    vg0RaoWs3f04PapKSX+uGeWjhOzWX9UxRXj2xi1FeNgIKDa9+1cLKIvrOVlTlrpx</span><br><span class="line">    irXbOvGkF+uOd2mbEd11LgLwbnTKNoqWZuPHPh3hgUWF+fZ6/7rLuWrh+8K/OlHU</span><br><span class="line">    hOjgKZWoGxO7dXQhDav+iDxW7ab/s5B5/OJcwv+IvI3ZakL12C2fNKYcLtkonCTl</span><br><span class="line">    TyTvq/Q/bBLxoTxzgvkkanv+H99Sd4WuANA6Sk0Tu9vfC2jByVpWlp7OAwOmWVCf</span><br><span class="line">    k7YDoLNQtjONBMEE9+sKr3lxyaJ3+SAC2ity+QIDAQABAoIBAHPi1lShNp35SJtJ</span><br><span class="line">    H9rm3TK2lwU4LFMFN+0oL/SqGuBhCTHPPEClv0UuDQzwNw6Gb6ogKiJUqw/frgIk</span><br><span class="line">    z6/br7TLLbQeQF2+RUJrzC9JyHmlM79CH6h1xWf8uEmVtCMRFpu3ocX+k/QwxMcz</span><br><span class="line">    cSoiAnXpw2yctw+xG9XBBa+4sHrQMkY4VT+gx3W5kvrOEc24HDeiRvFUMSc+TtRd</span><br><span class="line">    SMg69vkMtx2OjjWW/jIXI8XY6evhCHFqXL+1+eG9RMT73Y6LfFyb/EoXzszkHcNs</span><br><span class="line">    WbS/5zwu3ZcHiaUfxp3HldW71A7UfPRLPpGT0y1IWXvCH5aL1u3JIvWUm4HDsLGo</span><br><span class="line">    CRCamH0CgYEA8DNGOPnjQTsREuE/Tfuq6xLNPEj+UoL8l+c9Lu/nW8DpCYSvm65h</span><br><span class="line">    1HUQYLy/IhRTA5m7EO/jaO0qmlgldccUadF4FaNdRyqfmOfcMw3mI9YeQXduS0eU</span><br><span class="line">    EE4J0m2H/Q7X45huDUTKKPOTfOFyA0cqdhicCsh5ll6yjyx8Cw2gZEcCgYEAwaHB</span><br><span class="line">    5Y64fS3xjfRVs2TwxzYXivGmnJBX87VMbvVeN43gFzUKdrXaKaRKHXj4QQt73EdM</span><br><span class="line">    AtDWuhivv+Y1We9mcQ2TZk0Oew+2CSnLm7rW9OAo9LvNOSaYdBXoFjDIayUfX5Ci</span><br><span class="line">    FLaJTYMcWCgw97E1fxr65psh4AuPtIqepd/1Tr8CgYB+/RyrErGq0ud768nkGKGM</span><br><span class="line">    FiybKpwKU2XniUE3h23xfFO3zIZq8A6YnCtEeYUzJzucM7JKigjYeEqFvwRO+Ck6</span><br><span class="line">    qJusFOpDra0i0bIA6+A4IgNs6Q9OjVEiLZ/TuESk7SwGD5hfO3cFn4DiDO6R/RXd</span><br><span class="line">    ybT1nndpoDcWqpYJ4fJiEQKBgQCb6UWZM7w1f2L67Hx9QI/nuBRo2n9PnaJUJ+1t</span><br><span class="line">    gsDkdqazyQ+t2mvaD+Flrdwnc7m9+uKnecUMf4g0OodG7U9NRKMlQnKggFwRMMgz</span><br><span class="line">    ktQ2xK/1r6pllEA5aNJB2/Hk5DVI28rGZtxTv3h5O5OCPfxXZkAUo2E5Z9XEh8GK</span><br><span class="line">    yrRZPQKBgHpl9YRClcX8mL72gXzYc7m+vLsMZZrdqbhFZ9xYdvVmRdqp48lKbkTL</span><br><span class="line">    sMAvHk8ACDXaPCfocbJ2Uq4XrZKk3+PA2709DAUa4lMkCxYAe71qXLv0AGfnG255</span><br><span class="line">    4p4TEE4lmUFqp5C+7rzX97e/a72eXKnmjQ3RpeWs23C2UHmKOMuw</span><br><span class="line">    -----END RSA PRIVATE KEY-----</span><br><span class="line">[*] Your RSA public key:</span><br><span class="line">    -----BEGIN PUBLIC KEY-----</span><br><span class="line">    MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAta5uHinxzLei/iSOBu/N</span><br><span class="line">    f8y3X/BuGpmFcxacQIKb60amSHL4vg0RaoWs3f04PapKSX+uGeWjhOzWX9UxRXj2</span><br><span class="line">    xi1FeNgIKDa9+1cLKIvrOVlTlrpxirXbOvGkF+uOd2mbEd11LgLwbnTKNoqWZuPH</span><br><span class="line">    Ph3hgUWF+fZ6/7rLuWrh+8K/OlHUhOjgKZWoGxO7dXQhDav+iDxW7ab/s5B5/OJc</span><br><span class="line">    wv+IvI3ZakL12C2fNKYcLtkonCTlTyTvq/Q/bBLxoTxzgvkkanv+H99Sd4WuANA6</span><br><span class="line">    Sk0Tu9vfC2jByVpWlp7OAwOmWVCfk7YDoLNQtjONBMEE9+sKr3lxyaJ3+SAC2ity</span><br><span class="line">    +QIDAQAB</span><br><span class="line">    -----END PUBLIC KEY-----</span><br><span class="line"></span><br><span class="line">*******************************************************</span><br><span class="line">*                   PatchSolution0                    *</span><br><span class="line">*******************************************************</span><br><span class="line">[*] Previous:</span><br><span class="line">+0x0000000000000070                          01 00 00 00 05 00 00 00          ........</span><br><span class="line">+0x0000000000000080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x0000000000000090  00 00 00 00 00 00 00 00 40 c8 92 02 00 00 00 00  ........@.......</span><br><span class="line">+0x00000000000000a0  40 c8 92 02 00 00 00 00 00 10 00 00 00 00 00 00  @...............</span><br><span class="line">[*] After:</span><br><span class="line">+0x0000000000000070                          01 00 00 00 05 00 00 00          ........</span><br><span class="line">+0x0000000000000080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x0000000000000090  00 00 00 00 00 00 00 00 d0 c9 92 02 00 00 00 00  ................</span><br><span class="line">+0x00000000000000a0  d0 c9 92 02 00 00 00 00 00 10 00 00 00 00 00 00  ................</span><br><span class="line"></span><br><span class="line">[*] Previous:</span><br><span class="line">+0x000000000292c840  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c850  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c860  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c870  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c880  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c890  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c8a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c8b0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c8c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c8d0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c8e0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c8f0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c900  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c910  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c920  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c930  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c940  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c950  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c960  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c970  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c980  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c990  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c9a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c9b0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">+0x000000000292c9c0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">[*] After:</span><br><span class="line">+0x000000000292c840  ef be ad de 4d 49 49 42 49 6a 41 4e 42 67 6b 71  ....MIIBIjANBgkq</span><br><span class="line">+0x000000000292c850  68 6b 69 47 39 77 30 42 41 51 45 46 41 41 4f 43  hkiG9w0BAQEFAAOC</span><br><span class="line">+0x000000000292c860  41 51 38 41 4d 49 49 42 43 67 4b 43 41 51 45 41  AQ8AMIIBCgKCAQEA</span><br><span class="line">+0x000000000292c870  74 61 35 75 48 69 6e 78 7a 4c 65 69 2f 69 53 4f  ta5uHinxzLei/iSO</span><br><span class="line">+0x000000000292c880  42 75 2f 4e 66 38 79 33 58 2f 42 75 47 70 6d 46  Bu/Nf8y3X/BuGpmF</span><br><span class="line">+0x000000000292c890  63 78 61 63 51 49 4b 62 36 30 61 6d 53 48 4c 34  cxacQIKb60amSHL4</span><br><span class="line">+0x000000000292c8a0  76 67 30 52 61 6f 57 73 33 66 30 34 50 61 70 4b  vg0RaoWs3f04PapK</span><br><span class="line">+0x000000000292c8b0  53 58 2b 75 47 65 57 6a 68 4f 7a 57 58 39 55 78  SX+uGeWjhOzWX9Ux</span><br><span class="line">+0x000000000292c8c0  52 58 6a 32 78 69 31 46 65 4e 67 49 4b 44 61 39  RXj2xi1FeNgIKDa9</span><br><span class="line">+0x000000000292c8d0  2b 31 63 4c 4b 49 76 72 4f 56 6c 54 6c 72 70 78  +1cLKIvrOVlTlrpx</span><br><span class="line">+0x000000000292c8e0  69 72 58 62 4f 76 47 6b 46 2b 75 4f 64 32 6d 62  irXbOvGkF+uOd2mb</span><br><span class="line">+0x000000000292c8f0  45 64 31 31 4c 67 4c 77 62 6e 54 4b 4e 6f 71 57  Ed11LgLwbnTKNoqW</span><br><span class="line">+0x000000000292c900  5a 75 50 48 50 68 33 68 67 55 57 46 2b 66 5a 36  ZuPHPh3hgUWF+fZ6</span><br><span class="line">+0x000000000292c910  2f 37 72 4c 75 57 72 68 2b 38 4b 2f 4f 6c 48 55  /7rLuWrh+8K/OlHU</span><br><span class="line">+0x000000000292c920  68 4f 6a 67 4b 5a 57 6f 47 78 4f 37 64 58 51 68  hOjgKZWoGxO7dXQh</span><br><span class="line">+0x000000000292c930  44 61 76 2b 69 44 78 57 37 61 62 2f 73 35 42 35  Dav+iDxW7ab/s5B5</span><br><span class="line">+0x000000000292c940  2f 4f 4a 63 77 76 2b 49 76 49 33 5a 61 6b 4c 31  /OJcwv+IvI3ZakL1</span><br><span class="line">+0x000000000292c950  32 43 32 66 4e 4b 59 63 4c 74 6b 6f 6e 43 54 6c  2C2fNKYcLtkonCTl</span><br><span class="line">+0x000000000292c960  54 79 54 76 71 2f 51 2f 62 42 4c 78 6f 54 78 7a  TyTvq/Q/bBLxoTxz</span><br><span class="line">+0x000000000292c970  67 76 6b 6b 61 6e 76 2b 48 39 39 53 64 34 57 75  gvkkanv+H99Sd4Wu</span><br><span class="line">+0x000000000292c980  41 4e 41 36 53 6b 30 54 75 39 76 66 43 32 6a 42  ANA6Sk0Tu9vfC2jB</span><br><span class="line">+0x000000000292c990  79 56 70 57 6c 70 37 4f 41 77 4f 6d 57 56 43 66  yVpWlp7OAwOmWVCf</span><br><span class="line">+0x000000000292c9a0  6b 37 59 44 6f 4c 4e 51 74 6a 4f 4e 42 4d 45 45  k7YDoLNQtjONBMEE</span><br><span class="line">+0x000000000292c9b0  39 2b 73 4b 72 33 6c 78 79 61 4a 33 2b 53 41 43  9+sKr3lxyaJ3+SAC</span><br><span class="line">+0x000000000292c9c0  32 69 74 79 2b 51 49 44 41 51 41 42 ad de ef be  2ity+QIDAQAB....</span><br><span class="line"></span><br><span class="line">[*] Previous:</span><br><span class="line">+0x0000000001377200  44 0f b6 24 18 48 8b 44 24 28 8b 50 f8 85 d2 79  D..$.H.D$(.P...y</span><br><span class="line">+0x0000000001377210  6f                                               o               </span><br><span class="line">[*] After:</span><br><span class="line">+0x0000000001377200  45 31 e4 48 8d 05 3a 56 5b 01 90 90 90 90 90 90  E1.H..:V[.......</span><br><span class="line">+0x0000000001377210  90                                               .               </span><br><span class="line"></span><br><span class="line">[*] New RSA-2048 private key has been saved to</span><br><span class="line">    /home/orginly/Downloads/navicat-keygen/RegPrivateKey.pem</span><br><span class="line"></span><br><span class="line">*******************************************************</span><br><span class="line">*           PATCH HAS BEEN DONE SUCCESSFULLY!         *</span><br><span class="line">*                  HAVE FUN AND ENJOY~                *</span><br><span class="line">*******************************************************</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="重新打包成-AppImage"><a href="#重新打包成-AppImage" class="headerlink" title="重新打包成 AppImage"></a>重新打包成 AppImage</h1><h2 id="安装-appimagetool"><a href="#安装-appimagetool" class="headerlink" title="安装 appimagetool"></a>安装 appimagetool</h2><blockquote><p>yay 可能需要网络代理才能下载<br>也可以在 github 下载 <a href="https://github.com/AppImage/AppImageKit/releases">https://github.com/AppImage/AppImageKit/releases</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S appimagetool</span><br></pre></td></tr></table></figure><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appimagetool navicat navicat15.AppImage</span><br></pre></td></tr></table></figure><h1 id="运行-Navcat-15"><a href="#运行-Navcat-15" class="headerlink" title="运行 Navcat 15"></a>运行 Navcat 15</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x navicat15.AppImage</span><br><span class="line">./navicat15.AppImage</span><br></pre></td></tr></table></figure><h1 id="Navicat-keygen-生成序列号和激活码"><a href="#Navicat-keygen-生成序列号和激活码" class="headerlink" title="Navicat-keygen 生成序列号和激活码"></a>Navicat-keygen 生成序列号和激活码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br><span class="line">/home/orginly/Downloads/navicat-keygen</span><br><span class="line">./bin/navicat-keygen --text ./RegPrivateKey.pem</span><br></pre></td></tr></table></figure><p>你会被要求选择Navicat产品类别、Navicat语言版本和填写主版本号。之后一个随机生成的 序列号。</p><p><strong>需要断开网络连接，否则会激活失败</strong></p><p>你可以使用这个 <strong>序列号</strong> 来暂时激活Navicat。</p><p>之后你会被要求填写 <strong>用户名</strong> 和 <strong>组织名</strong>。你可以随意填写，但别太长。</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210412220911599-2045499242.png" alt="image"></p><p><strong>此时会进入等待状态 你会被要求填写请求码。</strong><br><strong>注意：不要关闭keygen。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[*] Your name: DoubleLabyrinth</span><br><span class="line">[*] Your organization: DoubleLabyrinth</span><br><span class="line"></span><br><span class="line">[*] Input request code in Base64: (Double press ENTER to end)</span><br></pre></td></tr></table></figure><p><strong>断开网络</strong>. 找到注册窗口，填写keygen给你的 <strong>序列号</strong>，然后点击 <code>激活</code></p><p>通常在线激活会失败，所以在弹出的提示中选择 <code>手动激活</code>。</p><p>复制 <strong>请求码</strong> 到keygen，连按两次回车结束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[*] Request Info:</span><br><span class="line">&#123;&quot;K&quot;:&quot;NAVHDM6JYBZW6BTG&quot;, &quot;DI&quot;:&quot;8AACDE2CC4372938A390&quot;, &quot;P&quot;:&quot;linux&quot;&#125;</span><br><span class="line"></span><br><span class="line">[*] Response Info:</span><br><span class="line">&#123;&quot;K&quot;:&quot;NAVHDM6JYBZW6BTG&quot;,&quot;DI&quot;:&quot;8AACDE2CC4372938A390&quot;,&quot;N&quot;:&quot;orginly&quot;,&quot;O&quot;:&quot;orginly&quot;,&quot;T&quot;:1618264222&#125;</span><br><span class="line"></span><br><span class="line">[*] Activation Code:</span><br><span class="line">aokwdgERal7ycavHbohKxyiHS4m+oI3yCV+N6/q10QUJgA57YwtawE1HKbTO+6WqfOv8piR7o3cNNuK0MCH2hbTdSERIckKYq2x1iWemZi7r7PNINLoPcztNgq6WRWQK62EvDZhggl2BcCPNaR5FqGdC+Ff5H1Qp3qatK9yJTvmeW9U8GOuU/CJ0cN+BMbVvP4LZZh6ejTC/hLEaQQvkDd0pT8cVVjPXMsXNboUdljo4wWg5wWVBS8oYs6I0C8jVdaDIlzlkPMZUfMhtIQMTFPgfMOkm3Zp48EQ0rWdmE1lf8XCRMqCIOrmv4vi+jR90fot8Z+yutX4+MBTyiq6ZOQ==</span><br></pre></td></tr></table></figure><p>最终你会得到一个base64编码的 激活码。</p><p>将之复制到 手动激活 的窗口，然后点击 激活。</p><p>如果没有什么意外，应该可以成功激活。<br><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210412221007365-615652406.png" alt="image"></p><h1 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br><span class="line">/home/orginly/Downloads</span><br><span class="line"></span><br><span class="line">sudo rm -rf navicat15-premium-cs.AppImage</span><br><span class="line">sudo rm -rf navicat</span><br><span class="line">sudo rm -rf navicat-keygen</span><br><span class="line"></span><br><span class="line">yay -Runsc keystone capstone rapidjson</span><br></pre></td></tr></table></figure><h1 id="可能会出现的问题"><a href="#可能会出现的问题" class="headerlink" title="可能会出现的问题"></a>可能会出现的问题</h1><h2 id="Try-to-open-libcc-so-…-Not-Found"><a href="#Try-to-open-libcc-so-…-Not-Found" class="headerlink" title="Try to open libcc.so … Not Found"></a>Try to open libcc.so … Not Found</h2><blockquote><p>Press ENTER to continue or Ctrl + C to abort.<br>[+] Try to open libcc.so … Not Found!</p></blockquote><p>执行 <code>sudo ./bin/navicat-patcher ../navicat</code>  时 <code>../navicat</code> 路径找不到</p><h2 id="libcrypt-so-1-cannot-open-shared-object"><a href="#libcrypt-so-1-cannot-open-shared-object" class="headerlink" title="libcrypt.so.1: cannot open shared object"></a>libcrypt.so.1: cannot open shared object</h2><blockquote><p>/tmp/.mount_navicaL06GBK/AppRun: error while loading shared libraries: libcrypt.so.1: cannot open shared object file: No such file or directory</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S libxcrypt-compat</span><br></pre></td></tr></table></figure><h2 id="libgio-2-0-so-0-undefined-symbol-g-module-open-full"><a href="#libgio-2-0-so-0-undefined-symbol-g-module-open-full" class="headerlink" title="/libgio-2.0.so.0: undefined symbol: g_module_open_full"></a>/libgio-2.0.so.0: undefined symbol: g_module_open_full</h2><blockquote><p>/tmp/.mount_navicaa3IXPX/AppRun: symbol lookup error: /usr/lib/libgio-2.0.so.0: undefined symbol: g_module_open_full</p></blockquote><p>glib2 &gt;= 2.7.0 时 会出现此类问题<br>解决办法：将 glib2 2.68.4 集成到 navicat 中</p><ol><li>下载 glib2 2.68.4<br><a href="https://archive.archlinux.org/packages/g/glib2/glib2-2.68.4-1-x86_64.pkg.tar.zst">https://archive.archlinux.org/packages/g/glib2/glib2-2.68.4-1-x86_64.pkg.tar.zst</a></li><li>解压并将 usr 复制的 navicat 中<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -r ~/Desktop/usr ~/Software/apps/navicat</span><br></pre></td></tr></table></figure></li></ol><h2 id="libffi-so-7-cannot-open-shared-object"><a href="#libffi-so-7-cannot-open-shared-object" class="headerlink" title="libffi.so.7: cannot open shared object"></a>libffi.so.7: cannot open shared object</h2><blockquote><p>/tmp/.mount_navica9bFtLj/AppRun: error while loading shared libraries: libffi.so.7: cannot open shared object file: No such file or directory</p></blockquote><p>同上面的一样 将 libffi7 补丁打到 navicat 中</p><ol><li>下载 libffi7<br><a href="https://packages.ubuntu.com/focal/libffi7">https://packages.ubuntu.com/focal/libffi7</a></li><li>解压data.tar.xz 并将 usr/lib/x86_64-linux-gnud/* 复制的 navicat/usr/lib 中<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -r ~/Desktop/x86_64-linux-gnu/* ~/Software/apps/navicat/usr/lib</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux zsh终端美化 powerlevel10k配置</title>
      <link href="/posts/3009125945.html"/>
      <url>/posts/3009125945.html</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Arch Linux + KDE Plasma</p><h1 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S zsh</span><br></pre></td></tr></table></figure><h2 id="更改默认终端"><a href="#更改默认终端" class="headerlink" title="更改默认终端"></a>更改默认终端</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h1 id="安装oh-my-zsh-git"><a href="#安装oh-my-zsh-git" class="headerlink" title="安装oh-my-zsh-git"></a>安装oh-my-zsh-git</h1><blockquote><p>archlinuxcn源有打好的包，或者使用AUR安装。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S oh-my-zsh-git</span><br></pre></td></tr></table></figure><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/oh-my-zsh/zshrc ~/.zshrc</span><br></pre></td></tr></table></figure><blockquote><p>这时候打开终端软件，应该就会默认进入zsh了</p></blockquote><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><h2 id="autojump-跳转目录"><a href="#autojump-跳转目录" class="headerlink" title="autojump 跳转目录"></a>autojump 跳转目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S autojump</span><br></pre></td></tr></table></figure><h2 id="命令高亮现和自动建议补全"><a href="#命令高亮现和自动建议补全" class="headerlink" title="命令高亮现和自动建议补全"></a>命令高亮现和自动建议补全</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S zsh-syntax-highlighting zsh-autosuggestions</span><br></pre></td></tr></table></figure><blockquote><p>这两个是zsh插件，使用上面的方式配置是不行的，因为oh-my-zsh找不到这两个插件（会报plugin not found）。为此我们要进行一下特殊处理，创建这两个插件的符号链接到oh-my-zsh的自定义插件目录</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/share/zsh/plugins/zsh-syntax-highlighting /usr/share/oh-my-zsh/custom/plugins/</span><br><span class="line">sudo ln -s /usr/share/zsh/plugins/zsh-autosuggestions /usr/share/oh-my-zsh/custom/plugins/</span><br></pre></td></tr></table></figure><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>同样是打开.zshrc文件，找到plugins=(git)，在这里增加自己想要的插件即可，多个插件名称之间使用空格或者换行分开（不能使用逗号）。<br><code>vim ~/.zshrc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">sudo</span><br><span class="line">git</span><br><span class="line">autojump</span><br><span class="line">zsh-syntax-highlighting</span><br><span class="line">zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .zshrc</span><br></pre></td></tr></table></figure><h1 id="安装powerlevel10k样式"><a href="#安装powerlevel10k样式" class="headerlink" title="安装powerlevel10k样式"></a>安装powerlevel10k样式</h1><h2 id="安装Nerd-Fonts字体"><a href="#安装Nerd-Fonts字体" class="headerlink" title="安装Nerd Fonts字体"></a>安装Nerd Fonts字体</h2><h3 id="下载字体"><a href="#下载字体" class="headerlink" title="下载字体"></a>下载字体</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.local/share/fonts</span><br><span class="line">cd ~/.local/share/fonts &amp;&amp; curl -fLo &quot;Droid Sans Mono for Powerline Nerd Font Complete.otf&quot; https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/DroidSansMono/complete/Droid%20Sans%20Mono%20Nerd%20Font%20Complete.otf</span><br></pre></td></tr></table></figure><h3 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fc-list | grep -i droid</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20211212195754819-443504235.png" alt="image"></p><h3 id="设置终端字体"><a href="#设置终端字体" class="headerlink" title="设置终端字体"></a>设置终端字体</h3><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210411225528194-1045968221.png" alt="image"></p><h2 id="下载powerlevel10k"><a href="#下载powerlevel10k" class="headerlink" title="下载powerlevel10k"></a>下载powerlevel10k</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/themes/powerlevel10k</span><br></pre></td></tr></table></figure><h2 id="修改zsh主题"><a href="#修改zsh主题" class="headerlink" title="修改zsh主题"></a>修改zsh主题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</span><br><span class="line"></span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p><strong>重启终端即可进入配置p10k</strong><br>**<code>p10k configure</code> 以直接从终端访问内置配置向导    **</p><p><img src="https://cdn.jsdelivr.net/gh/lzscxb/Picture/images/2354934-20210411230642493-1277999922.png" alt="image"></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="配置成功后只显示一行"><a href="#配置成功后只显示一行" class="headerlink" title="配置成功后只显示一行"></a>配置成功后只显示一行</h2><p><strong>Instant Prompt Mode 选择off</strong></p>]]></content>
      
      
      <categories>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
